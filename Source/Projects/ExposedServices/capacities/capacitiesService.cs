// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS1_RetailerDriverStockOptimisation.Services.capacities.DataContracts;
using DSS1_RetailerDriverStockOptimisation.BO;
using AutoMapper;

namespace DSS1_RetailerDriverStockOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class capacitiesService : IcapacitiesService
    {
        public ResponseDTO Publish(System.Collections.Generic.List<SupplierCapacityDTO> _capacities, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputcapacities = Mapper.Map<System.Collections.Generic.List<SupplierCapacityDTO>, System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>>(_capacities);
                var _publish = PublishImplementation(inputcapacities);
                var result = Mapper.Map<DSS1_RetailerDriverStockOptimisation.BO.Response, ResponseDTO>(_publish);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("capacities Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<ItemDTO, DSS1_RetailerDriverStockOptimisation.BO.Item>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.Item, ItemDTO>();
            Mapper.CreateMap<ResponseDTO, DSS1_RetailerDriverStockOptimisation.BO.Response>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.Response, ResponseDTO>();
            Mapper.CreateMap<SupplierDTO, DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.Supplier, SupplierDTO>();
            Mapper.CreateMap<SupplierCapacityDTO, DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity, SupplierCapacityDTO>();
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Response PublishImplementation(System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity> capacities)
        {
            string message = "";
            foreach (var supCapacity in capacities ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "API",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Item: " + (supCapacity?.Item?.SKU ?? ""));
                if ((supCapacity?.Item == null))
                {
                    message = message + (supCapacity?.Id ?? 0) + " ,";
                    continue;
                }
                var _var0 = supCapacity?.Item?.SKU;
                DSS1_RetailerDriverStockOptimisation.BO.Item existingItem = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>((s) => s.SKU == _var0)?.FirstOrDefault();
                if ((existingItem == null))
                {
                    message = message + (supCapacity?.Id ?? 0) + " ,";
                    continue;
                }
                DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity newSupCapacity = new DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity();
                newSupCapacity.Stock = (supCapacity?.Stock ?? 0);
                newSupCapacity.DailyProduction = (supCapacity?.DailyProduction ?? 0);
                newSupCapacity.DateOfStockUpdate = (supCapacity?.DateOfStockUpdate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newSupCapacity.Item = existingItem;
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(newSupCapacity);
            }
            if (((((message == null || message == "")) == false)))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "API",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error message: " + message);
                return DSS1_RetailerDriverStockOptimisation.BO.ResponseExtensions.GenerateResponse("Failed", "Failed to import the entries with Ids " + message, "", "-1");
            }
            return DSS1_RetailerDriverStockOptimisation.BO.ResponseExtensions.GenerateResponse("Succeed", "All items imported successfully.", "", "1");
        }


    }
}