// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS1_RetailerDriverStockOptimisation.Services.salesForecasts.DataContracts;
using DSS1_RetailerDriverStockOptimisation.BO;
using AutoMapper;

namespace DSS1_RetailerDriverStockOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class salesForecastsService : IsalesForecastsService
    {
        public ResponseDTO Import(System.Collections.Generic.List<SalesForecastDetailsDTO> _salesForecasts, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputsalesForecasts = Mapper.Map<System.Collections.Generic.List<SalesForecastDetailsDTO>, System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>>(_salesForecasts);
                var _import = ImportImplementation(inputsalesForecasts);
                var result = Mapper.Map<DSS1_RetailerDriverStockOptimisation.BO.Response, ResponseDTO>(_import);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("salesForecasts Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<ResponseDTO, DSS1_RetailerDriverStockOptimisation.BO.Response>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.Response, ResponseDTO>();
            Mapper.CreateMap<SalesDTO, DSS1_RetailerDriverStockOptimisation.BO.Sales>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.Sales, SalesDTO>()
            .Include<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails, SalesForecastDetailsDTO>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails, SalesForecastDetailsDTO>();
            Mapper.CreateMap<SalesForecastDetailsDTO, DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>();
            Mapper.CreateMap<SalesForecastDTO, DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>();
            Mapper.CreateMap<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast, SalesForecastDTO>();
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Response ImportImplementation(System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails> salesForecasts)
        {
            string message = "";
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast sForecast = new DSS1_RetailerDriverStockOptimisation.BO.SalesForecast();
            sForecast.ImportDate = DateTime.UtcNow;
            foreach (var salesForecast in salesForecasts ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "API",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Warehouse: " + (salesForecast?.Warehouse?.Code ?? ""));
                if ((salesForecast?.Item == null || salesForecast?.Warehouse == null))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "API",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "NULL");
                    message = message + (salesForecast?.Id ?? 0) + " ,";
                    continue;
                }
                var _var0 = salesForecast?.Item?.SKU;
                DSS1_RetailerDriverStockOptimisation.BO.Item existingItem = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>((s) => s.SKU == _var0)?.FirstOrDefault();
                var _var1 = salesForecast?.Warehouse?.Code;
                DSS1_RetailerDriverStockOptimisation.BO.Warehouse existingWarehouse = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>((a) => a.Code == _var1)?.FirstOrDefault();
                if ((existingItem == null || existingWarehouse == null))
                {
                    message = message + (salesForecast?.Id ?? 0) + " ,";
                    continue;
                }
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails newSalesForecast = new DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails();
                newSalesForecast.Warehouse = existingWarehouse;
                newSalesForecast.Item = existingItem;
                newSalesForecast.ForecastDate = (salesForecast?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newSalesForecast.Units = (salesForecast?.Units ?? 0);
                newSalesForecast.SalesForecast = sForecast;
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>(newSalesForecast);
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(sForecast);
            if (((((message == null || message == "")) == false)))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "API",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Error message: " + message);
                return DSS1_RetailerDriverStockOptimisation.BO.ResponseExtensions.GenerateResponse("Failed", "Failed to import the entries with Ids " + message, "", "-1");
            }
            return DSS1_RetailerDriverStockOptimisation.BO.ResponseExtensions.GenerateResponse("Succeed", "All entries imported successfully.", "", "1");
        }


    }
}