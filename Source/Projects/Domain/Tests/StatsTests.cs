// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.BoTesting.Tests.Common;
using DSS1_RetailerDriverStockOptimisation.DAL;

namespace DSS1_RetailerDriverStockOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for StatsTest and is intended
    ///to contain all StatsTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Stats Repository Tests")]
    [Category("Stats Repository Tests")]
    internal class StatsTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Stats`")]
        [Order(0)]
        public void Stats_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _stocklevelkpi_warehouse_stats = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
            };
            var _stocklevelkpi_item_stats = new DSS1_RetailerDriverStockOptimisation.BO.Item
            {
                SKU = "503bf3c8-467b-47d4-8acd-02c46ab23130Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 940,
                SupplierPackSize = 5009,
                InnerPackSize = 6760,
                PalletType = "Item_PalletType",
                PalTI = 6022,
                PalHI = 7389,
                UOM = "Item_UOM",
            };
            new PersistenceSpecification<DSS1_RetailerDriverStockOptimisation.BO.Stats>(Session)
            .CheckProperty(p => p.Percentage, 222222.22M)
            .CheckProperty(p => p.Threshold, 222222.22M)
            .CheckProperty(p => p.DateFormatted, "Stats_DateFormatted")
            .CheckProperty(p => p.Date, now)
            .CheckReference(p => p.Warehouse, _stocklevelkpi_warehouse_stats)
            .CheckReference(p => p.Item, _stocklevelkpi_item_stats)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Stats`")]
        [Order(1)]
        public void Stats_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS1_RetailerDriverStockOptimisation.BO.Stats> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats>(
                              a => true
                              && (a.Percentage + 123 > 0)
                              && (a.Threshold + 123 > 0)
                              && (a.DateFormatted != string.Empty && a.DateFormatted != null)
                              && a.Date.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.Warehouse != null
                              && a.Item != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}