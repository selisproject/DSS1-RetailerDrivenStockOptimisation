// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.BoTesting.Tests.Common;
using DSS1_RetailerDriverStockOptimisation.DAL;

namespace DSS1_RetailerDriverStockOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for PastOrderTest and is intended
    ///to contain all PastOrderTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("PastOrder Repository Tests")]
    [Category("PastOrder Repository Tests")]
    internal class PastOrderTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `PastOrder`")]
        [Order(0)]
        public void PastOrder_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _pastorder_item_pastorders = new DSS1_RetailerDriverStockOptimisation.BO.Item
            {
                SKU = "b1ac3a9d-90df-4b3c-b365-057e200f9ed2Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 4261,
                SupplierPackSize = 8639,
                InnerPackSize = 4286,
                PalletType = "Item_PalletType",
                PalTI = 3193,
                PalHI = 2821,
                UOM = "Item_UOM",
            };
            var _pastorder_warehouse_pastorders = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
            };
            new PersistenceSpecification<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(Session)
            .CheckProperty(p => p.OrderNumber, 8141)
            .CheckProperty(p => p.WrittenDate, now)
            .CheckProperty(p => p.NotBeforeDate, now)
            .CheckProperty(p => p.QuantityOrdered, 536)
            .CheckProperty(p => p.ReceiveDate, now)
            .CheckProperty(p => p.QuantityReceived, 6161)
            .CheckProperty(p => p.Caller, "PastOrder_Caller")
            .CheckReference(p => p.Item, _pastorder_item_pastorders)
            .CheckReference(p => p.Warehouse, _pastorder_warehouse_pastorders)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `PastOrder`")]
        [Order(1)]
        public void PastOrder_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS1_RetailerDriverStockOptimisation.BO.PastOrder> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(
                              a => true
                              && (a.OrderNumber + 123 > 0)
                              && a.WrittenDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.NotBeforeDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.QuantityOrdered + 123 > 0)
                              && a.ReceiveDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.QuantityReceived + 123 > 0)
                              && (a.Caller != string.Empty && a.Caller != null)
                              && a.Item != null
                              && a.Warehouse != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}