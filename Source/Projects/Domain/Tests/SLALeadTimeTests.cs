// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.BoTesting.Tests.Common;
using DSS1_RetailerDriverStockOptimisation.DAL;

namespace DSS1_RetailerDriverStockOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for SLALeadTimeTest and is intended
    ///to contain all SLALeadTimeTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("SLALeadTime Repository Tests")]
    [Category("SLALeadTime Repository Tests")]
    internal class SLALeadTimeTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `SLALeadTime`")]
        [Order(0)]
        public void SLALeadTime_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _sla_item_slaleadtimes = new DSS1_RetailerDriverStockOptimisation.BO.Item
            {
                SKU = "2b4359a7-87fa-4b7d-8e90-5033a6f6c94dItem_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 3627,
                SupplierPackSize = 5852,
                InnerPackSize = 8255,
                PalletType = "Item_PalletType",
                PalTI = 162,
                PalHI = 7438,
                UOM = "Item_UOM",
            };
            var _sla_warehouse_slaleadtimes = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
            };
            new PersistenceSpecification<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(Session)
            .CheckProperty(p => p.AgreedLeadTime, 522)
            .CheckProperty(p => p.RealLeadTime, 3380)
            .CheckProperty(p => p.Percentage, 222222.22M)
            .CheckProperty(p => p.ItemDescription, "SLALeadTime_ItemDescription")
            .CheckProperty(p => p.DateFormatted, "SLALeadTime_DateFormatted")
            .CheckProperty(p => p.Threshold, 222222.22M)
            .CheckProperty(p => p.SLALeadDate, now)
            .CheckProperty(p => p.Month, 5619)
            .CheckProperty(p => p.MonthlyDelayed, 222222.22M)
            .CheckProperty(p => p.MontlhyOrders, 222222.22M)
            .CheckProperty(p => p.MonthlyPercentage, 222222.22M)
            .CheckReference(p => p.Item, _sla_item_slaleadtimes)
            .CheckReference(p => p.Warehouse, _sla_warehouse_slaleadtimes)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `SLALeadTime`")]
        [Order(1)]
        public void SLALeadTime_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(
                              a => true
                              && (a.AgreedLeadTime + 123 > 0)
                              && (a.RealLeadTime + 123 > 0)
                              && (a.Percentage + 123 > 0)
                              && (a.ItemDescription != string.Empty && a.ItemDescription != null)
                              && (a.DateFormatted != string.Empty && a.DateFormatted != null)
                              && (a.Threshold + 123 > 0)
                              && a.SLALeadDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Month + 123 > 0)
                              && (a.MonthlyDelayed + 123 > 0)
                              && (a.MontlhyOrders + 123 > 0)
                              && (a.MonthlyPercentage + 123 > 0)
                              && a.Item != null
                              && a.Warehouse != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}