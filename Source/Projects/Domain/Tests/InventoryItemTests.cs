// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.BoTesting.Tests.Common;
using DSS1_RetailerDriverStockOptimisation.DAL;

namespace DSS1_RetailerDriverStockOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for InventoryItemTest and is intended
    ///to contain all InventoryItemTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("InventoryItem Repository Tests")]
    [Category("InventoryItem Repository Tests")]
    internal class InventoryItemTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `InventoryItem`")]
        [Order(0)]
        public void InventoryItem_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _inventoryitem_item_inventoryitems = new DSS1_RetailerDriverStockOptimisation.BO.Item
            {
                SKU = "33eeefb1-ac7b-43ab-a3bf-c69fa7d98121Item_SKU",
                Description = "Item_Description",
                UPC = "Item_UPC",
                AvgDailyDemand = 222222.22M,
                PalletSize = 2692,
                SupplierPackSize = 2570,
                InnerPackSize = 5055,
                PalletType = "Item_PalletType",
                PalTI = 6008,
                PalHI = 1352,
                UOM = "Item_UOM",
            };
            var _inventoryitem_warehouse_inventoryitems = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse
            {
                Code = "Warehouse_Code",
                Description = "Warehouse_Description",
                FlowType = "Warehouse_FlowType",
            };
            new PersistenceSpecification<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(Session)
            .CheckProperty(p => p.CoverageDays, 4875)
            .CheckProperty(p => p.SafetyStock, 7640)
            .CheckProperty(p => p.Status, "InventoryItem_Status")
            .CheckReference(p => p.Item, _inventoryitem_item_inventoryitems)
            .CheckReference(p => p.Warehouse, _inventoryitem_warehouse_inventoryitems)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `InventoryItem`")]
        [Order(1)]
        public void InventoryItem_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(
                              a => true
                              && (a.CoverageDays + 123 > 0)
                              && (a.SafetyStock + 123 > 0)
                              && (a.Status != string.Empty && a.Status != null)
                              && a.Item != null
                              && a.Warehouse != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}