// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Web;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate;
using NHibernate.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using log4net;
using NHibernate.Action;
using NHibernate.Engine;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Data.DAL;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Auditing;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Identity;

namespace DSS1_RetailerDriverStockOptimisation.DAL
{
    public class RepositoryBuilder : IRepositoryBuilder
    {
        public ICreateRepository CreateCreateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IDeleteRepository CreateDeleteRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IRetrieveRepository CreateRetrieveRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IUpdateRepository CreateUpdateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IWorkflowRepository CreateWorkflowRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IIdentityRepository CreateIdentityRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IAuditingRepository CreateAuditingRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }
    }

    public class Repository : IRepository
    {
        public static List<string> SystemClassNames = new List<string>()
        { "ApplicationUserAction","ApplicationUserExternalProfile","ApplicationSetting","ApplicationUser","ApplicationRole","ApplicationOperation","ApplicationPermission","ApplicationClient","ApplicationUserLogin","ApplicationUserClaim","ProfileSetting","Profile","ApplicationLanguage","DateTimeFormat","ApplicationTheme","FileData","StorageMedium","AuditEntityConfiguration","AuditPropertyConfiguration","AuditLogEntry","AuditLogEntryType","AuditLogPropertyActionType","WorkflowStatus","WorkflowExecutionResult","WorkflowContextBase","WorkflowSchedule"
        };

        private readonly ISession _currentSession;
        private readonly MiniSessionManager _sessionManager;

        public Repository(MiniSessionManager manager = null)
        {
            _sessionManager = manager;
            if (_sessionManager == null)
            {
                _sessionManager = MiniSessionManager.Instance;
            }
            // Make sure the session is open
            _sessionManager.OpenSession();
            _currentSession = _sessionManager.Session;
        }

        // For using without a MiniSessionManager
        public Repository(ISession session)
        {
            _currentSession = session;
            _sessionManager = new MiniSessionManager();
        }

        private RepositoryAction? _prevAction;
        private void SetCurrentActionTo(RepositoryAction? action)
        {
            if (_sessionManager == null) return;
            _prevAction = _sessionManager.LastAction;
            _sessionManager.LastAction = (action ?? _prevAction ?? RepositoryAction.NONE);
        }

        private void RestoreLastAction()
        {
            SetCurrentActionTo(null);
        }

        #region Implementation of IRepository

        public void DeleteAgreement(DSS1_RetailerDriverStockOptimisation.BO.Agreement agreement, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(agreement == null || agreement.IsTransient()) return;
            foreach (var toDissasociate in agreement.Warehouses)
            {
                agreement.RemoveWarehouses(toDissasociate);
            }
            foreach (var toDissasociate in agreement.AgreementStatuses)
            {
                agreement.RemoveAgreementStatuses(toDissasociate);
            }
            foreach (var toDissasociate in agreement.StockOnHands)
            {
                agreement.RemoveStockOnHands(toDissasociate);
            }
            agreement.Supplier = null;
            foreach (var toDissasociate in agreement.TransportUnCaps)
            {
                agreement.RemoveTransportUnCaps(toDissasociate);
            }
            foreach (var toDissasociate in agreement.Items)
            {
                agreement.RemoveItems(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(ap=> ap.Agreement == agreement))
            {
                toDissasociate.Agreement = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(agreement, isCascaded);
        }
        public void DeleteAgreementStatus(DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus agreementstatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(agreementstatus == null || agreementstatus.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(ap=> ap.AgreementStatuses.Contains(agreementstatus)))
            {
                toDissasociate.RemoveAgreementStatuses(agreementstatus);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus>(agreementstatus, isCascaded);
        }
        public void DeleteApplicationClient(zAppDev.DotNet.Framework.Identity.Model.ApplicationClient applicationclient, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationclient == null || applicationclient.IsTransient()) return;
            applicationclient.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationClient>(applicationclient, isCascaded);
        }
        public void DeleteApplicationLanguage(zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage applicationlanguage, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationlanguage == null || applicationlanguage.IsTransient()) return;
            if (applicationlanguage.DateTimeFormat != null)
            {
                var toDelete = applicationlanguage.DateTimeFormat;
                applicationlanguage.DateTimeFormat.ApplicationLanguage = null;
                applicationlanguage.DateTimeFormat = null;
                DeleteDateTimeFormat(toDelete, false, isCascaded, applicationlanguage);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage>(applicationlanguage, isCascaded);
        }
        public void DeleteApplicationOperation(zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation applicationoperation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationoperation == null || applicationoperation.IsTransient()) return;
            if (applicationoperation.Permissions.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationoperation.Permissions elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationOperation";
                cs.Data["PropertyName"] = "Permissions";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation>(applicationoperation, isCascaded);
        }
        public void DeleteApplicationPermission(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission applicationpermission, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationpermission == null || applicationpermission.IsTransient()) return;
            if (applicationpermission.Roles.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Roles elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Roles";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (applicationpermission.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationpermission.Operations)
            {
                applicationpermission.RemoveOperations(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(applicationpermission, isCascaded);
        }
        public void DeleteApplicationRole(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole applicationrole, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationrole == null || applicationrole.IsTransient()) return;
            if (applicationrole.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationrole.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationRole";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationrole.Permissions)
            {
                applicationrole.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(applicationrole, isCascaded);
        }
        public void DeleteApplicationSetting(zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting applicationsetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationsetting == null || applicationsetting.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting>(applicationsetting, isCascaded);
        }
        public void DeleteApplicationTheme(zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme applicationtheme, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationtheme == null || applicationtheme.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme>(applicationtheme, isCascaded);
        }
        public void DeleteApplicationUser(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser applicationuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuser == null || applicationuser.IsTransient()) return;
            foreach (var toDelete in applicationuser.Clients)
            {
                applicationuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Logins)
            {
                applicationuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Claims)
            {
                applicationuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in applicationuser.Permissions)
            {
                applicationuser.RemovePermissions(toDissasociate);
            }
            if (applicationuser.Profile != null)
            {
                var toDelete = applicationuser.Profile;
                applicationuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, applicationuser);
            }
            foreach (var toDissasociate in applicationuser.Roles)
            {
                applicationuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(applicationuser, isCascaded);
        }
        public void DeleteApplicationUserAction(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction applicationuseraction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuseraction == null || applicationuseraction.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction>(applicationuseraction, isCascaded);
        }
        public void DeleteApplicationUserClaim(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim applicationuserclaim, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserclaim == null || applicationuserclaim.IsTransient()) return;
            applicationuserclaim.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim>(applicationuserclaim, isCascaded);
        }
        public void DeleteApplicationUserExternalProfile(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile applicationuserexternalprofile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserexternalprofile == null || applicationuserexternalprofile.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile>(applicationuserexternalprofile, isCascaded);
        }
        public void DeleteApplicationUserLogin(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin applicationuserlogin, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserlogin == null || applicationuserlogin.IsTransient()) return;
            applicationuserlogin.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin>(applicationuserlogin, isCascaded);
        }
        public void DeleteAppNotification(DSS1_RetailerDriverStockOptimisation.BO.AppNotification appnotification, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(appnotification == null || appnotification.IsTransient()) return;
            foreach (var toDissasociate in appnotification.AppNotificationActions)
            {
                appnotification.RemoveAppNotificationActions(toDissasociate);
            }
            appnotification.Recipient = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(appnotification, isCascaded);
        }
        public void DeleteAppNotificationAction(DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction appnotificationaction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(appnotificationaction == null || appnotificationaction.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(ap=> ap.AppNotificationActions.Contains(appnotificationaction)))
            {
                toDissasociate.RemoveAppNotificationActions(appnotificationaction);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction>(appnotificationaction, isCascaded);
        }
        public void DeleteAuditEntityConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration auditentityconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditentityconfiguration == null || auditentityconfiguration.IsTransient()) return;
            foreach (var toDelete in auditentityconfiguration.Properties)
            {
                auditentityconfiguration.RemoveProperties(toDelete);
                DeleteAuditPropertyConfiguration(toDelete, false, isCascaded);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration>(auditentityconfiguration, isCascaded);
        }
        public void DeleteAuditLogEntry(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry auditlogentry, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentry == null || auditlogentry.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry>(auditlogentry, isCascaded);
        }
        public void DeleteAuditLogEntryType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType auditlogentrytype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentrytype == null || auditlogentrytype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType>(auditlogentrytype, isCascaded);
        }
        public void DeleteAuditLogPropertyActionType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType auditlogpropertyactiontype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogpropertyactiontype == null || auditlogpropertyactiontype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType>(auditlogpropertyactiontype, isCascaded);
        }
        public void DeleteAuditPropertyConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration auditpropertyconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditpropertyconfiguration == null || auditpropertyconfiguration.IsTransient()) return;
            auditpropertyconfiguration.Entity = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration>(auditpropertyconfiguration, isCascaded);
        }
        public void DeleteBaseUnit(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit baseunit, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(baseunit == null || baseunit.IsTransient()) return;
            baseunit.SubCategory = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(ap=> ap.BaseUnit == baseunit))
            {
                toDissasociate.BaseUnit = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(baseunit, isCascaded);
        }
        public void DeleteBusinessUnit(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit businessunit, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(businessunit == null || businessunit.IsTransient()) return;
            businessunit.Supplier = null;
            foreach (var toDissasociate in businessunit.Categories)
            {
                businessunit.RemoveCategories(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(ap=> ap.BusinessUnit == businessunit))
            {
                toDissasociate.BusinessUnit = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(businessunit, isCascaded);
        }
        public void DeleteCategory(DSS1_RetailerDriverStockOptimisation.BO.Category category, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(category == null || category.IsTransient()) return;
            category.BusinessUnit = null;
            foreach (var toDissasociate in category.SubCategory)
            {
                category.RemoveSubCategory(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(ap=> ap.Category == category))
            {
                toDissasociate.Category = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Category>(category, isCascaded);
        }
        public void DeleteComment(DSS1_RetailerDriverStockOptimisation.BO.Comment comment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(comment == null || comment.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ap=> ap.Comments.Contains(comment)))
            {
                toDissasociate.RemoveComments(comment);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Comment>(comment, isCascaded);
        }
        public void DeleteCompany(DSS1_RetailerDriverStockOptimisation.BO.Company company, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(company == null || company.IsTransient()) return;
            foreach (var toDissasociate in company.Contacts)
            {
                company.RemoveContacts(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Company>(company, isCascaded);
        }
        public void DeleteContact(DSS1_RetailerDriverStockOptimisation.BO.Contact contact, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(contact == null || contact.IsTransient()) return;
            foreach (var toDelete in contact.Clients)
            {
                contact.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in contact.Logins)
            {
                contact.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(ap=> ap.Recipient == contact))
            {
                toDissasociate.Recipient = null;
            }
            contact.Company = null;
            foreach (var toDelete in contact.Claims)
            {
                contact.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            if (contact.Profile != null)
            {
                var toDelete = contact.Profile;
                contact.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, contact);
            }
            foreach (var toDissasociate in contact.Roles)
            {
                contact.RemoveRoles(toDissasociate);
            }
            foreach (var toDissasociate in contact.Permissions)
            {
                contact.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Contact>(contact, isCascaded);
        }
        public void DeleteDashboard(DSS1_RetailerDriverStockOptimisation.BO.Dashboard dashboard, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(dashboard == null || dashboard.IsTransient()) return;
            foreach (var toDissasociate in dashboard.Statistics)
            {
                dashboard.RemoveStatistics(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Dashboard>(dashboard, isCascaded);
        }
        public void DeleteDateTimeFormat(zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat datetimeformat, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(datetimeformat == null || datetimeformat.IsTransient()) return;
            datetimeformat.ApplicationLanguage = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat>(datetimeformat, isCascaded);
        }
        public void DeleteDeliveryPlan(DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan deliveryplan, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(deliveryplan == null || deliveryplan.IsTransient()) return;
            deliveryplan.Item = null;
            deliveryplan.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan>(deliveryplan, isCascaded);
        }
        public void DeleteDeliverySchedule(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule deliveryschedule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(deliveryschedule == null || deliveryschedule.IsTransient()) return;
            deliveryschedule.Item = null;
            deliveryschedule.Supplier = null;
            deliveryschedule.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(deliveryschedule, isCascaded);
        }
        public void DeleteFileData(DSS1_RetailerDriverStockOptimisation.BO.FileData filedata, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(filedata == null || filedata.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.FileData>(filedata, isCascaded);
        }
        public void DeleteInventoryItem(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem inventoryitem, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(inventoryitem == null || inventoryitem.IsTransient()) return;
            inventoryitem.Item = null;
            inventoryitem.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(inventoryitem, isCascaded);
        }
        public void DeleteItem(DSS1_RetailerDriverStockOptimisation.BO.Item item, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(item == null || item.IsTransient()) return;
            foreach (var toDissasociate in item.PastOrders)
            {
                item.RemovePastOrders(toDissasociate);
            }
            foreach (var toDissasociate in item.ItemsForecast)
            {
                item.RemoveItemsForecast(toDissasociate);
            }
            foreach (var toDissasociate in item.DeliverySchedules)
            {
                item.RemoveDeliverySchedules(toDissasociate);
            }
            foreach (var toDissasociate in item.SLALeadTimes)
            {
                item.RemoveSLALeadTimes(toDissasociate);
            }
            foreach (var toDissasociate in item.SupplierCapacities)
            {
                item.RemoveSupplierCapacities(toDissasociate);
            }
            foreach (var toDissasociate in item.SLADeliveries)
            {
                item.RemoveSLADeliveries(toDissasociate);
            }
            item.BusinessUnit = null;
            foreach (var toDissasociate in item.StocksOnHand)
            {
                item.RemoveStocksOnHand(toDissasociate);
            }
            item.SubCategory = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            item.MinimumQuantity = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.WasteOld>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            foreach (var toDissasociate in item.Agreements)
            {
                item.RemoveAgreements(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            item.Supplier = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            item.BaseUnit = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            foreach (var toDissasociate in item.InventoryItems)
            {
                item.RemoveInventoryItems(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Platform>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            foreach (var toDissasociate in item.Notifications)
            {
                item.RemoveNotifications(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            item.Category = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Stats>(ap=> ap.Item == item))
            {
                toDissasociate.Item = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Item>(item, isCascaded);
        }
        public void DeleteItemParameter(DSS1_RetailerDriverStockOptimisation.BO.ItemParameter itemparameter, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(itemparameter == null || itemparameter.IsTransient()) return;
            itemparameter.Item = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(ap=> ap.ItemParameters.Contains(itemparameter)))
            {
                toDissasociate.RemoveItemParameters(itemparameter);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>(itemparameter, isCascaded);
        }
        public void DeleteMinimumQuantity(DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity minimumquantity, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(minimumquantity == null || minimumquantity.IsTransient()) return;
            minimumquantity.Item = null;
            minimumquantity.Supplier = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>(minimumquantity, isCascaded);
        }
        public void DeleteNotification(DSS1_RetailerDriverStockOptimisation.BO.Notification notification, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(notification == null || notification.IsTransient()) return;
            notification.Warehouse = null;
            notification.Item = null;
            notification.OrderForecastDetails = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Notification>(notification, isCascaded);
        }
        public void DeleteOrderFDashboard(DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard orderfdashboard, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderfdashboard == null || orderfdashboard.IsTransient()) return;
            foreach (var toDissasociate in orderfdashboard.OrderForecastStatistics)
            {
                orderfdashboard.RemoveOrderForecastStatistics(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard>(orderfdashboard, isCascaded);
        }
        public void DeleteOrderForecast(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast orderforecast, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderforecast == null || orderforecast.IsTransient()) return;
            foreach (var toDissasociate in orderforecast.ItemParameters)
            {
                orderforecast.RemoveItemParameters(toDissasociate);
            }
            foreach (var toDelete in orderforecast.OrderForecastDetails)
            {
                orderforecast.RemoveOrderForecastDetails(toDelete);
                DeleteOrderForecastDetails(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in orderforecast.SupplierParameters)
            {
                orderforecast.RemoveSupplierParameters(toDissasociate);
            }
            orderforecast.SalesForecast = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(orderforecast, isCascaded);
        }
        public void DeleteOrderForecastDetails(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails orderforecastdetails, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderforecastdetails == null || orderforecastdetails.IsTransient()) return;
            orderforecastdetails.OrderForecast = null;
            orderforecastdetails.Warehouse = null;
            if (orderforecastdetails.Notification != null)
            {
                var toDelete = orderforecastdetails.Notification;
                orderforecastdetails.Notification.OrderForecastDetails = null;
                orderforecastdetails.Notification = null;
                DeleteNotification(toDelete, false, isCascaded, orderforecastdetails);
            }
            orderforecastdetails.Item = null;
            foreach (var toDissasociate in orderforecastdetails.Comments)
            {
                orderforecastdetails.RemoveComments(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(orderforecastdetails, isCascaded);
        }
        public void DeleteOrderForecastStatistic(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic orderforecaststatistic, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderforecaststatistic == null || orderforecaststatistic.IsTransient()) return;
            orderforecaststatistic.Warehouse = null;
            orderforecaststatistic.Item = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard>(ap=> ap.OrderForecastStatistics.Contains(orderforecaststatistic)))
            {
                toDissasociate.RemoveOrderForecastStatistics(orderforecaststatistic);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(orderforecaststatistic, isCascaded);
        }
        public void DeletePastOrder(DSS1_RetailerDriverStockOptimisation.BO.PastOrder pastorder, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(pastorder == null || pastorder.IsTransient()) return;
            pastorder.Item = null;
            pastorder.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(pastorder, isCascaded);
        }
        public void DeletePastSales(DSS1_RetailerDriverStockOptimisation.BO.PastSales pastsales, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(pastsales == null || pastsales.IsTransient()) return;
            pastsales.Item = null;
            pastsales.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.PastSales>(pastsales, isCascaded);
        }
        public void DeletePlatform(DSS1_RetailerDriverStockOptimisation.BO.Platform platform, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(platform == null || platform.IsTransient()) return;
            platform.Item = null;
            platform.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Platform>(platform, isCascaded);
        }
        public void DeleteProfile(zAppDev.DotNet.Framework.Identity.Model.Profile profile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profile == null || profile.IsTransient()) return;
            foreach (var toDelete in profile.Settings)
            {
                profile.RemoveSettings(toDelete);
                DeleteProfileSetting(toDelete, false, isCascaded);
            }
            var _ApplicationUserApplicationUserProfilecount = this.Get<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(ap=> ap.Profile == profile).Count;
            if (
                (calledBy != null)
                &&
                (
                    (calledBy.GetType() == typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser) || calledBy.GetType().FullName == "ApplicationUserProxy")  ||
                    (calledBy.GetType() == typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact) || calledBy.GetType().FullName == "ContactProxy")
                )
            ) _ApplicationUserApplicationUserProfilecount--;
            if (_ApplicationUserApplicationUserProfilecount > 0)
            {
                var cs = new System.Data.ConstraintException("At least one ApplicationUser exists so Profile cannot be deleted");
                cs.Data["Entity"] = "ApplicationUser";
                cs.Data["PropertyName"] = "Profile";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.Profile>(profile, isCascaded);
        }
        public void DeleteProfileSetting(zAppDev.DotNet.Framework.Identity.Model.ProfileSetting profilesetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profilesetting == null || profilesetting.IsTransient()) return;
            profilesetting.ParentProfile = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ProfileSetting>(profilesetting, isCascaded);
        }
        public void DeleteResponse(DSS1_RetailerDriverStockOptimisation.BO.Response response, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(response == null || response.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Response>(response, isCascaded);
        }
        public void DeleteRetailer(DSS1_RetailerDriverStockOptimisation.BO.Retailer retailer, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(retailer == null || retailer.IsTransient()) return;
            foreach (var toDissasociate in retailer.Contacts)
            {
                retailer.RemoveContacts(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Retailer>(retailer, isCascaded);
        }
        public void DeleteSales(DSS1_RetailerDriverStockOptimisation.BO.Sales sales, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(sales == null || sales.IsTransient()) return;
            sales.Item = null;
            sales.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Sales>(sales, isCascaded);
        }
        public void DeleteSalesForecast(DSS1_RetailerDriverStockOptimisation.BO.SalesForecast salesforecast, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(salesforecast == null || salesforecast.IsTransient()) return;
            if (salesforecast.OrderForecasts.Count > 0)
            {
                var cs = new System.Data.ConstraintException("salesforecast.OrderForecasts elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "SalesForecast";
                cs.Data["PropertyName"] = "OrderForecasts";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDelete in salesforecast.SalesForecastDetails)
            {
                salesforecast.RemoveSalesForecastDetails(toDelete);
                DeleteSalesForecastDetails(toDelete, false, isCascaded);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(salesforecast, isCascaded);
        }
        public void DeleteSalesForecastDetails(DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails salesforecastdetails, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(salesforecastdetails == null || salesforecastdetails.IsTransient()) return;
            salesforecastdetails.Item = null;
            salesforecastdetails.SalesForecast = null;
            salesforecastdetails.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>(salesforecastdetails, isCascaded);
        }
        public void DeleteSLADelivery(DSS1_RetailerDriverStockOptimisation.BO.SLADelivery sladelivery, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(sladelivery == null || sladelivery.IsTransient()) return;
            sladelivery.Item = null;
            sladelivery.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(sladelivery, isCascaded);
        }
        public void DeleteSLALeadTime(DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime slaleadtime, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(slaleadtime == null || slaleadtime.IsTransient()) return;
            slaleadtime.Item = null;
            slaleadtime.Warehouse = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(slaleadtime, isCascaded);
        }
        public void DeleteSLAStatistics(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics slastatistics, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(slastatistics == null || slastatistics.IsTransient()) return;
            slastatistics.Item = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(slastatistics, isCascaded);
        }
        public void DeleteStatistics(DSS1_RetailerDriverStockOptimisation.BO.Statistics statistics, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(statistics == null || statistics.IsTransient()) return;
            statistics.Item = null;
            statistics.Supplier = null;
            statistics.Warehouse = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Dashboard>(ap=> ap.Statistics.Contains(statistics)))
            {
                toDissasociate.RemoveStatistics(statistics);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(statistics, isCascaded);
        }
        public void DeleteStats(DSS1_RetailerDriverStockOptimisation.BO.Stats stats, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(stats == null || stats.IsTransient()) return;
            stats.Warehouse = null;
            stats.Item = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Stats>(stats, isCascaded);
        }
        public void DeleteStockOnHand(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand stockonhand, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(stockonhand == null || stockonhand.IsTransient()) return;
            stockonhand.Warehouse = null;
            stockonhand.Agreement = null;
            stockonhand.Item = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(stockonhand, isCascaded);
        }
        public void DeleteStore(DSS1_RetailerDriverStockOptimisation.BO.Store store, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(store == null || store.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Store>(store, isCascaded);
        }
        public void DeleteSubCategory(DSS1_RetailerDriverStockOptimisation.BO.SubCategory subcategory, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(subcategory == null || subcategory.IsTransient()) return;
            foreach (var toDissasociate in subcategory.BaseUnits)
            {
                subcategory.RemoveBaseUnits(toDissasociate);
            }
            subcategory.Category = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(ap=> ap.SubCategory == subcategory))
            {
                toDissasociate.SubCategory = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(subcategory, isCascaded);
        }
        public void DeleteSupplier(DSS1_RetailerDriverStockOptimisation.BO.Supplier supplier, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplier == null || supplier.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in supplier.Contacts)
            {
                supplier.RemoveContacts(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            supplier.BusinessUnit = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(supplier, isCascaded);
        }
        public void DeleteSupplierCapacity(DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity suppliercapacity, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(suppliercapacity == null || suppliercapacity.IsTransient()) return;
            suppliercapacity.Item = null;
            suppliercapacity.Supplier = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(suppliercapacity, isCascaded);
        }
        public void DeleteSupplierParameter(DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter supplierparameter, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierparameter == null || supplierparameter.IsTransient()) return;
            supplierparameter.OrderForecast = null;
            supplierparameter.Agreement = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(supplierparameter, isCascaded);
        }
        public void DeleteTransportUnCap(DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap transportuncap, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(transportuncap == null || transportuncap.IsTransient()) return;
            transportuncap.Warehouse = null;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(ap=> ap.TransportUnCaps.Contains(transportuncap)))
            {
                toDissasociate.RemoveTransportUnCaps(transportuncap);
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>(transportuncap, isCascaded);
        }
        public void DeleteUnitsKPI(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI unitskpi, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(unitskpi == null || unitskpi.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(unitskpi, isCascaded);
        }
        public void DeleteWarehouse(DSS1_RetailerDriverStockOptimisation.BO.Warehouse warehouse, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(warehouse == null || warehouse.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in warehouse.PastOrders)
            {
                warehouse.RemovePastOrders(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Sales>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Platform>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Stats>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(ap=> ap.Warehouses.Contains(warehouse)))
            {
                toDissasociate.RemoveWarehouses(warehouse);
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.Notification>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            foreach (var toDissasociate in this.Get<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>(ap=> ap.Warehouse == warehouse))
            {
                toDissasociate.Warehouse = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(warehouse, isCascaded);
        }
        public void DeleteWasteOld(DSS1_RetailerDriverStockOptimisation.BO.WasteOld wasteold, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(wasteold == null || wasteold.IsTransient()) return;
            wasteold.Item = null;
            if (!doNotCallDeleteForThis) Delete<DSS1_RetailerDriverStockOptimisation.BO.WasteOld>(wasteold, isCascaded);
        }
        public void DeleteWorkflowContextBase(zAppDev.DotNet.Framework.Workflow.WorkflowContextBase workflowcontextbase, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowcontextbase == null || workflowcontextbase.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowContextBase>(workflowcontextbase, isCascaded);
        }
        public void DeleteWorkflowSchedule(zAppDev.DotNet.Framework.Workflow.WorkflowSchedule workflowschedule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowschedule == null || workflowschedule.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowSchedule>(workflowschedule, isCascaded);
        }


        #endregion

        #region Generic Data Retrieval
        public T GetById<T>(object id, bool throwIfNotFound = true) where T : class
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var obj = _currentSession.Get<T>(id);

            if(throwIfNotFound && obj == null)
            {
                throw new ApplicationException($"No {typeof(T).Name} was found with key: {id}.");
            }

            if (!CanReadInstance(obj))
            {
                if (throwIfNotFound)
                {
                    throw new ApplicationException($"No Read Access for {typeof(T).Name} instance with key: {id}.");
                }
                else
                {
                    obj = null;
                }
            }

            RestoreLastAction();
            return obj;
        }

        public void SaveWithoutTransaction<T>(T entity) where T : class
        {
            try
            {
                _currentSession.SaveOrUpdate(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch(StaleObjectStateException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                _currentSession.Merge(entity);
            }
        }

        public void Save<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.SAVE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof (T).Name + " was specified.");
            }

            SaveWithoutTransaction(entity);
            RestoreLastAction();
        }

        public void Insert<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.INSERT);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            try
            {
                _currentSession.Save(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                _currentSession.Merge(entity);
            }

            RestoreLastAction();
        }

        public void Update<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.UPDATE);
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }
            _currentSession.Update(entity);
            RestoreLastAction();
        }

        public void Delete<T>(T entity, bool isCascaded = false) where T : class
        {
            SetCurrentActionTo(RepositoryAction.DELETE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            // var exists = GetMainQuery<T>().WithOptions(options => options.SetCacheable(true)).Any(a => a == entity);
            // if (!exists)
            // {
            //    RestoreLastAction();
            //    return;
            // }

            try
            {
                _currentSession.Delete(entity);
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof (T));
                log.Error("Error deleting", e);
                throw;
            }

            RestoreLastAction();
        }

        public T Merge<T>(T entity) where T : class
        {
            return new ObjectGraphWalker().AssociateGraphWithSession(entity, MiniSessionManager.Instance);
        }

        public List<double> GeAggregates<T>(Expression<Func<T, bool>> predicate,
                                            Dictionary<Expression<Func<T, double>>, string> requestedAggregates)
        {
            var mainQuery = GetMainQuery<T>();
            List<double> aggregateValues = new List<double>();
            if (predicate == null)
            {
                predicate = a => true;
            }
            foreach (var entry in requestedAggregates)
            {
                try
                {
                    switch (entry.Value)
                    {
                    case "SUM":
                        aggregateValues.Add(mainQuery.Where(predicate).Sum(entry.Key));
                        break;
                    case "AVERAGE":
                        aggregateValues.Add(mainQuery.Where(predicate).Average(entry.Key));
                        break;
                    case "COUNT":
                        aggregateValues.Add(mainQuery.Where(predicate).Count());
                        break;
                    }
                }
                catch
                {
                    aggregateValues.Add(0);
                }
            }
            return aggregateValues;
        }

        private static IFutureValue<TResult> ToFutureValue<TSource, TResult>(IQueryable source, Expression<Func<IQueryable<TSource>, TResult>> selector)
        where TResult : struct
        {
            var provider = (DefaultQueryProvider)source.Provider;
            var method = ((MethodCallExpression)selector.Body).Method;
            var expression = Expression.Call(null, method, source.Expression);
            return provider.ExecuteFutureValue<TResult>(expression);
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate,
                              int startRowIndex,
                              int pageSize,
                              Dictionary<Expression<Func<T, object>>, bool> orderBy,
                              out int totalRecords, bool cacheQuery = true)
        {
            if (orderBy == null)
            {
                orderBy = new Dictionary<Expression<Func<T, object>>, bool>();
            }
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    totalRecords = 0;
                    return new List<T>();
                }
            }
            var objects = GetMainQuery<T>();
            if (cacheQuery)
            {
                objects = objects.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = predicate == null
                              ? ToFutureValue<T, int>(objects, x => x.Count())
                              : ToFutureValue<T, int>(objects.Where(predicate), x => x.Count());
            var ordered = (IOrderedQueryable<T>)((predicate == null)
                                                 ? objects
                                                 : objects.Where(predicate));
            if (orderBy.Keys.Count > 0)
            {
                var first = orderBy.First();
                ordered = first.Value
                          ? ordered.OrderBy(first.Key)
                          : ordered.OrderByDescending(first.Key);
                foreach (var pair in orderBy.Skip(1))
                {
                    ordered = pair.Value
                              ? ordered.ThenBy(pair.Key)
                              : ordered.ThenByDescending(pair.Key);
                }
            }
            var paged = ordered.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            return paged;
        }

        public IQueryable<T> GetAsQueryable<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    // If the predicate returns false then return empty resultset
                    RestoreLastAction();
                    return Enumerable.Empty<T>().AsQueryable();
                }
            }
            var query = GetMainQuery<T>();
            if (predicate != null)
            {
                query = query.Where(predicate);
            }
            if (cacheQuery)
            {
                query = query.WithOptions(options => options.SetCacheable(true));
            }
            RestoreLastAction();
            return query;
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate, bool cacheQuery = true)
        {
            var list = GetAsQueryable(predicate, cacheQuery).ToList();
            list = AppendPendingInsertions(predicate, list);
            list = RemovePendingDeletions(predicate, list);
            return list;
        }

        public int? GetCount<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            return GetAsQueryable(predicate, cacheQuery).Count()
                   + GetItemsToAppend(predicate).Count()
                   - GetItemsToRemove(predicate).Count();
        }

        public List<T> GetAll<T>(bool cacheQuery = true)
        {
            return Get<T>(null, cacheQuery);
        }

        public List<T> GetAll<T>(int startRowIndex, int pageSize, out int totalRecords, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var items = GetMainQuery<T>();
            if (cacheQuery)
            {
                items = items.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = ToFutureValue<T, int>(items, x => x.Count());
            var paged = items.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            RestoreLastAction();
            return paged;
        }

        public IQueryable<T> GetMainQuery<T>()
        {
            return ApplyReadFilter(_currentSession.Query<T>());
        }

        #endregion

        #region Helper Methods
        private static readonly FieldInfo _insertionsFieldInfo = typeof(ActionQueue).GetField("insertions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> AppendPendingInsertions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToAppend = GetItemsToAppend(predicate);
            var items = itemsToAppend.ToList();
            if (!items.Any()) return list;
            if (!items.Any())
            {
                list = items;
            }
            if (list.Count > items.Count)
            {
                list.AddRange(items);
            }
            else
            {
                items.AddRange(list);
                list = items;
            }
            return list;
        }

        private static readonly FieldInfo _deletionsFieldInfo = typeof(ActionQueue).GetField("deletions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> RemovePendingDeletions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (list.Count == 0)
            {
                return list;
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToRemove = GetItemsToRemove(predicate);
            foreach (var item in itemsToRemove)
            {
                if (list.Contains(item))
                {
                    list.Remove(item);
                }
            }
            return list;
        }

        private IQueryable<T> GetItemsToAppend<T>(Expression<Func<T, bool>> predicate)
        {
            if (_insertionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `insertions` field in NH Session's Action Queue!");
            }
            var insertions = (List<AbstractEntityInsertAction>)_insertionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue);
            var itemsToAppend
                = insertions
                  .Cast<EntityInsertAction>()
                  .Where(a => a.EntityName == typeof(T).FullName)
                  .Select(a => (T)a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToAppend = itemsToAppend.Where(predicate);
            }
            return itemsToAppend;
        }

        private IQueryable<T> GetItemsToRemove<T>(Expression<Func<T, bool>> predicate)
        {
            if (_deletionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `deletions` field in NH Session's Action Queue!");
            }
            var deletions = (List<EntityDeleteAction>) _deletionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl) _currentSession).ActionQueue);
            var itemsToRemove
                = deletions
                  .Where(a => a.EntityName == typeof (T).FullName)
                  .Select(a => (T) a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToRemove = itemsToRemove.Where(predicate);
            }
            return itemsToRemove;
        }

        public void Evict(object obj)
        {
            _currentSession.Evict(obj);
        }

        private IQueryable<T> ApplyReadFilter<T>(IQueryable<T> query)
        {
            return query;
        }


        private bool CanReadInstance<T>(T instance)
        {
            if (instance == null) return true;
            var tmpList = new List<T> { instance };
            tmpList = ApplyReadFilter(tmpList.AsQueryable()).ToList();
            return tmpList.Any();
        }

        #endregion
    }
}