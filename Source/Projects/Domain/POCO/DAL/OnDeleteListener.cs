// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using Iesi.Collections;
using log4net;
using NHibernate.Event;
using NHibernate.Util;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using DSS1_RetailerDriverStockOptimisation.BO;

namespace DSS1_RetailerDriverStockOptimisation.DAL
{
    public class OnDeleteListener : IDeleteEventListener
    {
        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event), cancellationToken);
        }

        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, ISet<object> transientEntities, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event, transientEntities), cancellationToken);
        }

        public void OnDelete(DeleteEvent @event)
        {
            OnDelete(@event, new IdentitySet());
        }

        public void OnDelete(DeleteEvent @event, ISet<object> transientEntities)
        {
            var entity = @event.Entity;
            System.Type entityType = entity.GetType();
            if (entityType.AssemblyQualifiedName.IndexOf("ProxyAssembly", StringComparison.OrdinalIgnoreCase) > -1)
            {
                entityType = entityType.BaseType;
            }
            try
            {
                switch (entity.GetType().FullName)
                {
                case "DSS1_RetailerDriverStockOptimisation.BO.Agreement":
                    (new Repository()).DeleteAgreement((DSS1_RetailerDriverStockOptimisation.BO.Agreement)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus":
                    (new Repository()).DeleteAgreementStatus((DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Response":
                    (new Repository()).DeleteResponse((DSS1_RetailerDriverStockOptimisation.BO.Response)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.AppNotification":
                    (new Repository()).DeleteAppNotification((DSS1_RetailerDriverStockOptimisation.BO.AppNotification)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction":
                    (new Repository()).DeleteAppNotificationAction((DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Company":
                    (new Repository()).DeleteCompany((DSS1_RetailerDriverStockOptimisation.BO.Company)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Contact":
                    (new Repository()).DeleteContact((DSS1_RetailerDriverStockOptimisation.BO.Contact)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Dashboard":
                    (new Repository()).DeleteDashboard((DSS1_RetailerDriverStockOptimisation.BO.Dashboard)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Statistics":
                    (new Repository()).DeleteStatistics((DSS1_RetailerDriverStockOptimisation.BO.Statistics)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule":
                    (new Repository()).DeleteDeliverySchedule((DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Category":
                    (new Repository()).DeleteCategory((DSS1_RetailerDriverStockOptimisation.BO.Category)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SubCategory":
                    (new Repository()).DeleteSubCategory((DSS1_RetailerDriverStockOptimisation.BO.SubCategory)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit":
                    (new Repository()).DeleteBusinessUnit((DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.BaseUnit":
                    (new Repository()).DeleteBaseUnit((DSS1_RetailerDriverStockOptimisation.BO.BaseUnit)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.InventoryItem":
                    (new Repository()).DeleteInventoryItem((DSS1_RetailerDriverStockOptimisation.BO.InventoryItem)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Item":
                    (new Repository()).DeleteItem((DSS1_RetailerDriverStockOptimisation.BO.Item)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity":
                    (new Repository()).DeleteSupplierCapacity((DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.WasteOld":
                    (new Repository()).DeleteWasteOld((DSS1_RetailerDriverStockOptimisation.BO.WasteOld)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity":
                    (new Repository()).DeleteMinimumQuantity((DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Notification":
                    (new Repository()).DeleteNotification((DSS1_RetailerDriverStockOptimisation.BO.Notification)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard":
                    (new Repository()).DeleteOrderFDashboard((DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic":
                    (new Repository()).DeleteOrderForecastStatistic((DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails":
                    (new Repository()).DeleteOrderForecastDetails((DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.OrderForecast":
                    (new Repository()).DeleteOrderForecast((DSS1_RetailerDriverStockOptimisation.BO.OrderForecast)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.ItemParameter":
                    (new Repository()).DeleteItemParameter((DSS1_RetailerDriverStockOptimisation.BO.ItemParameter)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter":
                    (new Repository()).DeleteSupplierParameter((DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Comment":
                    (new Repository()).DeleteComment((DSS1_RetailerDriverStockOptimisation.BO.Comment)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.PastOrder":
                    (new Repository()).DeletePastOrder((DSS1_RetailerDriverStockOptimisation.BO.PastOrder)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Retailer":
                    (new Repository()).DeleteRetailer((DSS1_RetailerDriverStockOptimisation.BO.Retailer)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Sales":
                    (new Repository()).DeleteSales((DSS1_RetailerDriverStockOptimisation.BO.Sales)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.PastSales":
                    (new Repository()).DeletePastSales((DSS1_RetailerDriverStockOptimisation.BO.PastSales)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan":
                    (new Repository()).DeleteDeliveryPlan((DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails":
                    (new Repository()).DeleteSalesForecastDetails((DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SalesForecast":
                    (new Repository()).DeleteSalesForecast((DSS1_RetailerDriverStockOptimisation.BO.SalesForecast)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime":
                    (new Repository()).DeleteSLALeadTime((DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SLADelivery":
                    (new Repository()).DeleteSLADelivery((DSS1_RetailerDriverStockOptimisation.BO.SLADelivery)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Platform":
                    (new Repository()).DeletePlatform((DSS1_RetailerDriverStockOptimisation.BO.Platform)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics":
                    (new Repository()).DeleteSLAStatistics((DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI":
                    (new Repository()).DeleteUnitsKPI((DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Stats":
                    (new Repository()).DeleteStats((DSS1_RetailerDriverStockOptimisation.BO.Stats)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.StockOnHand":
                    (new Repository()).DeleteStockOnHand((DSS1_RetailerDriverStockOptimisation.BO.StockOnHand)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Store":
                    (new Repository()).DeleteStore((DSS1_RetailerDriverStockOptimisation.BO.Store)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Supplier":
                    (new Repository()).DeleteSupplier((DSS1_RetailerDriverStockOptimisation.BO.Supplier)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap":
                    (new Repository()).DeleteTransportUnCap((DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.Warehouse":
                    (new Repository()).DeleteWarehouse((DSS1_RetailerDriverStockOptimisation.BO.Warehouse)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction":
                    (new Repository()).DeleteApplicationUserAction((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile":
                    (new Repository()).DeleteApplicationUserExternalProfile((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting":
                    (new Repository()).DeleteApplicationSetting((zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser":
                    (new Repository()).DeleteApplicationUser((zAppDev.DotNet.Framework.Identity.Model.ApplicationUser)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole":
                    (new Repository()).DeleteApplicationRole((zAppDev.DotNet.Framework.Identity.Model.ApplicationRole)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation":
                    (new Repository()).DeleteApplicationOperation((zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission":
                    (new Repository()).DeleteApplicationPermission((zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient":
                    (new Repository()).DeleteApplicationClient((zAppDev.DotNet.Framework.Identity.Model.ApplicationClient)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin":
                    (new Repository()).DeleteApplicationUserLogin((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim":
                    (new Repository()).DeleteApplicationUserClaim((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting":
                    (new Repository()).DeleteProfileSetting((zAppDev.DotNet.Framework.Identity.Model.ProfileSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.Profile":
                    (new Repository()).DeleteProfile((zAppDev.DotNet.Framework.Identity.Model.Profile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage":
                    (new Repository()).DeleteApplicationLanguage((zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat":
                    (new Repository()).DeleteDateTimeFormat((zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme":
                    (new Repository()).DeleteApplicationTheme((zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme)entity, true, true, null);
                    break;
                case "DSS1_RetailerDriverStockOptimisation.BO.FileData":
                    (new Repository()).DeleteFileData((DSS1_RetailerDriverStockOptimisation.BO.FileData)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration":
                    (new Repository()).DeleteAuditEntityConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration":
                    (new Repository()).DeleteAuditPropertyConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry":
                    (new Repository()).DeleteAuditLogEntry((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType":
                    (new Repository()).DeleteAuditLogEntryType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType":
                    (new Repository()).DeleteAuditLogPropertyActionType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase":
                    (new Repository()).DeleteWorkflowContextBase((zAppDev.DotNet.Framework.Workflow.WorkflowContextBase)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule":
                    (new Repository()).DeleteWorkflowSchedule((zAppDev.DotNet.Framework.Workflow.WorkflowSchedule)entity, true, true, null);
                    break;
                }
            }
            catch (Exception e)
            {
                (LogManager.GetLogger(this.GetType())).Error("Error deleting: " + entityType.FullName, e);
                throw;
            }
        }
    }
}
