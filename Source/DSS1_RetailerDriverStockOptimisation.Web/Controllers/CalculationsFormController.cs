// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.CalculationsForm
{

    [RoutePrefix("CalculationsForm")]
    public class CalculationsFormController : ControllerBase<CalculationsFormViewModel, CalculationsFormViewModelDTO>
    {

        /*<Form:CalculationsForm:0/>*/
        public CalculationsFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(CalculationsFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(CalculationsFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(CalculationsFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("CalculationsForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "CalculationsForm");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "CalculationsForm");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "CalculationsForm");
        }



        #region Controller Actions
        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateOrderDate", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateOrderDate")]
        public ActionResult CalculateOrderDate()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateOrderDate();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CreateNotifications", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CreateNotifications")]
        public ActionResult CreateNotifications()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCreateNotifications();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcReplenishmentCycle", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcReplenishmentCycle")]
        public ActionResult CalcReplenishmentCycle()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcReplenishmentCycle();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcQuantity", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcQuantity")]
        public ActionResult CalcQuantity()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcQuantity();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new CalculationsFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CalculationsForm"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new CalculationsFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CalculationsForm"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RandomDates", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RandomDates")]
        public ActionResult RandomDates()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteRandomDates();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSupplierCapacities", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSupplierCapacities")]
        public ActionResult AddSupplierCapacities()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSupplierCapacities();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="NewWastePerSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("NewWastePerSKU")]
        public ActionResult NewWastePerSKU()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteNewWastePerSKU();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SLADelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SLADelivery")]
        public ActionResult SLADelivery()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSLADelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SLALeadTime", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SLALeadTime")]
        public ActionResult SLALeadTime()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSLALeadTime();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="platform", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("platform")]
        public ActionResult platform()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = Executeplatform();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateAvg", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateAvg")]
        public ActionResult CalculateAvg()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateAvg();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateSLADelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateSLADelivery")]
        public ActionResult CalculateSLADelivery()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateSLADelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateSLALeadTime", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateSLALeadTime")]
        public ActionResult CalculateSLALeadTime()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateSLALeadTime();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcDifferentDays", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcDifferentDays")]
        public ActionResult CalcDifferentDays()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcDifferentDays();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CallDailyStock", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CallDailyStock")]
        public ActionResult CallDailyStock()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCallDailyStock();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateDailyStockUnits", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateDailyStockUnits")]
        public ActionResult CalculateDailyStockUnits()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateDailyStockUnits();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcAvgDailyDemandForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcAvgDailyDemandForecast")]
        public ActionResult CalcAvgDailyDemandForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcAvgDailyDemandForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateCurrentInvDays", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateCurrentInvDays")]
        public ActionResult CalculateCurrentInvDays()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateCurrentInvDays();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateMonthlySLADelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateMonthlySLADelivery")]
        public ActionResult CalculateMonthlySLADelivery()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateMonthlySLADelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateMonthlyLeadTime", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateMonthlyLeadTime")]
        public ActionResult CalculateMonthlyLeadTime()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateMonthlyLeadTime();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="FixSLAMonth", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("FixSLAMonth")]
        public ActionResult FixSLAMonth()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteFixSLAMonth();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SupplierWarehouses", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SupplierWarehouses")]
        public ActionResult SupplierWarehouses()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSupplierWarehouses();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AvailableStock", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AvailableStock")]
        public ActionResult AvailableStock()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAvailableStock();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="GetSupplierCapacities", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("GetSupplierCapacities")]
        public ActionResult GetSupplierCapacities()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteGetSupplierCapacities();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="TestingFullTruck", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("TestingFullTruck")]
        public ActionResult TestingFullTruck()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteTestingFullTruck();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ResetAllData", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ResetAllData")]
        public ActionResult ResetAllData()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteResetAllData();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="FillDeliveryScheduleNameDay", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("FillDeliveryScheduleNameDay")]
        public ActionResult FillDeliveryScheduleNameDay()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteFillDeliveryScheduleNameDay();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="FixDBWeekday", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("FixDBWeekday")]
        public ActionResult FixDBWeekday()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteFixDBWeekday();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="FixDatesTest", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("FixDatesTest")]
        public ActionResult FixDatesTest()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteFixDatesTest();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="CalculateOrderForecastAccuracy", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateOrderForecastAccuracy")]
        public ActionResult CalculateOrderForecastAccuracy()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteCalculateOrderForecastAccuracy();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:CalculateOrderDate:1/>*/
        public ActionResult ExecuteCalculateOrderDate()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast someSalesForecast = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>.GetSelectedItems(Get_List_DatasourceQueryable(null, false), @model.ListSelectedItems).FirstOrDefault();
            if ((someSalesForecast == null))
            {
                throw new Exception("Please select a Sales forecast from the list!");
            }
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast existingOrderForecast = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>((a) => a.SalesForecast.Id == someSalesForecast.Id)?.FirstOrDefault();
            if ((existingOrderForecast != null))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "lalalala Deleting existing order forecast");
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteOrderForecast(existingOrderForecast);
            }
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails> saleForecasts = someSalesForecast?.SalesForecastDetails?.OrderBy((a) => a.ForecastDate).ToList();
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails sale1 = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecasts, 0);
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails sale2 = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(saleForecasts, (saleForecasts?.Count() ?? 0) - 1);
            bool enableAnalyticDebug = false;
            bool allowSameStockDateWithStartDate4OrderProposalCalculation = true;
            DateTime? startDate4OrderProposalCalculation = (sale1?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
            DateTime? endDate4OrderProposalCalculation = (sale2?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast orderForecast = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            orderForecast.SalesForecast = someSalesForecast;
            orderForecast.CreatedBy = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            orderForecast.CreatedOn = DateTime.UtcNow;
            orderForecast.StartDate = startDate4OrderProposalCalculation;
            orderForecast.EndDate = endDate4OrderProposalCalculation;
            orderForecast.Status = "New";
            orderForecast.State = "New";
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Item> items = saleForecasts?.Select((a) => a.Item).ToList().Distinct().ToList();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> agreements = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Agreement>();
            foreach (var i in items ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.ItemParameter p = new DSS1_RetailerDriverStockOptimisation.BO.ItemParameter();
                p.Item = i;
                p.CoverageDays = (i?.CoverageDays ?? 0);
                orderForecast?.AddItemParameters(p);
            }
            foreach (var i in agreements ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Agreement>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter p = new DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter();
                p.Agreement = i;
                p.CoverageDays = (i?.TargetInventoryDays ?? 0);
                orderForecast?.AddSupplierParameters(p);
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(orderForecast);
            zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Flush();
            DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseOrderCalculationStarted((orderForecast?.Id ?? 0), zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Job was submitted for processing.");
            return _result;
        }
        /*<ControllerActionImplementation:CreateNotifications:1/>*/
        public ActionResult ExecuteCreateNotifications()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.NotificationExtensions.CreateNotificationsForAll();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Created Alerts.");
            return _result;
        }
        /*<ControllerActionImplementation:CalcReplenishmentCycle:1/>*/
        public ActionResult ExecuteCalcReplenishmentCycle()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.CalculateReplenishmentCycle();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Replenish done!");
            return _result;
        }
        /*<ControllerActionImplementation:CalcQuantity:1/>*/
        public ActionResult ExecuteCalcQuantity()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.GetQuantity();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "OK.", MessageType.Success, (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                          System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                          "/ItemOrderForecast/Render");
            return _result;
        }
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.AlertsLength = " alerts : " + (new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetCount<DSS1_RetailerDriverStockOptimisation.BO.Notification>()?.ToString() ?? "");
            return _result;
        }
        /*<ControllerActionImplementation:RandomDates:1/>*/
        public ActionResult ExecuteRandomDates()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<int?> numbers = new System.Collections.Generic.List<int?>();
            numbers.Add(- 1);
            numbers.Add(- 3);
            numbers.Add(- 5);
            numbers.Add(- 7);
            foreach (var orderProposal in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                double? a = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(numbers, (new Random(1)).Next(1, 4)));
                orderProposal.RecommendedOrderDate = (orderProposal?.SalesForecastDate?.AddDays((a).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(orderProposal);
            }
            return _result;
        }
        /*<ControllerActionImplementation:AddSupplierCapacities:1/>*/
        public ActionResult ExecuteAddSupplierCapacities()
        {
            ActionResult _result = null;
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>()?.Take(15).ToList() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> ords = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.Item.SKU == item.SKU);
                foreach (var supcup in item?.SupplierCapacities ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>())
                {
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteSupplierCapacity(supcup);
                }
                foreach (var ord in ords ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
                {
                    var _var0 = ord?.SalesForecastDate?.Date;
                    DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity cap = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>((a) => a.DateOfStockUpdate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var0 && a.Item.SKU == item.SKU)?.FirstOrDefault();
                    if ((cap != null))
                    {
                        continue;
                    }
                    cap = new DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity();
                    cap.DateOfStockUpdate = (ord?.SalesForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    cap.DailyProduction = (new Random((ord?.Id ?? 0) + (cap?.Id ?? 0))).Next(50, 500);
                    cap.Item = item;
                    cap.Stock = (new Random((ord?.Id ?? 0) + 100)).Next(800, 2000);
                    cap.Supplier =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(2);
                    item?.AddSupplierCapacities(cap);
                }
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.Item>(item);
            }
            return _result;
        }
        /*<ControllerActionImplementation:NewWastePerSKU:1/>*/
        public ActionResult ExecuteNewWastePerSKU()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.WasteOldExtensions.CreateWastePerSKU();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Success.");
            return _result;
        }
        /*<ControllerActionImplementation:SLADelivery:1/>*/
        public ActionResult ExecuteSLADelivery()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Success.");
            return _result;
        }
        /*<ControllerActionImplementation:SLALeadTime:1/>*/
        public ActionResult ExecuteSLALeadTime()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Success.");
            return _result;
        }
        /*<ControllerActionImplementation:platform:1/>*/
        public ActionResult Executeplatform()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Success.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateAvg:1/>*/
        public ActionResult ExecuteCalculateAvg()
        {
            ActionResult _result = null;
            decimal? averageDemand = 0;
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                if (((item?.PastOrders?.Count() ?? 0) > 0))
                {
                    if ((item?.PastOrders?.Sum((a) => a.QuantityReceived) == 0))
                    {
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Item's zero SUM " + (item?.SKU ?? "") + "date: ");
                    }
                    item.AvgDailyDemand = (decimal)(((item?.PastOrders?.Sum((a) => a.QuantityReceived) ?? 0) / (item?.PastOrders?.Count() ?? 0)));
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Item's avg daily demand: " + (item?.AvgDailyDemand ?? 0) + " for Item: " + (item?.SKU ?? ""));
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.Item>(item);
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finish");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateSLADelivery:1/>*/
        public ActionResult ExecuteCalculateSLADelivery()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery> deliveries = new System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>();
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                foreach (var pOrder in item?.PastOrders ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>())
                {
                    DSS1_RetailerDriverStockOptimisation.BO.SLADelivery delivery = new DSS1_RetailerDriverStockOptimisation.BO.SLADelivery();
                    delivery.OrderedQuantities = (decimal)((pOrder?.QuantityOrdered ?? 0));
                    delivery.DeliveredQuantities = (decimal)((pOrder?.QuantityReceived ?? 0));
                    delivery.Item = item;
                    if ((delivery?.OrderedQuantities ?? 0) > 0)
                    {
                        delivery.Percentage = Math.Abs(((delivery?.DeliveredQuantities ?? 0) / (delivery?.OrderedQuantities ?? 0))) * 100;
                    }
                    delivery.ItemDescription = (item?.Description?.Substring(0, 15) ?? "");
                    delivery.Threshold = 80;
                    delivery.SLADate = (pOrder?.WrittenDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    deliveries?.Add(delivery);
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(delivery);
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateSLALeadTime:1/>*/
        public ActionResult ExecuteCalculateSLALeadTime()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime> leadTimes = new System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>();
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                foreach (var pOrder in item?.PastOrders ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>())
                {
                    DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime leadTime = new DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime();
                    if (((pOrder?.ReceiveDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) > (pOrder?.NotBeforeDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)))
                    {
                        string test = ((pOrder?.ReceiveDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)- (pOrder?.NotBeforeDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)).TotalDays.ToString();
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "--> " + test);
                        leadTime.RealLeadTime = int.Parse(test);
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Order: " + (pOrder?.OrderNumber?.ToString() ?? "") + " in days: " + (leadTime?.RealLeadTime?.ToString() ?? ""));
                    }
                    else
                    {
                        leadTime.RealLeadTime = 1;
                    }
                    leadTime.SLALeadDate = (pOrder?.WrittenDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    leadTime.Item = item;
                    leadTime.AgreedLeadTime = 1;
                    leadTime.Threshold = 80;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(leadTime);
                    leadTimes?.Add(leadTime);
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalcDifferentDays:1/>*/
        public ActionResult ExecuteCalcDifferentDays()
        {
            ActionResult _result = null;
            foreach (var pOrder in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>())
            {
                if (((pOrder?.ReceiveDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)- (pOrder?.NotBeforeDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)).TotalDays > 0)
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "diff " + (pOrder?.Id?.ToString() ?? "") + "for Item " + (pOrder?.Item?.SKU ?? ""));
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CallDailyStock:1/>*/
        public ActionResult ExecuteCallDailyStock()
        {
            ActionResult _result = null;
            foreach (var saleF in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.StockOnHand dailyStock = new DSS1_RetailerDriverStockOptimisation.BO.StockOnHand();
                if ((new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>()?.Contains(saleF?.Item) ?? false))
                {
                    dailyStock.Item = saleF?.Item;
                    dailyStock.Warehouse = saleF?.Warehouse;
                    dailyStock.StockOnHandDate = (saleF?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    dailyStock.Units = DSS1_RetailerDriverStockOptimisation.BO.ItemExtensions.GetUnitsOfStock(dailyStock);
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, " stock for DATE: " + (saleF?.ForecastDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " and iTEM: " + (saleF?.Item?.SKU ?? ""));
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(dailyStock);
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateDailyStockUnits:1/>*/
        public ActionResult ExecuteCalculateDailyStockUnits()
        {
            ActionResult _result = null;
            foreach (var stock in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>((a) => a.Units == null) ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>())
            {
                var _var0 = (stock?.StockOnHandDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                DSS1_RetailerDriverStockOptimisation.BO.StockOnHand lastStock = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>((a) => a.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date < _var0)?.OrderByDescending((b) => b.StockOnHandDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date).FirstOrDefault();
                if ((lastStock == null))
                {
                    stock.Units = 0;
                    continue;
                }
                int? LastPastStock = (lastStock?.Units ?? 0);
                var _var1 = stock?.StockOnHandDate?.Date;
                var _var2 = stock?.Warehouse?.Id;
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails salesforecast = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>((s) => s.ForecastDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date == _var1 && _var2 == s.Warehouse.Id)?.FirstOrDefault();
                if ((salesforecast == null))
                {
                    stock.Units = 0;
                    continue;
                }
                int? salesForecastUnits = (salesforecast?.Units ?? 0);
                stock.Units = LastPastStock.GetValueOrDefault(0) - salesForecastUnits.GetValueOrDefault(0);
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(stock);
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalcAvgDailyDemandForecast:1/>*/
        public ActionResult ExecuteCalcAvgDailyDemandForecast()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetailsExtensions.ComputeAllAvgDailyDemandForecastPerSKUPerWareHouse();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateCurrentInvDays:1/>*/
        public ActionResult ExecuteCalculateCurrentInvDays()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.StockOnHandExtensions.CalculateCurrentInventoryDays();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateMonthlySLADelivery:1/>*/
        public ActionResult ExecuteCalculateMonthlySLADelivery()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> warehouses = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                foreach (var warehouse in warehouses ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>())
                {
                    int? x = 1;
                    while (x <= 12)
                    {
                        DSS1_RetailerDriverStockOptimisation.BO.SLADelivery delivery = new DSS1_RetailerDriverStockOptimisation.BO.SLADelivery();
                        var _var0 = item?.SKU;
                        var _var1 = warehouse?.Id;
                        int? totalOrderedQuantity = (new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var0 && a.Warehouse.Id == _var1, false)?.Sum((a) => a.QuantityOrdered) ?? 0);
                        if ((totalOrderedQuantity <= 0))
                        {
                            x = x.GetValueOrDefault(0) + 1;
                            continue;
                        }
                        var _var2 = item?.SKU;
                        var _var3 = warehouse?.Id;
                        int? totalDeliveredQuantity = (new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var2 && a.Warehouse.Id == _var3, false)?.Sum((a) => a.QuantityReceived) ?? 0);
                        delivery.OrderedQuantities = (decimal)(totalOrderedQuantity);
                        delivery.DeliveredQuantities = (decimal)(totalDeliveredQuantity);
                        delivery.Item = item;
                        delivery.Warehouse = warehouse;
                        if ((delivery?.OrderedQuantities ?? 0) > 0)
                        {
                            delivery.Percentage = Math.Abs(((delivery?.DeliveredQuantities ?? 0) / (delivery?.OrderedQuantities ?? 0))) * 100;
                        }
                        delivery.ItemDescription = (item?.Description?.Substring(0, 15) ?? "");
                        delivery.Threshold = 80;
                        delivery.Month = x;
                        new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(delivery);
                        x = x.GetValueOrDefault(0) + 1;
                    }
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateMonthlyLeadTime:1/>*/
        public ActionResult ExecuteCalculateMonthlyLeadTime()
        {
            ActionResult _result = null;
            decimal? countOrders = 0;
            decimal? delayed = 0;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> warehouses = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                foreach (var warehouse in warehouses ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>())
                {
                    int? x = 1;
                    while (x <= 12)
                    {
                        DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime leadTime = new DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime();
                        var _var0 = item?.SKU;
                        var _var1 = warehouse?.Id;
                        countOrders = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetCount<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var0 && a.Warehouse.Id == _var1);
                        if ((countOrders <= 0))
                        {
                            x = x.GetValueOrDefault(0) + 1;
                            continue;
                        }
                        var _var2 = item?.SKU;
                        var _var3 = warehouse?.Id;
                        delayed = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetCount<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var2 && a.Warehouse.Id == _var3 && a.ReceiveDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date > a.NotBeforeDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Date);
                        leadTime.Month = x;
                        leadTime.MontlhyOrders = countOrders;
                        leadTime.MonthlyDelayed = delayed;
                        if ((countOrders == 0))
                        {
                            leadTime.MonthlyPercentage = 0;
                        }
                        else
                        {
                            leadTime.MonthlyPercentage = (delayed.GetValueOrDefault(0) / countOrders.GetValueOrDefault(0)) * 100;
                        }
                        leadTime.Threshold = 80;
                        leadTime.Item = item;
                        leadTime.Warehouse = warehouse;
                        new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(leadTime);
                        x = x.GetValueOrDefault(0) + 1;
                    }
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:FixSLAMonth:1/>*/
        public ActionResult ExecuteFixSLAMonth()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery> allSLADeliveries = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>();
            foreach (var delivery in allSLADeliveries ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>())
            {
                delivery.Month = (delivery?.SLADate?.Month ?? 0);
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(delivery);
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        /*<ControllerActionImplementation:SupplierWarehouses:1/>*/
        public ActionResult ExecuteSupplierWarehouses()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand> supplierStocks = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>((a) => a.Item.Supplier.Id == 4);
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> supplierWarehouses = new System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            foreach (var stock in supplierStocks ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>())
            {
                if ((((supplierWarehouses?.Contains(stock?.Warehouse) ?? false)) == false))
                {
                    supplierWarehouses?.Add(stock?.Warehouse);
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Warehouse for Supplier 4: " + (stock?.Warehouse?.Description ?? ""));
                }
            }
            return _result;
        }
        /*<ControllerActionImplementation:AvailableStock:1/>*/
        public ActionResult ExecuteAvailableStock()
        {
            ActionResult _result = null;
            foreach (var ofDetail in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                if (((ofDetail?.Notification?.TotalSupplierStock == 0 || ofDetail?.Notification?.TotalSupplierStock == null) && ofDetail?.Notification?.Message != "Recommendation"))
                {
                    ofDetail.SupplierAvailableQuantity = (int)((ofDetail?.Quantity ?? 0));
                }
                else
                {
                    ofDetail.SupplierAvailableQuantity = (ofDetail?.Notification?.TotalSupplierStock ?? 0);
                }
            }
            return _result;
        }
        /*<ControllerActionImplementation:GetSupplierCapacities:1/>*/
        public ActionResult ExecuteGetSupplierCapacities()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity> supCapacities = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>((a) => a.Item.SKU == "5879060");
            foreach (var supCap in supCapacities ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Date is: " + (supCap?.DateOfStockUpdate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value));
            }
            return _result;
        }
        /*<ControllerActionImplementation:TestingFullTruck:1/>*/
        public ActionResult ExecuteTestingFullTruck()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast orderForecast =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(13001);
            decimal? countSumOfPallets = 0.0m;
            decimal? countSumOfUnits = 0.0m;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> test = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.ItemCoverageDays == 999);
            foreach (var prOrder in test ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.Item itemPorder = prOrder?.Item;
                decimal? numberOfPallets = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.UnitsToPallets(itemPorder, (int)((prOrder?.Quantity ?? 0)));
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Number of pallets: " + numberOfPallets.GetValueOrDefault(0) + "for item: " + (itemPorder?.SKU ?? ""));
                countSumOfPallets = countSumOfPallets.GetValueOrDefault(0) + numberOfPallets.GetValueOrDefault(0);
                countSumOfUnits = countSumOfUnits.GetValueOrDefault(0) + (int)((prOrder?.Quantity ?? 0));
                if ((countSumOfPallets < 33))
                {
                    continue;
                }
                else
                {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails fullTruckOrderFDetail = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
                    fullTruckOrderFDetail.Item = itemPorder;
                    fullTruckOrderFDetail.Warehouse = prOrder?.Warehouse;
                    fullTruckOrderFDetail.Quantity = countSumOfUnits;
                    fullTruckOrderFDetail.RecommendedOrderDate = (prOrder?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    fullTruckOrderFDetail.SupplierCoverageDays = (prOrder?.SupplierCoverageDays ?? 0);
                    fullTruckOrderFDetail.ItemCoverageDays = 888;
                    fullTruckOrderFDetail.CreatedOn = DateTime.UtcNow;
                    if (((fullTruckOrderFDetail?.ItemCoverageDays ?? 0) <= 0))
                    {
                        fullTruckOrderFDetail.ItemCoverageDays = (fullTruckOrderFDetail?.SupplierCoverageDays ?? 0);
                    }
                    orderForecast?.AddOrderForecastDetails(fullTruckOrderFDetail);
                    countSumOfPallets = 0;
                    countSumOfUnits = 0;
                }
            }
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Sum of units: " + countSumOfUnits.GetValueOrDefault(0));
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Sum of pallets: " + countSumOfPallets.GetValueOrDefault(0));
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Length of test: " + (test?.Count() ?? 0));
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(orderForecast);
            return _result;
        }
        /*<ControllerActionImplementation:ResetAllData:1/>*/
        public ActionResult ExecuteResetAllData()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> allOForecasts = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> allOFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter> supParameters = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Notification> notificationsToDelete = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Notification>((a) => a.CreatedBy != "System");
            foreach (var notification in notificationsToDelete ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Notification>())
            {
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteNotification(notification);
            }
            foreach (var ofDetail in allOFDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                ofDetail.SupplierAvailableQuantity = null;
                ofDetail.SupplierCanDeliver = false;
                ofDetail.Status = null;
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ofDetail);
            }
            foreach (var orderForecast in allOForecasts ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>())
            {
                orderForecast.Status = "New";
                orderForecast.State = "New";
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(orderForecast);
            }
            foreach (var supplierParameter in supParameters ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>())
            {
                supplierParameter.SupplierCanDeliverWholeForecast = false;
                supplierParameter.HasReplied = false;
                supplierParameter.SharesExcessStock = false;
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(supplierParameter);
            }
            foreach (var _An in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>().ToList())new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteAppNotification(_An);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Reset completed.");
            return _result;
        }
        /*<ControllerActionImplementation:FillDeliveryScheduleNameDay:1/>*/
        public ActionResult ExecuteFillDeliveryScheduleNameDay()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule> deliverySchedules = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>();
            zAppDev.DotNet.Framework.Utilities.Week week = new zAppDev.DotNet.Framework.Utilities.Week();
            foreach (var delivery in deliverySchedules ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>())
            {
                if ((delivery?.Weekday == 7))
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Saturday.GetName();
                }
                else if (delivery?.Weekday == 1)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Sunday.GetName();
                }
                else if (delivery?.Weekday == 2)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Monday.GetName();
                }
                else if (delivery?.Weekday == 3)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Tuesday.GetName();
                }
                else if (delivery?.Weekday == 4)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Wednesday.GetName();
                }
                else if (delivery?.Weekday == 5)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Thursday.GetName();
                }
                else if (delivery?.Weekday == 6)
                {
                    delivery.NameOfDay = zAppDev.DotNet.Framework.Utilities.Week.Friday.GetName();
                }
                else
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "No Weekday specified for ID: " + (delivery?.Id ?? 0));
                }
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(delivery);
            }
            return _result;
        }
        /*<ControllerActionImplementation:FixDBWeekday:1/>*/
        public ActionResult ExecuteFixDBWeekday()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule> deliverySchedules = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>();
            zAppDev.DotNet.Framework.Utilities.Week week = new zAppDev.DotNet.Framework.Utilities.Week();
            foreach (var delivery in deliverySchedules ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>())
            {
                if ((delivery?.Weekday == 7))
                {
                    delivery.DBWeekday = 6;
                }
                else if (delivery?.Weekday == 1)
                {
                    delivery.DBWeekday = 0;
                }
                else if (delivery?.Weekday == 2)
                {
                    delivery.DBWeekday = 1;
                }
                else if (delivery?.Weekday == 3)
                {
                    delivery.DBWeekday = 2;
                }
                else if (delivery?.Weekday == 4)
                {
                    delivery.DBWeekday = 3;
                }
                else if (delivery?.Weekday == 5)
                {
                    delivery.DBWeekday = 4;
                }
                else if (delivery?.Weekday == 6)
                {
                    delivery.DBWeekday = 5;
                }
                else
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "No Weekday specified for ID: " + (delivery?.Id ?? 0));
                }
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(delivery);
            }
            return _result;
        }
        /*<ControllerActionImplementation:FixDatesTest:1/>*/
        public ActionResult ExecuteFixDatesTest()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast ordForecast = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>.GetSelectedItems(Get_listOrderForecasts_DatasourceQueryable(null, false), @model.listOrderForecastsSelectedItems).FirstOrDefault();
            if ((ordForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select an Order forecast from the list!", MessageType.Warning);
                return null;
            }
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> ordFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            var _var0 = ordForecast?.Id;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> ofDetails = ordFDetails?.Where((a) => a.OrderForecast != null && a.OrderForecast.Id == _var0).ToList();
            bool debugging = false;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Supplier> suppliers = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            DateTime? checkStartDateTime = new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            DateTime? test = checkStartDateTime;
            if ((ordForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select an Order forecast from the list!");
                return null;
            }
            if ((debugging))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Order Day is: " + (((int?)(checkStartDateTime?.DayOfWeek)) ?? 0) + " for item: ");
            }
            foreach (var supplier in suppliers ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Supplier>())
            {
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule> supplierDeliverySchedules = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>((b) => b.Supplier.Id == supplier.Id)?.OrderBy((a) => a.Weekday).ToList();
                System.Collections.Generic.List<int?> days = supplierDeliverySchedules?.Select((a) => a.DBWeekday).ToList().Distinct().ToList();
                if ((days.Count() == 7))
                {
                    continue;
                }
                double? diff = new double?();
                int? dayToCheck = (((int?)(checkStartDateTime?.AddDays(1).DayOfWeek)) ?? 0);
                if ((days.Contains((dayToCheck).GetValueOrDefault(0))))
                {
                    continue;
                }
                else
                {
                    if ((supplier?.Id == 4))
                    {
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "&& Day to check: " + dayToCheck.GetValueOrDefault(0));
                        days = days.Where((a) => a < dayToCheck).ToList().ToList();
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "First Day: " + days.FirstOrDefault() + " of: " + days.Count());
                    }
                    int? previousDeliveryDay = days.Where((a) => a < dayToCheck).ToList().OrderBy((a) => a).ToList().LastOrDefault();
                    int? nextDeliveryDay = new int?();
                    diff = dayToCheck.GetValueOrDefault(0) - previousDeliveryDay.GetValueOrDefault(0);
                    if ((days.Count() == 0))
                    {
                        nextDeliveryDay = days.Where((a) => a > dayToCheck).ToList().OrderBy((a) => a).ToList().FirstOrDefault();
                        diff = nextDeliveryDay.GetValueOrDefault(0) - dayToCheck.GetValueOrDefault(0);
                    }
                    diff = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<double?>((0 - diff.GetValueOrDefault(0)));
                    if ((debugging))
                    {
                    }
                    checkStartDateTime = (checkStartDateTime?.AddDays((diff).GetValueOrDefault(0)) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** CheckStartDateTime " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
                }
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "CalculationsForm",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "****** CheckStartDateTime 2  " + checkStartDateTime.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value) + " *** was " + test.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value));
            }
            foreach (var orderFdetail in ofDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails newZeroOfDetail = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
                if (((orderFdetail?.Item?.Supplier?.Id == 3 || orderFdetail?.Item?.Supplier?.Id == 5) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0))
                {
                    newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    newZeroOfDetail.Quantity = 0;
                    newZeroOfDetail.Item = orderFdetail?.Item;
                    newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;
                    newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
                    orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                }
                if (((orderFdetail?.Item?.Supplier?.Id == 2) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0))
                {
                    newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    newZeroOfDetail.Quantity = 0;
                    newZeroOfDetail.Item = orderFdetail?.Item;
                    newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;
                    newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
                    orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 2) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                }
                if (((orderFdetail?.Item?.Supplier?.Id == 4) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 5))
                {
                    newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    newZeroOfDetail.Quantity = 0;
                    newZeroOfDetail.Item = orderFdetail?.Item;
                    newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;
                    newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
                    orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 1) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                }
                if (((orderFdetail?.Item?.Supplier?.Id == 4) && ((int?)(orderFdetail?.RecommendedOrderDate?.DayOfWeek)) == 0))
                {
                    newZeroOfDetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                    newZeroOfDetail.Quantity = 0;
                    newZeroOfDetail.Item = orderFdetail?.Item;
                    newZeroOfDetail.Warehouse = orderFdetail?.Warehouse;
                    newZeroOfDetail.OrderForecast = orderFdetail?.OrderForecast;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(newZeroOfDetail);
                    orderFdetail.RecommendedOrderDate = (orderFdetail?.RecommendedOrderDate?.AddDays(- 3) ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                }
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(orderFdetail);
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Completed.");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateOrderForecastAccuracy:1/>*/
        public ActionResult ExecuteCalculateOrderForecastAccuracy()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> warehouses = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            foreach (var item in new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.Item>() ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Item>())
            {
                foreach (var warehouse in warehouses ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>())
                {
                    int? x = 1;
                    while (x <= 12)
                    {
                        DSS1_RetailerDriverStockOptimisation.BO.Platform platform = new DSS1_RetailerDriverStockOptimisation.BO.Platform();
                        var _var0 = item?.SKU;
                        var _var1 = warehouse?.Id;
                        int? totalOrderedQuantity = (new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>((a) => a.WrittenDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var0 && a.Warehouse.Id == _var1, false)?.Sum((a) => a.QuantityOrdered) ?? 0);
                        if ((totalOrderedQuantity <= 0))
                        {
                            x = x.GetValueOrDefault(0) + 1;
                            continue;
                        }
                        var _var2 = item?.SKU;
                        var _var3 = warehouse?.Id;
                        decimal? totalForecastedQuantity = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<decimal?>((new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.RecommendedOrderDate.GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value).Month == x && a.Item.SKU == _var2 && a.Warehouse.Id == _var3, false)?.Sum((a) => a.Quantity) ?? 0));
                        platform.RealOrderedQuantities = (decimal)(totalOrderedQuantity);
                        platform.ForecastOrders = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<decimal?>(totalForecastedQuantity);
                        platform.Item = item;
                        platform.Warehouse = warehouse;
                        if ((platform?.RealOrderedQuantities ?? 0) > 0)
                        {
                            platform.percentage = Math.Abs(((platform?.ForecastOrders ?? 0) / (platform?.RealOrderedQuantities ?? 0)));
                        }
                        platform.Month = (x?.ToString() ?? "");
                        new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.Platform>(platform);
                        x = x.GetValueOrDefault(0) + 1;
                    }
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Finished.");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:List:1/>*/
        /*<DataSourceFilter:List:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast> Get_List_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_List_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.ImportDate != null ? @this.ImportDate : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast> Get_List_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:List:1/>*/

        [HttpPost]
        [Route("List_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SalesForecasts", ClaimType = ClaimTypes.Dataset)]
        public JsonResult List_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SalesForecasts_SalesForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(CalculationsFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "List");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:List:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SalesForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("List_Datasource")]
        public JsonResult List_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SalesForecasts_SalesForecastDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SalesForecasts_SalesForecastDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:List:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SalesForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("List_DatasourceAggregators")]
        public JsonResult List_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("ImportDate", "dd/MM/yyyy");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listOrderForecasts:1/>*/
        /*<DataSourceFilter:listOrderForecasts:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_listOrderForecasts_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listOrderForecasts_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_listOrderForecasts_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listOrderForecasts:1/>*/

        [HttpPost]
        [Route("listOrderForecasts_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecasts", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listOrderForecasts_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listOrderForecasts_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecasts_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(CalculationsFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listOrderForecasts");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecasts_Datasource")]
        public JsonResult listOrderForecasts_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecasts_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecasts_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecasts_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecasts_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new OrderForecasts_OrderForecastDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new OrderForecasts_OrderForecastDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecasts_DatasourceAggregators")]
        public JsonResult listOrderForecasts_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecasts_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("CreatedOn", "dd/MM/yyyy");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:CalculationsForm_SalesForecasts:1/>*/
        /*<DataSourceFilter:CalculationsForm_SalesForecasts:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast> Get_CalculationsForm_SalesForecasts_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_CalculationsForm_SalesForecasts_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.ImportDate != null ? @this.ImportDate : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast> Get_CalculationsForm_SalesForecasts_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:CalculationsForm_SalesForecasts:1/>*/

        [HttpPost]
        [Route("CalculationsForm_SalesForecasts_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SalesForecasts", ClaimType = ClaimTypes.Dataset)]
        public JsonResult CalculationsForm_SalesForecasts_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_CalculationsForm_SalesForecasts_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SalesForecasts_SalesForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(CalculationsFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "CalculationsForm_SalesForecasts");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:CalculationsForm_SalesForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SalesForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("CalculationsForm_SalesForecasts_Datasource")]
        public JsonResult CalculationsForm_SalesForecasts_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_CalculationsForm_SalesForecasts_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_SalesForecasts_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_SalesForecasts_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_SalesForecasts_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:CalculationsForm_OrderForecasts:1/>*/
        /*<DataSourceFilter:CalculationsForm_OrderForecasts:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_CalculationsForm_OrderForecasts_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_CalculationsForm_OrderForecasts_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_CalculationsForm_OrderForecasts_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:CalculationsForm_OrderForecasts:1/>*/

        [HttpPost]
        [Route("CalculationsForm_OrderForecasts_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecasts", ClaimType = ClaimTypes.Dataset)]
        public JsonResult CalculationsForm_OrderForecasts_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_CalculationsForm_OrderForecasts_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecasts_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(CalculationsFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "CalculationsForm_OrderForecasts");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:CalculationsForm_OrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecasts", ClaimType = ClaimTypes.Dataset)]
        [Route("CalculationsForm_OrderForecasts_Datasource")]
        public JsonResult CalculationsForm_OrderForecasts_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_CalculationsForm_OrderForecasts_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_OrderForecasts_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_OrderForecasts_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_CalculationsForm_OrderForecasts_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new CalculationsFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("CalculationsForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: CalculationsForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
