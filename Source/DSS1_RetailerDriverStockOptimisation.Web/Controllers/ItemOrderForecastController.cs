// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.ItemOrderForecast
{

    [RoutePrefix("ItemOrderForecast")]
    public class ItemOrderForecastController : ControllerBase<ItemOrderForecastViewModel, ItemOrderForecastViewModelDTO>
    {

        /*<Form:ItemOrderForecast:0/>*/
        public ItemOrderForecastController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(ItemOrderForecastController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(ItemOrderForecastViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(ItemOrderForecastViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new ItemOrderForecastViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ItemOrderForecast"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new ItemOrderForecastViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ItemOrderForecast"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcQuantity", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcQuantity")]
        public ActionResult CalcQuantity()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcQuantity();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalcReplenishmentCycle", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalcReplenishmentCycle")]
        public ActionResult CalcReplenishmentCycle()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalcReplenishmentCycle();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CalculateOrderDate", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CalculateOrderDate")]
        public ActionResult CalculateOrderDate()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCalculateOrderDate();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="OrderForecastPerSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("OrderForecastPerSKU/{*itemSku?}")]
        public ActionResult OrderForecastPerSKU(string itemSku)

        {
            @model = new ItemOrderForecastViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ItemOrderForecast"] = "OrderForecastPerSKU";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="OrderForecastPerSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_OrderForecastPerSKU/{*itemSku?}")]
        public ActionResult _API_OrderForecastPerSKU(string itemSku)

        {
            @model = new ItemOrderForecastViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ItemOrderForecast"] = "OrderForecastPerSKU";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteOrderForecastPerSKU(itemSku);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CreateNotifications", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CreateNotifications")]
        public ActionResult CreateNotifications()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCreateNotifications();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="RefreshCharts", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RefreshCharts")]
        public ActionResult RefreshCharts()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteRefreshCharts();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.Supplier = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>((s) => s.Id == 3)?.FirstOrDefault();
            @model.SKU = "2729169";
            @model.Item = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>((a) => a.SKU == "2729169")?.FirstOrDefault();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> statistics = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ItemOrderForecast",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Statistics: " + (statistics?.Count().ToString() ?? ""));
            @model.Chart107 = statistics?.Where((a) => a.Warehouse.Code == "107").ToList().ToList();
            @model.Chart108 = statistics?.Where((a) => a.Warehouse.Code == "108").ToList().ToList();
            @model.Chart105 = statistics?.Where((a) => a.Warehouse.Code == "105").ToList().ToList();
            @model.Chart104 = statistics?.Where((a) => a.Warehouse.Code == "104").ToList().ToList();
            @model.Chart1243 = statistics?.Where((a) => a.Warehouse.Code == "1243").ToList().ToList();
            @model.Chart1284 = statistics?.Where((a) => a.Warehouse.Code == "1284").ToList().ToList();
            return _result;
        }
        /*<ControllerActionImplementation:CalcQuantity:1/>*/
        public ActionResult ExecuteCalcQuantity()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.GetQuantity();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "OK.", MessageType.Success, (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                          System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                          "/ItemOrderForecast/Render");
            return _result;
        }
        /*<ControllerActionImplementation:CalcReplenishmentCycle:1/>*/
        public ActionResult ExecuteCalcReplenishmentCycle()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.CalculateReplenishmentCycle();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Replenish done!");
            return _result;
        }
        /*<ControllerActionImplementation:CalculateOrderDate:1/>*/
        public ActionResult ExecuteCalculateOrderDate()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.CalculateRecommendedOrderDate();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Success");
            return _result;
        }
        /*<ControllerActionImplementation:OrderForecastPerSKU:1/>*/
        public ActionResult ExecuteOrderForecastPerSKU(string itemSku)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.Item =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(itemSku);
            return _result;
        }
        /*<ControllerActionImplementation:CreateNotifications:1/>*/
        public ActionResult ExecuteCreateNotifications()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.NotificationExtensions.CreateNotificationsForAll();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Created Alerts.");
            return _result;
        }
        /*<ControllerActionImplementation:RefreshCharts:1/>*/
        public ActionResult ExecuteRefreshCharts()
        {
            ActionResult _result = null;
            @model.Item =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(@model.SKU);
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> statistics = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ItemOrderForecast",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Statistics: " + (statistics?.Count().ToString() ?? ""));
            @model.Chart107 = statistics?.Where((a) => a.Warehouse.Code == "107").ToList().ToList();
            @model.Chart108 = statistics?.Where((a) => a.Warehouse.Code == "108").ToList().ToList();
            @model.Chart105 = statistics?.Where((a) => a.Warehouse.Code == "105").ToList().ToList();
            @model.Chart104 = statistics?.Where((a) => a.Warehouse.Code == "104").ToList().ToList();
            @model.Chart1243 = statistics?.Where((a) => a.Warehouse.Code == "1243").ToList().ToList();
            @model.Chart1284 = statistics?.Where((a) => a.Warehouse.Code == "1284").ToList().ToList();
            ClientCommand(ClientCommands.CHART_REFRESH, "Chart107");
            ClientCommand(ClientCommands.CHART_REFRESH, "Chart108");
            ClientCommand(ClientCommands.CHART_REFRESH, "Chart105");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:DropdownBox:1/>*/
        /*<DataSourceFilter:DropdownBox:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_DropdownBox_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_DropdownBox_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DropdownBox:1/>*/

        [HttpPost]
        [Route("DropdownBox_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Suppliers", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Suppliers_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Suppliers", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox_Datasource")]
        public JsonResult DropdownBox_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new Suppliers_SupplierDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DropdownBox1:1/>*/
        /*<DataSourceFilter:DropdownBox1:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_DropdownBox1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_DropdownBox1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            var _var0 = @model.Supplier?.Id;
            var _var1 = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Supplier>((a) => a.Id == _var0)?.FirstOrDefault();
            return __items.Where(@this => @this.Supplier == _var1);
        }


        /*<DataSourceGetFullRecordset:DropdownBox1:1/>*/

        [HttpPost]
        [Route("DropdownBox1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Items", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Items_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "DropdownBox1");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Items", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox1_Datasource")]
        public JsonResult DropdownBox1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new Items_ItemDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart107:1/>*/
        /*<DataSourceFilter:Chart107:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart107_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart107_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart107_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart107?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart107:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse107VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart107_Datasource")]
        public JsonResult Chart107_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart107_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart107_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart107_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart107_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Warehouse107VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart108:1/>*/
        /*<DataSourceFilter:Chart108:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart108_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart108_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart108_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart108?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart108:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart108VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart108_Datasource")]
        public JsonResult Chart108_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart108_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart108_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart108_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart108_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Chart108VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart105:1/>*/
        /*<DataSourceFilter:Chart105:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart105_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart105_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart105_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart105?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart105:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart105VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart105_Datasource")]
        public JsonResult Chart105_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart105_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart105_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart105_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart105_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Chart105VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart104:1/>*/
        /*<DataSourceFilter:Chart104:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart104_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart104_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart104_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart104?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart104:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart104VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart104_Datasource")]
        public JsonResult Chart104_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart104_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart104_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart104_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart104_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Chart104VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart1243:1/>*/
        /*<DataSourceFilter:Chart1243:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart1243_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart1243_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart1243_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart1243?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart1243:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1243VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart1243_Datasource")]
        public JsonResult Chart1243_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart1243_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1243_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1243_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1243_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Chart1243VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart1284:1/>*/
        /*<DataSourceFilter:Chart1284:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart1284_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart1284_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_Chart1284_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart1284?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart1284:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1284VM", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart1284_Datasource")]
        public JsonResult Chart1284_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart1284_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1284_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1284_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1284_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "quantity", "Recommended Quantity"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new Chart1284VM_OrderForecastStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.Quantity }, new List<object> { "Recommended Quantity" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_OrderProposalDataSet:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_OrderProposalDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_ItemOrderForecast_OrderProposalDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_OrderProposalDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_ItemOrderForecast_OrderProposalDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_OrderProposalDataSet:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_OrderProposalDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderProposalDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_OrderProposalDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_OrderProposalDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderProposalDataSet_OrderForecastDetailsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_OrderProposalDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_OrderProposalDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderProposalDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_OrderProposalDataSet_Datasource")]
        public JsonResult ItemOrderForecast_OrderProposalDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_OrderProposalDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_OrderProposalsDS:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_OrderProposalsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_ItemOrderForecast_OrderProposalsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_OrderProposalsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_ItemOrderForecast_OrderProposalsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.OrderProposals?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_OrderProposalsDS:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_OrderProposalsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderProposalsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_OrderProposalsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_OrderProposalsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderProposalsDS_OrderForecastDetailsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_OrderProposalsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_OrderProposalsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderProposalsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_OrderProposalsDS_Datasource")]
        public JsonResult ItemOrderForecast_OrderProposalsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_OrderProposalsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_OrderProposalsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse107:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse107:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse107_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse107_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse107_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "107");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse107:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse107_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse107", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse107_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse107_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse107_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse107");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse107:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse107", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse107_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse107_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse107_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse108:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse108:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse108_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse108_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse108_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "108");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse108:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse108_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse108", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse108_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse108_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse108_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse108");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse108:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse108", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse108_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse108_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse108_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse108_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse108_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse108_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Suppliers:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Suppliers:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_ItemOrderForecast_Suppliers_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Suppliers_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_ItemOrderForecast_Suppliers_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Suppliers:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Suppliers_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Suppliers", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Suppliers_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Suppliers_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Suppliers_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Suppliers");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Suppliers:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Suppliers", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Suppliers_Datasource")]
        public JsonResult ItemOrderForecast_Suppliers_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Suppliers_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Suppliers_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Suppliers_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Suppliers_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Items:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Items:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ItemOrderForecast_Items_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Items_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ItemOrderForecast_Items_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            var _var0 = @model.Supplier?.Id;
            var _var1 = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Supplier>((a) => a.Id == _var0)?.FirstOrDefault();
            return __items.Where(@this => @this.Supplier == _var1);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Items:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Items_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Items", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Items_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Items_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Items_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "ItemOrderForecast_Items");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Items:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Items", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Items_Datasource")]
        public JsonResult ItemOrderForecast_Items_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Items_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Items_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Items_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Items_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse105:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse105:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse105_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse105_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse105_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "105");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse105:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse105_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse105", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse105_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse105_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse105_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse105");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse105:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse105", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse105_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse105_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse105_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse105_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse105_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse105_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse104:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse104:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse104_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse104_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse104_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "104");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse104:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse104_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse104", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse104_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse104_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse104_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse104");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse104:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse104", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse104_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse104_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse104_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse104_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse104_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse104_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse1243:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse1243:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse1243_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse1243_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse1243_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "1243");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse1243:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse1243_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse1243", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse1243_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse1243_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse1243_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse1243");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse1243:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse1243", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse1243_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse1243_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse1243_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1243_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1243_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1243_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse1284:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse1284:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse1284_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse1284_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse1284_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatisticExtensions.OrderForecastForSKU(@model.Item).AsQueryable();
            return __items.Where(@this => @this.Warehouse != null && @this.Warehouse.Code == "1284");
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse1284:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse1284_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse1284", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse1284_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse1284_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse1284_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse1284");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse1284:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse1284", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse1284_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse1284_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse1284_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1284_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1284_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse1284_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Warehouse107VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Warehouse107VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse107VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Warehouse107VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Warehouse107VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart107?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Warehouse107VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Warehouse107VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse107VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Warehouse107VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Warehouse107VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Warehouse107VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Warehouse107VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Warehouse107VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Warehouse107VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Warehouse107VM_Datasource")]
        public JsonResult ItemOrderForecast_Warehouse107VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Warehouse107VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Warehouse107VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart105VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart105VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart105VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart105VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart105VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart105?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart105VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart105VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart105VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart105VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart105VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart105VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart105VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart105VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart105VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart105VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart105VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart105VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart105VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart105VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart105VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart108VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart108VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart108VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart108VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart108VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart108?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart108VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart108VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart108VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart108VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart108VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart108VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart108VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart108VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart108VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart108VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart108VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart108VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart108VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart108VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart108VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart104VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart104VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart104VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart104VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart104VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart104?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart104VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart104VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart104VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart104VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart104VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart104VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart104VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart104VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart104VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart104VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart104VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart104VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart104VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart104VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart104VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart107VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart107VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart107VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart107VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart107VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart107?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart107VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart107VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart107VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart107VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart107VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart107VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart107VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart107VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart107VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart107VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart107VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart107VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart107VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart107VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart107VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart1243VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart1243VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart1243VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart1243VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart1243VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart1243?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart1243VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart1243VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1243VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart1243VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart1243VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart1243VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart1243VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart1243VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1243VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart1243VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart1243VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart1243VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1243VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1243VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1243VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ItemOrderForecast_Chart1284VM:1/>*/
        /*<DataSourceFilter:ItemOrderForecast_Chart1284VM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart1284VM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ItemOrderForecast_Chart1284VM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Get_ItemOrderForecast_Chart1284VM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Chart1284?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ItemOrderForecast_Chart1284VM:1/>*/

        [HttpPost]
        [Route("ItemOrderForecast_Chart1284VM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1284VM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ItemOrderForecast_Chart1284VM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ItemOrderForecast_Chart1284VM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Chart1284VM_OrderForecastStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ItemOrderForecastViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ItemOrderForecast_Chart1284VM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ItemOrderForecast_Chart1284VM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Chart1284VM", ClaimType = ClaimTypes.Dataset)]
        [Route("ItemOrderForecast_Chart1284VM_Datasource")]
        public JsonResult ItemOrderForecast_Chart1284VM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ItemOrderForecast_Chart1284VM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1284VM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1284VM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ItemOrderForecast_Chart1284VM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new ItemOrderForecastViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("ItemOrderForecast");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: ItemOrderForecast, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
