// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.StockManagerView;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.StockManagerView
{

    [RoutePrefix("StockManagerView")]
    public class StockManagerViewController : ControllerBase<StockManagerViewViewModel, StockManagerViewViewModelDTO>
    {

        /*<Form:StockManagerView:0/>*/
        public StockManagerViewController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(StockManagerViewController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(StockManagerViewViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(StockManagerViewViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("StockManagerView", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "StockManagerView");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "StockManagerView");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "StockManagerView");
        }



        #region Controller Actions
        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new StockManagerViewViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_StockManagerView"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new StockManagerViewViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_StockManagerView"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSubcategory", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSubcategory")]
        public ActionResult AddSubcategory()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSubcategory();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SelectForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SelectForecast")]
        public ActionResult SelectForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSelectForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RecalculateForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RecalculateForecast")]
        public ActionResult RecalculateForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteRecalculateForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RefreshFilters", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RefreshFilters")]
        public ActionResult RefreshFilters(string caller)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                caller = DeserializeViewModelProperty<string>(_data["caller"] as Newtonsoft.Json.Linq.JValue);
            }
            var redirectInfo = ExecuteRefreshFilters(caller);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSKU")]
        public ActionResult AddSKU()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSKU();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SendForecastToSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SendForecastToSupplier")]
        public ActionResult SendForecastToSupplier()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSendForecastToSupplier();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CollapseRight", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CollapseRight")]
        public ActionResult CollapseRight()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCollapseRight();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="HandleRadioButton", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("HandleRadioButton")]
        public ActionResult HandleRadioButton()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteHandleRadioButton();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CollapseLeft", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CollapseLeft")]
        public ActionResult CollapseLeft()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCollapseLeft();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="EditedOFDetail", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("EditedOFDetail")]
        public ActionResult EditedOFDetail(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                ofDetail = DeserializeViewModelProperty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails, OrderForecastDetailsDTO>(_data["ofDetail"].ToString());
            }
            var redirectInfo = ExecuteEditedOFDetail(ofDetail);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="ApplySupplierCoverageDaysToAllItems", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ApplySupplierCoverageDaysToAllItems")]
        public ActionResult ApplySupplierCoverageDaysToAllItems(DSS1_RetailerDriverStockOptimisation.BO.Supplier supplier, int? coverageDays)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                supplier = DeserializeViewModelProperty<DSS1_RetailerDriverStockOptimisation.BO.Supplier, SupplierDTO>(_data["supplier"].ToString());
                var parsedcoverageDays = 0;
                if (!(int.TryParse(DeserializeViewModelProperty<object>(_data["coverageDays"] as Newtonsoft.Json.Linq.JValue)?.ToString(), out parsedcoverageDays)))
                {
                    throw new ApplicationException("Supplied value cannot be parsed to Datatype 'int' of parameter 'coverageDays'");
                }
                coverageDays = parsedcoverageDays;
            }
            var redirectInfo = ExecuteApplySupplierCoverageDaysToAllItems(supplier,coverageDays);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="GoToFilteredKPIView", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("GoToFilteredKPIView")]
        public ActionResult GoToFilteredKPIView()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteGoToFilteredKPIView();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.CollapseLeftColumn = true;
            @model.CollapseRightColumn = true;
            @model.FromDate = new DateTime(2018, 02, 02, 0, 0, 0, DateTimeKind.Utc);
            @model.ToDate = new DateTime(2018, 03, 15, 0, 0, 0, DateTimeKind.Utc);
            @model.FilterList = "All";
            return _result;
        }
        /*<ControllerActionImplementation:AddSubcategory:1/>*/
        public ActionResult ExecuteAddSubcategory()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            return _result;
        }
        /*<ControllerActionImplementation:SelectForecast:1/>*/
        public ActionResult ExecuteSelectForecast()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast selectedForecast = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>.GetSelectedItems(Get_lstOrderForecasts_DatasourceQueryable(null, false), @model.lstOrderForecastsSelectedItems).FirstOrDefault();
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Item> items = new System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if ((selectedForecast == null))
            {
                @model.SelectedForecast = null;
                @model.SupplierParameters = new List<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter> {  } .ToList();
                @model.ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> {  } .ToList();
            }
            else
            {
                @model.SelectedForecast = selectedForecast;
                @model.ItemsInSelectedForecast = selectedForecast?.ItemParameters.ToList();
                @model.SupplierParameters = selectedForecast?.SupplierParameters.ToList();
                if ((((@model.SupplierParameters?.Where((a) => a.HasReplied == false).ToList().Any() ?? false)) == false) && @model.SelectedForecast?.Status == "Pending Supplier Answer")
                {
                    @model.SelectedForecast.State = "Answered by all Suppliers";
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
                }
                @model.FromDate = (selectedForecast?.StartDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                @model.ToDate = (selectedForecast?.EndDate?.Date ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                foreach (var i in @model.ItemsInSelectedForecast ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>())
                {
                    items?.Add(i?.Item);
                }
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            return _result;
        }
        /*<ControllerActionImplementation:RecalculateForecast:1/>*/
        public ActionResult ExecuteRecalculateForecast()
        {
            ActionResult _result = null;
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to recalculate!", MessageType.Warning);
                return null;
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
            bool enableAnalyticDebug = true;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetailsExtensions.CalculateOrderProposal(enableAnalyticDebug, (@model.SelectedForecast?.Id ?? 0), zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            ClientCommand(ClientCommands.SHOW_MESSAGE, "The Order Forecast was recalculated successfully.");
            return _result;
        }
        /*<ControllerActionImplementation:RefreshFilters:1/>*/
        public ActionResult ExecuteRefreshFilters(string caller)
        {
            ActionResult _result = null;
            if ((caller == "BusinessUnits"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listCategories");
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            }
            if ((caller == "Categories"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            }
            if ((caller == "Subcategories"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listBaseUnits");
            }
            if ((caller == "SKU"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSKUs");
            }
            ClientCommand(ClientCommands.DROPDOWN_REFRESH, "ddlSKUs");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            return _result;
        }
        /*<ControllerActionImplementation:AddSKU:1/>*/
        public ActionResult ExecuteAddSKU()
        {
            ActionResult _result = null;
            @model.SelectedSKUs?.Add(@model.SelectedSKU);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "StockManagerView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Description: " + (@model.SelectedSKU?.Description ?? ""));
            @model.SelectedSKU = null;
            _result = this.ExecuteRefreshFilters(caller : "SKU");
            return _result;
        }
        /*<ControllerActionImplementation:SendForecastToSupplier:1/>*/
        public ActionResult ExecuteSendForecastToSupplier()
        {
            ActionResult _result = null;
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to send!", MessageType.Warning);
                return null;
            }
            var _var0 = @model.SelectedForecast?.Id;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> sendingOFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.OrderForecast.Id == _var0);
            if ((@model.SelectedForecast?.Status != "New"))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "You can only send 'New' Forecasts!", MessageType.Warning);
                return null;
            }
            foreach (var oFDetail in sendingOFDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                oFDetail.Status = "Pending Answer";
            }
            @model.SelectedForecast.Status = "Pending Supplier Answer";
            @model.SelectedForecast.State = "Pending Answer";
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "lstOrderForecasts");
            @model.SelectedForecast = null;
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.SHOW_MESSAGE, "The Order Forecast was sent successfully.");
            return _result;
        }
        /*<ControllerActionImplementation:CollapseRight:1/>*/
        public ActionResult ExecuteCollapseRight()
        {
            ActionResult _result = null;
            if (@model.CollapseRightColumn)
            {
                @model.CollapseRightColumn = false;
            }
            else
            {
                @model.CollapseRightColumn = true;
            }
            ClientCommand(ClientCommands.DATALIST_UPDATE_SIZE, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:HandleRadioButton:1/>*/
        public ActionResult ExecuteHandleRadioButton()
        {
            ActionResult _result = null;
            if (@model.FilterList == "Alerts")
            {
                @model.ShowAlerts = true;
                @model.ShowRecommendations = false;
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "StockManagerView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, " *** ");
            }
            else if (@model.FilterList == "Recommendations")
            {
                @model.ShowAlerts = false;
                @model.ShowRecommendations = true;
            }
            else
            {
                @model.ShowAlerts = true;
                @model.ShowRecommendations = true;
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:CollapseLeft:1/>*/
        public ActionResult ExecuteCollapseLeft()
        {
            ActionResult _result = null;
            if (@model.CollapseLeftColumn)
            {
                @model.CollapseLeftColumn = false;
            }
            else
            {
                @model.CollapseLeftColumn = true;
            }
            ClientCommand(ClientCommands.DATALIST_UPDATE_SIZE, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:EditedOFDetail:1/>*/
        public ActionResult ExecuteEditedOFDetail(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)
        {
            ActionResult _result = null;
            ofDetail.Status = "Edited";
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ofDetail);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ApplySupplierCoverageDaysToAllItems:1/>*/
        public ActionResult ExecuteApplySupplierCoverageDaysToAllItems(DSS1_RetailerDriverStockOptimisation.BO.Supplier supplier, int? coverageDays)
        {
            ActionResult _result = null;
            var _var0 = supplier?.Id;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> suppliersItems = @model.ItemsInSelectedForecast?.Where((a) => a.Item.Supplier.Id == _var0).ToList();
            foreach (var itemParameter in suppliersItems ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>())
            {
                itemParameter.CoverageDays = coverageDays;
                new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>(itemParameter);
            }
            return _result;
        }
        /*<ControllerActionImplementation:GoToFilteredKPIView:1/>*/
        public ActionResult ExecuteGoToFilteredKPIView()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<int?> supIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<int?> warehouseIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((b) => b.Id).ToList();
            System.Collections.Generic.List<int?> businessUnitsIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((c) => c.Id).ToList();
            System.Collections.Generic.List<int?> categoriesIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((d) => d.Id).ToList();
            System.Collections.Generic.List<int?> subcategoriesIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((e) => e.Id).ToList();
            System.Collections.Generic.List<int?> baseUnitsIds = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((f) => f.Id).ToList();
            System.Collections.Generic.List<string> skus = @model.SelectedSKUs?.Select((g) => g.SKU).ToList();
            string supIdStr = string.Join(",", supIds);
            string warehouseIdStr = string.Join(",", warehouseIds);
            string businessUnitIdStr = string.Join(",", businessUnitsIds);
            string catIdStr = string.Join(",", categoriesIds);
            string subCatIdStr = string.Join(",", subcategoriesIds);
            string baseUnitIdStr = string.Join(",", baseUnitsIds);
            string skuStr = string.Join(",", skus);
            if (((supIdStr == null || supIdStr == "")))
            {
                supIdStr = "0";
            }
            if (((warehouseIdStr == null || warehouseIdStr == "")))
            {
                warehouseIdStr = "0";
            }
            if (((businessUnitIdStr == null || businessUnitIdStr == "")))
            {
                businessUnitIdStr = "0";
            }
            if (((catIdStr == null || catIdStr == "")))
            {
                catIdStr = "0";
            }
            if (((subCatIdStr == null || subCatIdStr == "")))
            {
                subCatIdStr = "0";
            }
            if (((baseUnitIdStr == null || baseUnitIdStr == "")))
            {
                baseUnitIdStr = "0";
            }
            if (((skuStr == null || skuStr == "")))
            {
                skuStr = "0";
            }
            ClientCommand(ClientCommands.EXECUTE_JS, "Joove.Core.executeRedirectControllerAction('KPIDashboardViewOnly', 'ViewFiltered', 'GET', ['" + supIdStr + "',	'" + warehouseIdStr + "', '" + businessUnitIdStr + "', '" + catIdStr + "', '" + subCatIdStr + "', '" + baseUnitIdStr + "', '" + skuStr + "'], {}, { mode: 'PopUp', width: '85%', height: '85%'});");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:listSuppliers:1/>*/
        /*<DataSourceFilter:listSuppliers:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_listSuppliers_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSuppliers_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_listSuppliers_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listSuppliers:1/>*/

        [HttpPost]
        [Route("listSuppliers_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSuppliers_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listSuppliers");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSuppliers:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSuppliers_Datasource")]
        public JsonResult listSuppliers_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSuppliers:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSuppliers_DatasourceAggregators")]
        public JsonResult listSuppliers_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listWarehouses:1/>*/
        /*<DataSourceFilter:listWarehouses:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listWarehouses_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listWarehouses:1/>*/

        [HttpPost]
        [Route("listWarehouses_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listWarehouses_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listWarehouses");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_Datasource")]
        public JsonResult listWarehouses_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_DatasourceAggregators")]
        public JsonResult listWarehouses_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listBusinessUnits:1/>*/
        /*<DataSourceFilter:listBusinessUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_listBusinessUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listBusinessUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_listBusinessUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listBusinessUnits:1/>*/

        [HttpPost]
        [Route("listBusinessUnits_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listBusinessUnits_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listBusinessUnits");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listBusinessUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listBusinessUnits_Datasource")]
        public JsonResult listBusinessUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listBusinessUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listBusinessUnits_DatasourceAggregators")]
        public JsonResult listBusinessUnits_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listCategories:1/>*/
        /*<DataSourceFilter:listCategories:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category> Get_listCategories_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listCategories_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.BusinessUnit != null && @this.BusinessUnit.Id != null ? @this.BusinessUnit.Id : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category> Get_listCategories_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedBUs = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>().AsQueryable();
            return __items.Where(@this => selectedBUs.Contains((@this.BusinessUnit.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listCategories:1/>*/

        [HttpPost]
        [Route("listCategories_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listCategories_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listCategories");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listCategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listCategories_Datasource")]
        public JsonResult listCategories_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listCategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listCategories_DatasourceAggregators")]
        public JsonResult listCategories_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Category>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listSubcategories:1/>*/
        /*<DataSourceFilter:listSubcategories:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_listSubcategories_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSubcategories_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_listSubcategories_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedCategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => selectedCategories.Contains((@this.Category.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listSubcategories:1/>*/

        [HttpPost]
        [Route("listSubcategories_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSubcategories_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listSubcategories");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSubcategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listSubcategories_Datasource")]
        public JsonResult listSubcategories_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSubcategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listSubcategories_DatasourceAggregators")]
        public JsonResult listSubcategories_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:ddlSubcategory:1/>*/
        /*<DataSourceFilter:ddlSubcategory:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_ddlSubcategory_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ddlSubcategory_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_ddlSubcategory_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ddlSubcategory:1/>*/

        [HttpPost]
        [Route("ddlSubcategory_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ddlSubcategory_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ddlSubcategory_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ddlSubcategory");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ddlSubcategory:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("ddlSubcategory_Datasource")]
        public JsonResult ddlSubcategory_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ddlSubcategory_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:listBaseUnits:1/>*/
        /*<DataSourceFilter:listBaseUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit> Get_listBaseUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listBaseUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit> Get_listBaseUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedSubcategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>().AsQueryable();
            return __items.Where(@this => selectedSubcategories.Contains((@this.SubCategory.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listBaseUnits:1/>*/

        [HttpPost]
        [Route("listBaseUnits_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listBaseUnits_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listBaseUnits");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listBaseUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listBaseUnits_Datasource")]
        public JsonResult listBaseUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listBaseUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listBaseUnits_DatasourceAggregators")]
        public JsonResult listBaseUnits_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listSKUs:1/>*/
        /*<DataSourceFilter:listSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listSKUs:1/>*/

        [HttpPost]
        [Route("listSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "listSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_Datasource")]
        public JsonResult listSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_DatasourceAggregators")]
        public JsonResult listSKUs_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Item>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:ddlSKUs:1/>*/
        /*<DataSourceFilter:ddlSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ddlSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedSuppliers = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = DSS1_RetailerDriverStockOptimisation.BO.ItemExtensions.ItemsInSelectedForecast(@model.SelectedForecast).AsQueryable();
            if ((selectedSuppliers.Count() == 0))
            {
                return __items.Where(@this => true);
            }
            return __items.Where(@this => selectedSuppliers.Contains((@this.Supplier.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:ddlSKUs:1/>*/

        [HttpPost]
        [Route("ddlSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "FilteredItems", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ddlSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new FilteredItems_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "ddlSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ddlSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "FilteredItems", ClaimType = ClaimTypes.Dataset)]
        [Route("ddlSKUs_Datasource")]
        public JsonResult ddlSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new FilteredItems_ItemDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DropdownBox:1/>*/

        /*<Datasource:lstOrderForecasts:1/>*/
        /*<DataSourceFilter:lstOrderForecasts:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_lstOrderForecasts_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_lstOrderForecasts_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_lstOrderForecasts_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:lstOrderForecasts:1/>*/

        [HttpPost]
        [Route("lstOrderForecasts_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult lstOrderForecasts_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "lstOrderForecasts");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:lstOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("lstOrderForecasts_Datasource")]
        public JsonResult lstOrderForecasts_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:lstOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("lstOrderForecasts_DatasourceAggregators")]
        public JsonResult lstOrderForecasts_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("StartDate", "dd/MM/yy");
            formattings.Add("EndDate", "d/MM/yyyy");
            formattings.Add("CreatedOn", "d-MMM-yyyy H:mm");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:chartOrderForecast:1/>*/
        /*<DataSourceFilter:chartOrderForecast:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartOrderForecast_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartOrderForecast_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartOrderForecast_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, null, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartOrderForecast:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        [Route("chartOrderForecast_Datasource")]
        public JsonResult chartOrderForecast_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartOrderForecast_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "supplierstock", "Supplier Stock" }, { "orderquantity", "Order Forecast" }, { "realorderquantity", "Past Orders" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new ForecastVS_StatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.SupplierStock, _dto?.OrderQuantity, _dto?.RealOrderQuantity }, new List<object> { "Supplier Stock", "Order Forecast", "Past Orders" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartStockLevels:1/>*/
        /*<DataSourceFilter:chartStockLevels:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartStockLevels_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevels_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartStockLevels_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, null, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartStockLevels:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevels_Datasource")]
        public JsonResult chartStockLevels_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevels_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "stockonhand", "Current Stock" }, { "orderquantity", "Orders" }, { "supplierstock", "Supplier Stock" }, { "salesquantity", "Sales" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new StockDataSet_StatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.StockOnHand, _dto?.OrderQuantity, _dto?.SupplierStock, _dto?.SalesQuantity }, new List<object> { "Current Stock", "Orders", "Supplier Stock", "Sales" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OptionButton:1/>*/

        /*<Datasource:listOrderForecastDetails:1/>*/
        /*<DataSourceFilter:listOrderForecastDetails:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_listOrderForecastDetails_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listOrderForecastDetails_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Status != null ? @this.Status : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_listOrderForecastDetails_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedBUs = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<int?> selectedCategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<int?> selectedSubCategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<string> selectedSKUs = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList();
            System.Collections.Generic.List<int?> selectedBaseUnits = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<int?> selectedSuppliers = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList();
            System.Collections.Generic.List<int?> selectedWarehouses = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>().AsQueryable();
            if (@model.ShowAlerts && ((@model.ShowRecommendations) == false))
            {
                var _var0 = @model.SelectedForecast?.Id;
                var _var1 = selectedBUs.Count();
                var _var2 = selectedCategories.Count();
                var _var3 = selectedSubCategories.Count();
                var _var4 = selectedBaseUnits.Count();
                var _var5 = selectedSKUs.Count();
                var _var6 = selectedSuppliers.Count();
                var _var7 = selectedWarehouses.Count();
                return __items.Where(@this => @this.OrderForecast.Id == _var0 && (_var1 == 0 || selectedBUs.Contains((@this.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (_var2 == 0 || selectedCategories.Contains((@this.Item.Category.Id).GetValueOrDefault(0))) && (_var3 == 0 || selectedSubCategories.Contains((@this.Item.SubCategory.Id).GetValueOrDefault(0))) && (_var4 == 0 || selectedBaseUnits.Contains((@this.Item.BaseUnit.Id).GetValueOrDefault(0))) && (_var5 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var6 == 0 || selectedSuppliers.Contains((@this.Item.Supplier.Id).GetValueOrDefault(0))) && (_var7 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))) && (@this.Notification.Message == "Low Stock") && (@this.Status == "Answered" || @this.Notification.CreatedBy == "System"));
            }
            else if (@model.ShowRecommendations && ((@model.ShowAlerts) == false))
            {
                var _var8 = @model.SelectedForecast?.Id;
                var _var9 = selectedBUs.Count();
                var _var10 = selectedCategories.Count();
                var _var11 = selectedSubCategories.Count();
                var _var12 = selectedBaseUnits.Count();
                var _var13 = selectedSKUs.Count();
                var _var14 = selectedSuppliers.Count();
                var _var15 = selectedWarehouses.Count();
                return __items.Where(@this => @this.OrderForecast.Id == _var8 && (_var9 == 0 || selectedBUs.Contains((@this.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (_var10 == 0 || selectedCategories.Contains((@this.Item.Category.Id).GetValueOrDefault(0))) && (_var11 == 0 || selectedSubCategories.Contains((@this.Item.SubCategory.Id).GetValueOrDefault(0))) && (_var12 == 0 || selectedBaseUnits.Contains((@this.Item.BaseUnit.Id).GetValueOrDefault(0))) && (_var13 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var14 == 0 || selectedSuppliers.Contains((@this.Item.Supplier.Id).GetValueOrDefault(0))) && (_var15 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))) && (@this.Notification.Message == "Excess Stock") && @this.Status == "Answered");
            }
            else
            {
                var _var16 = @model.SelectedForecast?.Id;
                var _var17 = selectedBUs.Count();
                var _var18 = selectedCategories.Count();
                var _var19 = selectedSubCategories.Count();
                var _var20 = selectedBaseUnits.Count();
                var _var21 = selectedSKUs.Count();
                var _var22 = selectedSuppliers.Count();
                var _var23 = selectedWarehouses.Count();
                return __items.Where(@this => @this.OrderForecast.Id == _var16 && (_var17 == 0 || selectedBUs.Contains((@this.Item.BusinessUnit.Id).GetValueOrDefault(0))) && (_var18 == 0 || selectedCategories.Contains((@this.Item.Category.Id).GetValueOrDefault(0))) && (_var19 == 0 || selectedSubCategories.Contains((@this.Item.SubCategory.Id).GetValueOrDefault(0))) && (_var20 == 0 || selectedBaseUnits.Contains((@this.Item.BaseUnit.Id).GetValueOrDefault(0))) && (_var21 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var22 == 0 || selectedSuppliers.Contains((@this.Item.Supplier.Id).GetValueOrDefault(0))) && (_var23 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))));
            }
        }


        /*<DataSourceGetFullRecordset:listOrderForecastDetails:1/>*/

        [HttpPost]
        [Route("listOrderForecastDetails_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listOrderForecastDetails_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listOrderForecastDetails");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listOrderForecastDetails:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecastDetails_Datasource")]
        public JsonResult listOrderForecastDetails_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
                response.Groups = groups;
                Evaluate_listOrderForecastDetails_ConditionalFormattings(items.ToList(), response);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
                Evaluate_listOrderForecastDetails_ConditionalFormattings(items.ToList(), response);
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void Evaluate_listOrderForecastDetails_ConditionalFormattings(List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> items, ListResponse response)
        {
            response.RuleEvaluations = new List<ListRuleEvaluation>();
            foreach (var item in items)
            {
                response.RuleEvaluations.Add(ApplyRecommendationColorConditional(item));
                response.RuleEvaluations.Add(ApplyAlertColorFromSystemConditional(item));
                response.RuleEvaluations.Add(ApplyGerneratedAlertColorConditional(item));
                response.RuleEvaluations.Add(ApplyAlertColorConditional(item));
                response.RuleEvaluations.Add(HideRowIfNotAnsweredConditional(item));
                response.RuleEvaluations.Add(HideListColumnsConditional(item));
            }
        }

        /*<DataSourceAggregators:listOrderForecastDetails:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecastDetails_DatasourceAggregators")]
        public JsonResult listOrderForecastDetails_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("RecommendedOrderDate", "d/MM/yyyy");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:Table1:1/>*/
        /*<DataSourceFilter:Table1:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_Table1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_Table1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:Table1:1/>*/

        [HttpPost]
        [Route("Table1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Comments", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Comments_CommentDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Table1");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Comments", ClaimType = ClaimTypes.Dataset)]
        [Route("Table1_Datasource")]
        public JsonResult Table1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new Comments_CommentDTO(i, true)).ToList();
            CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Comments", response.Data);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Table2:1/>*/
        /*<DataSourceFilter:Table2:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> Get_Table2_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table2_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> Get_Table2_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.ItemsInSelectedForecast?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:Table2:1/>*/

        [HttpPost]
        [Route("Table2_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedForecastItems", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table2_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table2_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectedForecastItems_ItemParameterDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Table2");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table2:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedForecastItems", ClaimType = ClaimTypes.Dataset)]
        [Route("Table2_Datasource")]
        public JsonResult Table2_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table2_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table2_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table2_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table2_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new SelectedForecastItems_ItemParameterDTO(i, true)).ToList();
            CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SelectedForecastItems", response.Data);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_BusinessUnitDataSet:1/>*/
        /*<DataSourceFilter:StockManagerView_BusinessUnitDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_StockManagerView_BusinessUnitDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_BusinessUnitDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_StockManagerView_BusinessUnitDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [Route("StockManagerView_BusinessUnitDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_BusinessUnitDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_BusinessUnitDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_BusinessUnitDataSet_Datasource")]
        public JsonResult StockManagerView_BusinessUnitDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_BusinessUnitDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_OrderForecastsDS:1/>*/
        /*<DataSourceFilter:StockManagerView_OrderForecastsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_StockManagerView_OrderForecastsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_OrderForecastsDS_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_StockManagerView_OrderForecastsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_OrderForecastsDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_OrderForecastsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_OrderForecastsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_OrderForecastsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_OrderForecastsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_OrderForecastsDS_Datasource")]
        public JsonResult StockManagerView_OrderForecastsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_OrderForecastsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_ForecastVS:1/>*/
        /*<DataSourceFilter:StockManagerView_ForecastVS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_StockManagerView_ForecastVS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_ForecastVS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_StockManagerView_ForecastVS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, null, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_ForecastVS:1/>*/

        [HttpPost]
        [Route("StockManagerView_ForecastVS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_ForecastVS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_ForecastVS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ForecastVS_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_ForecastVS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_ForecastVS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_ForecastVS_Datasource")]
        public JsonResult StockManagerView_ForecastVS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_ForecastVS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ForecastVS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ForecastVS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ForecastVS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_StockDataSet:1/>*/
        /*<DataSourceFilter:StockManagerView_StockDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_StockManagerView_StockDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_StockDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_StockManagerView_StockDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, null, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_StockDataSet:1/>*/

        [HttpPost]
        [Route("StockManagerView_StockDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_StockDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_StockDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new StockDataSet_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_StockDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_StockDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_StockDataSet_Datasource")]
        public JsonResult StockManagerView_StockDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_StockDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_StockDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_StockDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_StockDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_NotificationsDS:1/>*/
        /*<DataSourceFilter:StockManagerView_NotificationsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_StockManagerView_NotificationsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_NotificationsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_StockManagerView_NotificationsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_NotificationsDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_NotificationsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_NotificationsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new NotificationsDS_NotificationDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_NotificationsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_NotificationsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_NotificationsDS_Datasource")]
        public JsonResult StockManagerView_NotificationsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_NotificationsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_NotificationsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_NotificationsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_AllSubcategoriesDS:1/>*/
        /*<DataSourceFilter:StockManagerView_AllSubcategoriesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_StockManagerView_AllSubcategoriesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_AllSubcategoriesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_StockManagerView_AllSubcategoriesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_AllSubcategoriesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_AllSubcategoriesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_AllSubcategoriesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_AllSubcategoriesDS_Datasource")]
        public JsonResult StockManagerView_AllSubcategoriesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_AllSubcategoriesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_ItemsVMDS:1/>*/
        /*<DataSourceFilter:StockManagerView_ItemsVMDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_StockManagerView_ItemsVMDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_ItemsVMDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_StockManagerView_ItemsVMDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_ItemsVMDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_ItemsVMDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_ItemsVMDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "StockManagerView_ItemsVMDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_ItemsVMDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_ItemsVMDS_Datasource")]
        public JsonResult StockManagerView_ItemsVMDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ItemsVMDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ItemsVMDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_ItemsVMDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_SuppliersDS:1/>*/
        /*<DataSourceFilter:StockManagerView_SuppliersDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_StockManagerView_SuppliersDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_SuppliersDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_StockManagerView_SuppliersDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_SuppliersDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_SuppliersDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_SuppliersDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_SuppliersDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_SuppliersDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_SuppliersDS_Datasource")]
        public JsonResult StockManagerView_SuppliersDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SuppliersDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SuppliersDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SuppliersDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_WarehousesDS:1/>*/
        /*<DataSourceFilter:StockManagerView_WarehousesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_StockManagerView_WarehousesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_WarehousesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_StockManagerView_WarehousesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_WarehousesDS:1/>*/

        [HttpPost]
        [Route("StockManagerView_WarehousesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_WarehousesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_WarehousesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_WarehousesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_WarehousesDS_Datasource")]
        public JsonResult StockManagerView_WarehousesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_WarehousesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_WarehousesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_WarehousesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_Comments:1/>*/
        /*<DataSourceFilter:StockManagerView_Comments:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_StockManagerView_Comments_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_Comments_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_StockManagerView_Comments_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_Comments:1/>*/

        [HttpPost]
        [Route("StockManagerView_Comments_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Comments", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_Comments_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_Comments_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Comments_CommentDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_Comments");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_Comments:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Comments", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_Comments_Datasource")]
        public JsonResult StockManagerView_Comments_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_Comments_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_Comments_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_Comments_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_Comments_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Comment>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:StockManagerView_SelectedForecastItems:1/>*/
        /*<DataSourceFilter:StockManagerView_SelectedForecastItems:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> Get_StockManagerView_SelectedForecastItems_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_StockManagerView_SelectedForecastItems_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter> Get_StockManagerView_SelectedForecastItems_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.ItemsInSelectedForecast?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:StockManagerView_SelectedForecastItems:1/>*/

        [HttpPost]
        [Route("StockManagerView_SelectedForecastItems_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedForecastItems", ClaimType = ClaimTypes.Dataset)]
        public JsonResult StockManagerView_SelectedForecastItems_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_StockManagerView_SelectedForecastItems_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectedForecastItems_ItemParameterDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(StockManagerViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "StockManagerView_SelectedForecastItems");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:StockManagerView_SelectedForecastItems:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedForecastItems", ClaimType = ClaimTypes.Dataset)]
        [Route("StockManagerView_SelectedForecastItems_Datasource")]
        public JsonResult StockManagerView_SelectedForecastItems_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_StockManagerView_SelectedForecastItems_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SelectedForecastItems_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SelectedForecastItems_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_StockManagerView_SelectedForecastItems_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.ItemParameter>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        /*<CondionalFormating:ApplyRecommendationColorConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyRecommendationColorConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyRecommendationColorConditional:2/>*/
                return parents0?.Notification?.Message == "Excess Stock" && parents0?.Status == "Answered" && parents0?.Notification?.CreatedBy != "System";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyRecommendationColorConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        /*<CondionalFormating:ApplyAlertColorFromSystemConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyAlertColorFromSystemConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyAlertColorFromSystemConditional:2/>*/
                return parents0?.Notification?.Message == "Low Stock" && parents0?.Status == "Pending Answer" && parents0?.Notification?.CreatedBy == "System";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyAlertColorFromSystemConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        /*<CondionalFormating:ApplyGerneratedAlertColorConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyGerneratedAlertColorConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyGerneratedAlertColorConditional:2/>*/
                return parents0?.Notification?.Message == "Low Stock" && (parents0?.Status == "New" || parents0?.Status == null) && parents0?.Notification?.CreatedBy == "System";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyGerneratedAlertColorConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        /*<CondionalFormating:ApplyAlertColorConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyAlertColorConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyAlertColorConditional:2/>*/
                return parents0?.Notification?.Message == "Low Stock" && parents0?.Status == "Answered" && parents0?.Notification?.CreatedBy != "System";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyAlertColorConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        /*<CondionalFormating:HideRowIfNotAnsweredConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad)]
        public ListRuleEvaluation HideRowIfNotAnsweredConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:HideRowIfNotAnsweredConditional:2/>*/
                return parents0?.Status == "Pending Answer" && parents0?.Notification?.CreatedBy != "System";
            };
            return new ListRuleEvaluation
            {
                RuleName = "HideRowIfNotAnsweredConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = false,
                ColumnNames = new List<string>() { "SupplierAvailableQuantity", "Notification.Diff", "SupplierCanDeliver" },
            };
        }


        /*<CondionalFormating:HideListColumnsConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation HideListColumnsConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:HideListColumnsConditional:2/>*/
                return parents0?.Status == "New" || parents0?.Status == null;
            };
            return new ListRuleEvaluation
            {
                RuleName = "HideListColumnsConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = false,
                ColumnNames = new List<string>() { "Notification.Diff", "SupplierCanDeliver", "SupplierAvailableQuantity" },
            };
        }


        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new StockManagerViewViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("StockManagerView");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: StockManagerView, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
