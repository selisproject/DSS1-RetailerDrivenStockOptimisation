// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.AgreementForm
{

    [RoutePrefix("AgreementForm")]
    public class AgreementFormController : ControllerBase<AgreementFormViewModel, AgreementFormViewModelDTO>
    {

        /*<Form:AgreementForm:0/>*/
        public AgreementFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(AgreementFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(AgreementFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("AgreementForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("AgreementForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("AgreementForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(AgreementFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("AgreementForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddAgreement")]
        public ActionResult AddAgreement()

        {
            @model = new AgreementFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_AgreementForm"] = "AddAgreement";
            FileHelper.PendingUploadInstance.Clear("AgreementForm");
            FileHelper.PendingDownloadInstance.Clear("AgreementForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddAgreement")]
        public ActionResult _API_AddAgreement()

        {
            @model = new AgreementFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_AgreementForm"] = "AddAgreement";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("AgreementForm");
            FileHelper.PendingDownloadInstance.Clear("AgreementForm");
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddAgreement();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditAgreement/{*id:int?}")]
        public ActionResult EditAgreement(int? id)

        {
            @model = new AgreementFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_AgreementForm"] = "EditAgreement";
            FileHelper.PendingUploadInstance.Clear("AgreementForm");
            FileHelper.PendingDownloadInstance.Clear("AgreementForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditAgreement/{*id:int?}")]
        public ActionResult _API_EditAgreement(int? id)

        {
            @model = new AgreementFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_AgreementForm"] = "EditAgreement";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("AgreementForm");
            FileHelper.PendingDownloadInstance.Clear("AgreementForm");
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditAgreement(id);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveAgreement")]
        public ActionResult SaveAgreement()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("AgreementForm", @model);
            var redirectInfo = ExecuteSaveAgreement();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="DeleteAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteAgreement")]
        public ActionResult DeleteAgreement()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("AgreementForm", @model);
            var redirectInfo = ExecuteDeleteAgreement();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddAgreement:1/>*/
        public ActionResult ExecuteAddAgreement()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:EditAgreement:1/>*/
        public ActionResult ExecuteEditAgreement(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Agreement =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(id);
            @model.Title = "";
            @model.DeliverySchedules = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAll<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>().ToList();
            var _var0 = @model.Agreement?.Supplier?.Id;
            @model.Items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Item>((a) => a.Supplier.Id == _var0).ToList();
            var _var1 = @model.Agreement?.Supplier?.Id;
            @model.InventoryItems = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>((a) => a.Item.Supplier.Id == _var1).ToList();
            return _result;
        }
        /*<ControllerActionImplementation:SaveAgreement:1/>*/
        public ActionResult ExecuteSaveAgreement()
        {
            ActionResult _result = null;
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(@model.Agreement);
            @model.Title = BaseViewPage<string>.GetResourceValue("AgreementForm", "RES_PAGETITLE_SaveAgreement").ToString();
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Agreement was saved successfully.", MessageType.Success, (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                          System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                          "/AgreementList/Retrieve");
            return _result;
        }
        /*<ControllerActionImplementation:DeleteAgreement:1/>*/
        public ActionResult ExecuteDeleteAgreement()
        {
            ActionResult _result = null;
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteAgreement(@model.Agreement);
            @model.Title = BaseViewPage<string>.GetResourceValue("AgreementForm", "RES_PAGETITLE_DeleteAgreement").ToString();
            _result = CloseForm();
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:txtStatus:1/>*/

        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileAttachment_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as AgreementFormViewModel;
                    return  Path.GetFileName(@model.Agreement.AgreementDocument);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("AgreementForm", "FileAttachment", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("AgreementForm", Get_FileAttachment_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("AgreementForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.Agreement.AgreementDocument
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "AgreementForm", "FileAttachment", indexes);
            pendingFile.GetRelativePath = Get_FileAttachment_RelativePath;
            @model.Agreement.AgreementDocument = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachment_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("AgreementForm", "FileAttachment", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("AgreementForm", "FileAttachment", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.Agreement.AgreementDocument = null;
            IsDirty = true;
            viewDTO.Model = new AgreementFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new AgreementFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("AgreementForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: AgreementForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
