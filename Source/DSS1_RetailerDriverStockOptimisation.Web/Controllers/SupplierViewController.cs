// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.SupplierView
{

    [RoutePrefix("SupplierView")]
    public class SupplierViewController : ControllerBase<SupplierViewViewModel, SupplierViewViewModelDTO>
    {

        /*<Form:SupplierView:0/>*/
        public SupplierViewController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(SupplierViewController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(SupplierViewViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(SupplierViewViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("SupplierView", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "SupplierView");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "SupplierView");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "SupplierView");
        }



        #region Controller Actions
        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new SupplierViewViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierView"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new SupplierViewViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierView"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSubcategory", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSubcategory")]
        public ActionResult AddSubcategory()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSubcategory();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SelectForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SelectForecast")]
        public ActionResult SelectForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSelectForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RecalculateForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RecalculateForecast")]
        public ActionResult RecalculateForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteRecalculateForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RefreshFilters", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RefreshFilters")]
        public ActionResult RefreshFilters(string caller)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                caller = DeserializeViewModelProperty<string>(_data["caller"] as Newtonsoft.Json.Linq.JValue);
            }
            var redirectInfo = ExecuteRefreshFilters(caller);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSKU")]
        public ActionResult AddSKU()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSKU();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CollapseLeft", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CollapseLeft")]
        public ActionResult CollapseLeft()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCollapseLeft();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ReplyToOrderForecast", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ReplyToOrderForecast")]
        public ActionResult ReplyToOrderForecast()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteReplyToOrderForecast();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SendForecastToSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SendForecastToSupplier")]
        public ActionResult SendForecastToSupplier()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSendForecastToSupplier();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AcceptAllOrderFDetails", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AcceptAllOrderFDetails")]
        public ActionResult AcceptAllOrderFDetails()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAcceptAllOrderFDetails();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ListUpdate", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ListUpdate")]
        public ActionResult ListUpdate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                ofDetail = DeserializeViewModelProperty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails, OrderForecastDetailsDTO>(_data["ofDetail"].ToString());
            }
            var redirectInfo = ExecuteListUpdate(ofDetail);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ShowRecommendations", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ShowRecommendations")]
        public ActionResult ShowRecommendations()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteShowRecommendations();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ShowAll", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ShowAll")]
        public ActionResult ShowAll()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteShowAll();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ShowAlerts", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ShowAlerts")]
        public ActionResult ShowAlerts()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteShowAlerts();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="HandleRadioButton", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("HandleRadioButton")]
        public ActionResult HandleRadioButton()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteHandleRadioButton();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ModalNo", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ModalNo")]
        public ActionResult ModalNo()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteModalNo();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ModalNoExcessStock", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ModalNoExcessStock")]
        public ActionResult ModalNoExcessStock()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteModalNoExcessStock();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ResolveOfDetails", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ResolveOfDetails")]
        public ActionResult ResolveOfDetails(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                ofDetail = DeserializeViewModelProperty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails, OrderForecastDetailsDTO>(_data["ofDetail"].ToString());
            }
            var redirectInfo = ExecuteResolveOfDetails(ofDetail);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.CollapseLeftColumn = true;
            DSS1_RetailerDriverStockOptimisation.BO.Contact loggedContact = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Contact>((c) => c.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Current username is: " + zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
            if ((loggedContact != null))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "logged Contact: " + (loggedContact?.Company?.Name ?? ""));
                var _var0 = loggedContact?.Company?.Name;
                @model.Supplier = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>((s) => s.Name == _var0)?.FirstOrDefault();
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier is: " + (@model.Supplier?.Name ?? ""));
            }
            @model.FromDate = new DateTime(2018, 2, 11, 0, 0, 0, DateTimeKind.Utc);
            @model.ToDate = new DateTime(2018, 12, 30, 0, 0, 0, DateTimeKind.Utc);
            @model.FilterList = "All";
            return _result;
        }
        /*<ControllerActionImplementation:AddSubcategory:1/>*/
        public ActionResult ExecuteAddSubcategory()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:SelectForecast:1/>*/
        public ActionResult ExecuteSelectForecast()
        {
            ActionResult _result = null;
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast selectedForecast = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>.GetSelectedItems(Get_lstOrderForecasts_DatasourceQueryable(null, false), @model.lstOrderForecastsSelectedItems).FirstOrDefault();
            if ((selectedForecast == null))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Selected Forecast is null");
                @model.SelectedForecast = null;
                @model.SuppliersInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> {  } .ToList();
                @model.ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Item> {  } .ToList();
                @model.SelectedOrderFDetails = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> {  } .ToList();
            }
            else
            {
                @model.SelectedForecast =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>((selectedForecast?.Id ?? 0));
                var _var0 = selectedForecast?.Id;
                var _var1 = @model.Supplier?.Id;
                @model.SelectedOrderFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.OrderForecast.Id == _var0 && a.Item.Supplier.Id == _var1).ToList();
                var _var2 = selectedForecast?.Id;
                @model.SupplierParameters = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>((a) => a.OrderForecast.Id == _var2).ToList();
                var _var3 = selectedForecast?.Id;
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter> supParameters = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>((a) => a.OrderForecast.Id == _var3);
                var _var4 = @model.Supplier?.Id;
                @model.RecommendationsCount = (@model.SelectedOrderFDetails?.Count((a) => a.Notification != null && a.Notification.Message == "Excess Stock" && a.Notification.Item.Supplier.Id == _var4) ?? 0);
                var _var5 = @model.Supplier?.Code;
                DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter supParameter = supParameters?.Where((a) => a.Agreement.Supplier.Code == _var5).FirstOrDefault();
                var _var6 = @model.Supplier?.Id;
                @model.AlertsCount = (@model.SelectedOrderFDetails?.Count((a) => a.Notification != null && a.Notification.Message == "Low Stock" && a.Notification.Item.Supplier.Id == _var6) ?? 0);
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Item> items = @model.SelectedForecast?.OrderForecastDetails?.Select((a) => a.Item).ToList().Distinct().ToList();
                @model.ItemsInSelectedForecast = items.ToList();
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Supplier> suppliers = items?.Select((a) => a.Supplier).ToList().Distinct().ToList();
                System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> supplierAgreements = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Agreement>((a) => suppliers.Contains(a.Supplier));
                @model.SuppliersInSelectedForecast = supplierAgreements.ToList();
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            return _result;
        }
        /*<ControllerActionImplementation:RecalculateForecast:1/>*/
        public ActionResult ExecuteRecalculateForecast()
        {
            ActionResult _result = null;
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to recalculate!", MessageType.Warning);
                return null;
            }
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast newForecast = @model.SelectedForecast?.CopyOrderForecastToNew();
            bool enableAnalyticDebug = true;
            bool success = false;
            if ((success))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Success");
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            }
            else
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Failure", MessageType.Error);
            }
            return _result;
        }
        /*<ControllerActionImplementation:RefreshFilters:1/>*/
        public ActionResult ExecuteRefreshFilters(string caller)
        {
            ActionResult _result = null;
            if ((caller == "BusinessUnits"))
            {
            }
            if ((caller == "Categories"))
            {
            }
            if ((caller == "Subcategories"))
            {
            }
            if ((caller == "SKU"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSKUs");
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            return _result;
        }
        /*<ControllerActionImplementation:AddSKU:1/>*/
        public ActionResult ExecuteAddSKU()
        {
            ActionResult _result = null;
            @model.SelectedSKUs?.Add(@model.SelectedSKU);
            @model.SelectedSKU = null;
            _result = this.ExecuteRefreshFilters(caller : "SKU");
            return _result;
        }
        /*<ControllerActionImplementation:CollapseLeft:1/>*/
        public ActionResult ExecuteCollapseLeft()
        {
            ActionResult _result = null;
            if (@model.CollapseLeftColumn)
            {
                @model.CollapseLeftColumn = false;
            }
            else
            {
                @model.CollapseLeftColumn = true;
            }
            ClientCommand(ClientCommands.DATALIST_UPDATE_SIZE, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ReplyToOrderForecast:1/>*/
        public ActionResult ExecuteReplyToOrderForecast()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Notification> notifToDelete = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Notification>((a) => a.OrderForecastDetails == null);
            foreach (var notif in notifToDelete ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Notification>())
            {
                try
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "to delete: " + (notif?.Id ?? 0));
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteNotification(notif);
                }
                catch (System.Exception x)
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, x);
                    ClientCommand(ClientCommands.SHOW_MESSAGE, "Failed to send reply", MessageType.Warning);
                }
            }
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to reply to!", MessageType.Warning);
                return null;
            }
            if ((@model.SelectedForecast?.Status != "Pending Supplier Answer"))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "You can only send 'Pending' Forecasts!", MessageType.Warning);
                return null;
            }
            @model.SelectedForecast.State = "Replied by " + (@model.Supplier?.Name ?? "");
            DSS1_RetailerDriverStockOptimisation.BO.Agreement supAgreement = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Agreement>((a) => a.Supplier.Id == @model.Supplier.Id)?.FirstOrDefault();
            var _var0 = @model.SelectedForecast?.Id;
            var _var1 = supAgreement?.Id;
            DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter supParameter = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>((a) => a.OrderForecast.Id == _var0 && a.Agreement.Id == _var1)?.FirstOrDefault();
            supParameter.HasReplied = true;
            supParameter.SharesExcessStock = true;
            var _var2 = @model.SelectedForecast?.Id;
            var _var3 = @model.Supplier?.Id;
            @model.SelectedOrderFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.OrderForecast.Id == _var2 && a.Item.Supplier.Id == _var3).ToList();
            foreach (var oFDetail in @model.SelectedOrderFDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                if (oFDetail?.Notification != null && oFDetail?.Notification?.Message == "Low Stock")
                {
                    oFDetail.SupplierCanDeliver = false;
                }
                else
                {
                    oFDetail.SupplierCanDeliver = true;
                }
                oFDetail.Status = "Answered";
            }
            var _var4 = @model.Supplier?.Id;
            @model.AlertsCount = (@model.SelectedOrderFDetails?.Count((a) => a.Notification != null && a.Notification.Message == "Low Stock" && a.Notification.Item.Supplier.Id == _var4) ?? 0);
            if (@model.AlertsCount == 0)
            {
                supParameter.SupplierCanDeliverWholeForecast = true;
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(supParameter);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier shares excess stock.");
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Notification> updatedNotifications = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Notification>((a) => a.OrderForecastDetails != null);
            var _var5 = @model.Supplier?.Id;
            System.Collections.Generic.List<DSS1_RetailerDriverStockOptimisation.BO.Notification> supplierAlerts = updatedNotifications?.Where((a) => a.Message == "Low Stock" && a.Item.Supplier.Id == _var5 && @model.SelectedOrderFDetails.Contains(a.OrderForecastDetails)).ToList();
            foreach (var notif in supplierAlerts ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.Notification>())
            {
                DSS1_RetailerDriverStockOptimisation.BO.AppNotificationExtensions.CreateAppNotification((notif?.Item?.SKU ?? ""), (notif?.Diff ?? 0), "Sonae", notif?.OrderForecastDetails);
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
            @model.SelectedForecast = null;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "lstOrderForecasts");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevels");
            ClientCommand(ClientCommands.HIDE_MODAL, $"ModalExcessStock");
            @model.SupplierReplied = true;
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Your reply was sent successfully.");
            return _result;
        }
        /*<ControllerActionImplementation:SendForecastToSupplier:1/>*/
        public ActionResult ExecuteSendForecastToSupplier()
        {
            ActionResult _result = null;
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to send!", MessageType.Warning);
                return null;
            }
            if ((@model.SelectedForecast?.Status != "New"))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "You can only send 'New' Forecasts!", MessageType.Warning);
                return null;
            }
            @model.SelectedForecast.Status = "Pending Supplier Answer";
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "lstOrderForecasts");
            return _result;
        }
        /*<ControllerActionImplementation:AcceptAllOrderFDetails:1/>*/
        public ActionResult ExecuteAcceptAllOrderFDetails()
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Accepting All.");
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast selectedForecast = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>.GetSelectedItems(Get_lstOrderForecasts_DatasourceQueryable(null, false), @model.lstOrderForecastsSelectedItems).FirstOrDefault();
            if ((selectedForecast == null))
            {
                @model.SelectedForecast = null;
                @model.SuppliersInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> {  } .ToList();
                @model.ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Item> {  } .ToList();
                @model.SelectedOrderFDetails = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> {  } .ToList();
            }
            else
            {
                @model.SelectedForecast =  new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>((selectedForecast?.Id ?? 0));
                var _var0 = selectedForecast?.Id;
                var _var1 = @model.Supplier?.Id;
                @model.SelectedOrderFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.OrderForecast.Id == _var0 && a.Item.Supplier.Id == _var1).ToList();
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "*** 1 " + (@model.SelectedOrderFDetails?.Count() ?? 0));
                var _var2 = @model.Supplier?.Id;
                @model.AlertsCount = (@model.SelectedOrderFDetails?.Count((a) => a.Notification != null && a.Notification.Message == "Low Stock" && a.Item.Supplier.Id == _var2) ?? 0);
                if (@model.AlertsCount > 0)
                {
                    @model.SelectedOrderFDetails = @model.SelectedOrderFDetails?.Where((a) => a.Notification == null).ToList().ToList();
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "*** 2 " + (@model.SelectedOrderFDetails?.Count() ?? 0));
                }
                foreach (var orderFDetail in @model.SelectedOrderFDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
                {
                    if (((new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Notification>((a) => a.OrderForecastDetails.Id == orderFDetail.Id)?.Any() ?? false) || orderFDetail?.SupplierAvailableQuantity != null))
                    {
                        if ((orderFDetail?.SupplierAvailableQuantity ?? 0) >= (int)((orderFDetail?.Quantity ?? 0)))
                        {
                            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, (orderFDetail?.SupplierAvailableQuantity ?? 0) + " #######");
                            orderFDetail.SupplierCanDeliver = true;
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        orderFDetail.SupplierCanDeliver = true;
                        orderFDetail.SupplierAvailableQuantity = (int)((orderFDetail?.Quantity ?? 0));
                    }
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(orderFDetail);
                }
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
                if ((@model.AlertsCount > 0))
                {
                    ClientCommand(ClientCommands.SHOW_MESSAGE, "You accepted all forecasted Orders except for the alerts.", MessageType.Warning);
                }
                else
                {
                    ClientCommand(ClientCommands.SHOW_MESSAGE, "You accepted all forecasted Orders.", MessageType.Success);
                }
            }
            return _result;
        }
        /*<ControllerActionImplementation:ListUpdate:1/>*/
        public ActionResult ExecuteListUpdate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier capacity is: " + (ofDetail?.SupplierAvailableQuantity ?? 0));
            if (((ofDetail?.SupplierAvailableQuantity ?? 0) >= (ofDetail?.Quantity ?? 0)))
            {
                ofDetail.SupplierCanDeliver = true;
            }
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) >= ((ofDetail?.Quantity ?? 0) + ((ofDetail?.Quantity ?? 0) * 0.5m)))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "New Recommendation");
                DSS1_RetailerDriverStockOptimisation.BO.Notification newNotification = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
                newNotification.Message = "Excess Stock";
                newNotification.SalesForecastDate = (ofDetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newNotification.Item = ofDetail?.Item;
                newNotification.OrderForecastDetails = ofDetail;
                newNotification.Diff = (ofDetail?.SupplierAvailableQuantity ?? 0) - (int)((ofDetail?.Quantity ?? 0));
                newNotification.TotalSupplierStock = (ofDetail?.SupplierAvailableQuantity ?? 0);
                newNotification.OrderForecastQuantity = (int)((ofDetail?.Quantity ?? 0));
                newNotification.Warehouse = ofDetail?.Warehouse;
                newNotification.CreatedBy = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
                ofDetail.SupplierCanDeliver = true;
                @model.Recommendations?.Add(newNotification);
            }
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) >= (ofDetail?.Quantity ?? 0))
            {
                if ((ofDetail?.Notification != null))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "...Deleting Alert ...");
                    ofDetail.SupplierCanDeliver = true;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteNotification(ofDetail?.Notification);
                }
            }
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) < (ofDetail?.Quantity ?? 0))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Creating alert...");
                DSS1_RetailerDriverStockOptimisation.BO.Notification newAlert = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
                newAlert.Message = "Low Stock";
                newAlert.SalesForecastDate = (ofDetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newAlert.TotalSupplierStock = (ofDetail?.SupplierAvailableQuantity ?? 0);
                newAlert.OrderForecastQuantity = (int)((ofDetail?.Quantity ?? 0));
                newAlert.Item = ofDetail?.Item;
                newAlert.OrderForecastDetails = ofDetail;
                newAlert.Diff = (((int)((ofDetail?.Quantity ?? 0))) - ((ofDetail?.SupplierAvailableQuantity ?? 0)));
                newAlert.Warehouse = ofDetail?.Warehouse;
                newAlert.CreatedBy = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
                ofDetail.SupplierCanDeliver = false;
                @model.Alerts?.Add(newAlert);
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ofDetail);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ShowRecommendations:1/>*/
        public ActionResult ExecuteShowRecommendations()
        {
            ActionResult _result = null;
            @model.ShowRecommendations = true;
            @model.ShowAlerts = false;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ShowAll:1/>*/
        public ActionResult ExecuteShowAll()
        {
            ActionResult _result = null;
            @model.ShowAlerts = true;
            @model.ShowRecommendations = true;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ShowAlerts:1/>*/
        public ActionResult ExecuteShowAlerts()
        {
            ActionResult _result = null;
            @model.ShowAlerts = true;
            @model.ShowRecommendations = false;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:HandleRadioButton:1/>*/
        public ActionResult ExecuteHandleRadioButton()
        {
            ActionResult _result = null;
            if (@model.FilterList == "Alerts")
            {
                @model.ShowAlerts = true;
                @model.ShowRecommendations = false;
            }
            else if (@model.FilterList == "Recommendations")
            {
                @model.ShowAlerts = false;
                @model.ShowRecommendations = true;
            }
            else
            {
                @model.ShowAlerts = true;
                @model.ShowRecommendations = true;
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        /*<ControllerActionImplementation:ModalNo:1/>*/
        public ActionResult ExecuteModalNo()
        {
            ActionResult _result = null;
            if ((@model.SelectedForecast == null))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Please select a Forecast to reply to!", MessageType.Warning);
                return null;
            }
            if ((@model.SelectedForecast?.Status != "Pending Supplier Answer"))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "You can only send 'Pending' Forecasts!", MessageType.Warning);
                return null;
            }
            @model.SelectedForecast.State = "Replied by " + (@model.Supplier?.Name ?? "");
            DSS1_RetailerDriverStockOptimisation.BO.Agreement supAgreement = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Agreement>((a) => a.Supplier.Id == @model.Supplier.Id)?.FirstOrDefault();
            var _var0 = @model.SelectedForecast?.Id;
            var _var1 = supAgreement?.Id;
            DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter supParameter = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>((a) => a.OrderForecast.Id == _var0 && a.Agreement.Id == _var1)?.FirstOrDefault();
            supParameter.HasReplied = true;
            supParameter.SharesExcessStock = false;
            var _var2 = @model.SelectedForecast?.Id;
            var _var3 = @model.Supplier?.Id;
            @model.SelectedOrderFDetails = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>((a) => a.OrderForecast.Id == _var2 && a.Item.Supplier.Id == _var3).ToList();
            foreach (var oFDetail in @model.SelectedOrderFDetails ?? Enumerable.Empty<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>())
            {
                if ((oFDetail?.Notification != null && oFDetail?.Notification?.Message == "Excess Stock"))
                {
                    oFDetail.SupplierAvailableQuantity = (int)((oFDetail?.Quantity ?? 0));
                }
                oFDetail.Status = "Answered";
                if ((oFDetail?.Notification != null && oFDetail?.Notification?.Message == "Excess Stock"))
                {
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteNotification(oFDetail?.Notification);
                }
                if ((oFDetail?.Notification != null && oFDetail?.Notification?.Message == "Low Stock"))
                {
                    oFDetail.SupplierCanDeliver = false;
                }
                else
                {
                    oFDetail.SupplierCanDeliver = true;
                }
            }
            var _var4 = @model.Supplier?.Id;
            @model.AlertsCount = (@model.SelectedOrderFDetails?.Count((a) => a.Notification != null && a.Notification.Message == "Low Stock" && a.Notification.Item.Supplier.Id == _var4) ?? 0);
            if (@model.AlertsCount == 0)
            {
                supParameter.SupplierCanDeliverWholeForecast = true;
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(supParameter);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier does not share excess stock.");
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(@model.SelectedForecast);
            ClientCommand(ClientCommands.HIDE_MODAL, $"ModalExcessStock");
            @model.SupplierReplied = true;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "lstOrderForecasts");
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Your reply was sent successfully.");
            return _result;
        }
        /*<ControllerActionImplementation:ModalNoExcessStock:1/>*/
        public ActionResult ExecuteModalNoExcessStock()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.HIDE_MODAL, $"ModalExcessStock");
            return _result;
        }
        /*<ControllerActionImplementation:ResolveOfDetails:1/>*/
        public ActionResult ExecuteResolveOfDetails(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails ofDetail)
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier capacity is: " + (ofDetail?.SupplierAvailableQuantity ?? 0));
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) >= ((ofDetail?.Quantity ?? 0) + ((ofDetail?.Quantity ?? 0) * 0.5m)))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "New Recommendation");
                DSS1_RetailerDriverStockOptimisation.BO.Notification newNotification = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
                newNotification.Message = "Excess Stock";
                newNotification.SalesForecastDate = (ofDetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newNotification.Item = ofDetail?.Item;
                newNotification.OrderForecastDetails = ofDetail;
                newNotification.Diff = (ofDetail?.SupplierAvailableQuantity ?? 0) - (int)((ofDetail?.Quantity ?? 0));
                newNotification.TotalSupplierStock = (ofDetail?.SupplierAvailableQuantity ?? 0);
                newNotification.OrderForecastQuantity = (int)((ofDetail?.Quantity ?? 0));
                newNotification.Warehouse = ofDetail?.Warehouse;
                newNotification.CreatedBy = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
                ofDetail.SupplierCanDeliver = true;
                @model.Recommendations?.Add(newNotification);
            }
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) >= (ofDetail?.Quantity ?? 0))
            {
                if ((ofDetail?.Notification != null))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "...Deleting Alert ...");
                    ofDetail.SupplierCanDeliver = true;
                    new DSS1_RetailerDriverStockOptimisation.DAL.Repository().DeleteNotification(ofDetail?.Notification);
                }
                ofDetail.SupplierCanDeliver = true;
            }
            if ((ofDetail?.SupplierAvailableQuantity ?? 0) < (ofDetail?.Quantity ?? 0))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierView",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Creating alert...");
                DSS1_RetailerDriverStockOptimisation.BO.Notification newAlert = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
                newAlert.Message = "Low Stock";
                newAlert.SalesForecastDate = (ofDetail?.RecommendedOrderDate ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                newAlert.TotalSupplierStock = (ofDetail?.SupplierAvailableQuantity ?? 0);
                newAlert.OrderForecastQuantity = (int)((ofDetail?.Quantity ?? 0));
                newAlert.Item = ofDetail?.Item;
                newAlert.OrderForecastDetails = ofDetail;
                newAlert.Diff = (((int)((ofDetail?.Quantity ?? 0))) - ((ofDetail?.SupplierAvailableQuantity ?? 0)));
                newAlert.Warehouse = ofDetail?.Warehouse;
                newAlert.CreatedBy = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
                ofDetail.SupplierCanDeliver = false;
                @model.Alerts?.Add(newAlert);
            }
            new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Save<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(ofDetail);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listOrderForecastDetails");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:listWarehouses:1/>*/
        /*<DataSourceFilter:listWarehouses:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listWarehouses_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listWarehouses:1/>*/

        [HttpPost]
        [Route("listWarehouses_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listWarehouses_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listWarehouses");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_Datasource")]
        public JsonResult listWarehouses_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_DatasourceAggregators")]
        public JsonResult listWarehouses_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listSKUs:1/>*/
        /*<DataSourceFilter:listSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listSKUs:1/>*/

        [HttpPost]
        [Route("listSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "listSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_Datasource")]
        public JsonResult listSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_DatasourceAggregators")]
        public JsonResult listSKUs_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Item>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:ddlSKUs:1/>*/
        /*<DataSourceFilter:ddlSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ddlSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            DSS1_RetailerDriverStockOptimisation.BO.Contact loggedContact = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Contact>((c) => c.UserName == _var0)?.FirstOrDefault();
            var _var1 = loggedContact?.Company?.Code;
            return __items.Where(@this => @this.Supplier.Code == _var1);
        }


        /*<DataSourceGetFullRecordset:ddlSKUs:1/>*/

        [HttpPost]
        [Route("ddlSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ddlSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "ddlSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ddlSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("ddlSKUs_Datasource")]
        public JsonResult ddlSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DropdownBox:1/>*/

        /*<Datasource:lstOrderForecasts:1/>*/
        /*<DataSourceFilter:lstOrderForecasts:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_lstOrderForecasts_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_lstOrderForecasts_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_lstOrderForecasts_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            var _var0 = (@model.Supplier?.Name ?? "");
            return __items.Where(@this => @this.Status == "Pending Supplier Answer" && @this.State != "Replied by " + _var0 && @this.State != "Answered by all Suppliers");
        }


        /*<DataSourceGetFullRecordset:lstOrderForecasts:1/>*/

        [HttpPost]
        [Route("lstOrderForecasts_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult lstOrderForecasts_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "lstOrderForecasts");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:lstOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("lstOrderForecasts_Datasource")]
        public JsonResult lstOrderForecasts_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_lstOrderForecasts_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:lstOrderForecasts:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("lstOrderForecasts_DatasourceAggregators")]
        public JsonResult lstOrderForecasts_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_lstOrderForecasts_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("StartDate", "dd/MM/yy");
            formattings.Add("EndDate", "d/MM/yyyy");
            formattings.Add("CreatedOn", "d-MMM-yyyy H:mm");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:chartOrderForecast:1/>*/
        /*<DataSourceFilter:chartOrderForecast:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartOrderForecast_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartOrderForecast_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartOrderForecast_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), null, null, null, null, null, @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            var _var0 = @model.Supplier;
            return __items.Where(@this => @this.Supplier != null && @this.Supplier == _var0);
        }


        /*<DataSourceEntryPoint:chartOrderForecast:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        [Route("chartOrderForecast_Datasource")]
        public JsonResult chartOrderForecast_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartOrderForecast_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "supplierstock", "Supplier Stock" }, { "orderquantity", "Order Forecast" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new ForecastVS_StatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.SupplierStock, _dto?.OrderQuantity }, new List<object> { "Supplier Stock", "Order Forecast" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartStockLevels:1/>*/
        /*<DataSourceFilter:chartStockLevels:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartStockLevels_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevels_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_chartStockLevels_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), null, null, null, null, null, @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            var _var0 = @model.Supplier;
            return __items.Where(@this => @this.Supplier != null && @this.Supplier == _var0);
        }


        /*<DataSourceEntryPoint:chartStockLevels:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevels_Datasource")]
        public JsonResult chartStockLevels_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevels_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevels_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "stockonhand", "Current Stock" }, { "orderquantity", "Orders" }, { "supplierstock", "Supplier Stock" }, { "salesquantity", "Sales" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new StockDataSet_StatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.OrderDateFormatted, new List<object> { _dto?.StockOnHand, _dto?.OrderQuantity, _dto?.SupplierStock, _dto?.SalesQuantity }, new List<object> { "Current Stock", "Orders", "Supplier Stock", "Sales" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OptionButton:1/>*/

        /*<Datasource:listOrderForecastDetails:1/>*/
        /*<DataSourceFilter:listOrderForecastDetails:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_listOrderForecastDetails_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listOrderForecastDetails_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_listOrderForecastDetails_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<string> selectedSKUs = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList();
            System.Collections.Generic.List<int?> selectedWarehouses = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>().AsQueryable();
            if (@model.ShowAlerts && ((@model.ShowRecommendations) == false))
            {
                var _var0 = @model.SelectedForecast?.Id;
                var _var1 = selectedSKUs.Count();
                var _var2 = selectedWarehouses.Count();
                var _var3 = @model.Supplier;
                return __items.Where(@this => @this.OrderForecast.Id == _var0 && (_var1 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var2 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))) && (@this.Item.Supplier == _var3) && (@this.Notification.Message == "Low Stock"));
            }
            else if (((@model.ShowAlerts) == false) && @model.ShowRecommendations)
            {
                var _var4 = @model.SelectedForecast?.Id;
                var _var5 = selectedSKUs.Count();
                var _var6 = selectedWarehouses.Count();
                var _var7 = @model.Supplier;
                return __items.Where(@this => @this.OrderForecast.Id == _var4 && (_var5 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var6 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))) && (@this.Item.Supplier == _var7) && (@this.Notification.Message == "Excess Stock"));
            }
            var _var8 = @model.SelectedForecast?.Id;
            var _var9 = selectedSKUs.Count();
            var _var10 = selectedWarehouses.Count();
            var _var11 = @model.Supplier;
            return __items.Where(@this => @this.OrderForecast.Id == _var8 && (_var9 == 0 || selectedSKUs.Contains(@this.Item.SKU)) && (_var10 == 0 || selectedWarehouses.Contains((@this.Warehouse.Id).GetValueOrDefault(0))) && (@this.Item.Supplier == _var11));
        }


        /*<DataSourceGetFullRecordset:listOrderForecastDetails:1/>*/

        [HttpPost]
        [Route("listOrderForecastDetails_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listOrderForecastDetails_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listOrderForecastDetails");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listOrderForecastDetails:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecastDetails_Datasource")]
        public JsonResult listOrderForecastDetails_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listOrderForecastDetails_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
                response.Groups = groups;
                Evaluate_listOrderForecastDetails_ConditionalFormattings(items.ToList(), response);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(i, true)).ToList();
                Evaluate_listOrderForecastDetails_ConditionalFormattings(items.ToList(), response);
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void Evaluate_listOrderForecastDetails_ConditionalFormattings(List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> items, ListResponse response)
        {
            response.RuleEvaluations = new List<ListRuleEvaluation>();
            foreach (var item in items)
            {
                response.RuleEvaluations.Add(ApplyRecommendationColorConditional(item));
                response.RuleEvaluations.Add(ApplyAlertColorConditional(item));
            }
        }

        /*<DataSourceAggregators:listOrderForecastDetails:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderForecastDetailsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listOrderForecastDetails_DatasourceAggregators")]
        public JsonResult listOrderForecastDetails_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listOrderForecastDetails_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            formattings.Add("RecommendedOrderDate", "d/MM/yyyy");
            formattings.Add("SupplierAvailableQuantity", "#,0;'-'#,0;'0'");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        [Route("listOrderForecastDetails_UpdateCell")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult listOrderForecastDetails_UpdateCell()
        {
            var postedData = _ParsePostedData();
            try
            {
                var repo = new DSS1_RetailerDriverStockOptimisation.DAL.Repository();
                var listItem = repo.GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(int.Parse(postedData.GetValue("key").ToString()));
                if (listItem != null)
                {
                    switch (postedData.GetValue("property").ToString())
                    {
                    case "SupplierAvailableQuantity":
                        listItem.SupplierAvailableQuantity = int.Parse(postedData.GetValue("value").ToString());
                        break;
                    case "SupplierCanDeliver":
                        listItem.SupplierCanDeliver = bool.Parse(postedData.GetValue("value").ToString());
                        break;
                    }
                    repo.Save(listItem);
                }
            }
            catch (Exception e)
            {
                _logger.Error(e);
                zAppDev.DotNet.Framework.Utilities.Common.SetLastError(e);
            }
            return null;
        }




        /*<Datasource:SupplierView_BusinessUnitDataSet:1/>*/
        /*<DataSourceFilter:SupplierView_BusinessUnitDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_SupplierView_BusinessUnitDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_BusinessUnitDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_SupplierView_BusinessUnitDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [Route("SupplierView_BusinessUnitDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_BusinessUnitDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_BusinessUnitDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_BusinessUnitDataSet_Datasource")]
        public JsonResult SupplierView_BusinessUnitDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_BusinessUnitDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_OrderForecastsDS:1/>*/
        /*<DataSourceFilter:SupplierView_OrderForecastsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_SupplierView_OrderForecastsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_OrderForecastsDS_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_SupplierView_OrderForecastsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            var _var0 = (@model.Supplier?.Name ?? "");
            return __items.Where(@this => @this.Status == "Pending Supplier Answer" && @this.State != "Replied by " + _var0 && @this.State != "Answered by all Suppliers");
        }


        /*<DataSourceGetFullRecordset:SupplierView_OrderForecastsDS:1/>*/

        [HttpPost]
        [Route("SupplierView_OrderForecastsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_OrderForecastsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_OrderForecastsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_OrderForecastsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_OrderForecastsDS_Datasource")]
        public JsonResult SupplierView_OrderForecastsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_OrderForecastsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_ForecastVS:1/>*/
        /*<DataSourceFilter:SupplierView_ForecastVS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_SupplierView_ForecastVS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_ForecastVS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_SupplierView_ForecastVS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), null, null, null, null, null, @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            var _var0 = @model.Supplier;
            return __items.Where(@this => @this.Supplier != null && @this.Supplier == _var0);
        }


        /*<DataSourceGetFullRecordset:SupplierView_ForecastVS:1/>*/

        [HttpPost]
        [Route("SupplierView_ForecastVS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_ForecastVS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_ForecastVS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ForecastVS_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_ForecastVS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_ForecastVS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_ForecastVS_Datasource")]
        public JsonResult SupplierView_ForecastVS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_ForecastVS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ForecastVS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ForecastVS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ForecastVS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_StockDataSet:1/>*/
        /*<DataSourceFilter:SupplierView_StockDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_SupplierView_StockDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_StockDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_SupplierView_StockDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), null, null, null, null, null, @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            var _var0 = @model.Supplier;
            return __items.Where(@this => @this.Supplier != null && @this.Supplier == _var0);
        }


        /*<DataSourceGetFullRecordset:SupplierView_StockDataSet:1/>*/

        [HttpPost]
        [Route("SupplierView_StockDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_StockDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_StockDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new StockDataSet_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_StockDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_StockDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_StockDataSet_Datasource")]
        public JsonResult SupplierView_StockDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_StockDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_StockDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_StockDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_StockDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_NotificationsDS:1/>*/
        /*<DataSourceFilter:SupplierView_NotificationsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_SupplierView_NotificationsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_NotificationsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_SupplierView_NotificationsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>().AsQueryable();
            var _var0 = @model.Supplier;
            return __items.Where(@this => @this.Item.Supplier == _var0);
        }


        /*<DataSourceGetFullRecordset:SupplierView_NotificationsDS:1/>*/

        [HttpPost]
        [Route("SupplierView_NotificationsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_NotificationsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new NotificationsDS_NotificationDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_NotificationsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_NotificationsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_NotificationsDS_Datasource")]
        public JsonResult SupplierView_NotificationsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_NotificationsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_NotificationsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_NotificationsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_AllSubcategoriesDS:1/>*/
        /*<DataSourceFilter:SupplierView_AllSubcategoriesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_SupplierView_AllSubcategoriesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_AllSubcategoriesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_SupplierView_AllSubcategoriesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [Route("SupplierView_AllSubcategoriesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_AllSubcategoriesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_AllSubcategoriesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_AllSubcategoriesDS_Datasource")]
        public JsonResult SupplierView_AllSubcategoriesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_AllSubcategoriesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_ItemsDS:1/>*/
        /*<DataSourceFilter:SupplierView_ItemsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_SupplierView_ItemsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_ItemsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_SupplierView_ItemsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            DSS1_RetailerDriverStockOptimisation.BO.Contact loggedContact = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Contact>((c) => c.UserName == _var0)?.FirstOrDefault();
            var _var1 = loggedContact?.Company?.Code;
            return __items.Where(@this => @this.Supplier.Code == _var1);
        }


        /*<DataSourceGetFullRecordset:SupplierView_ItemsDS:1/>*/

        [HttpPost]
        [Route("SupplierView_ItemsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_ItemsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_ItemsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "SupplierView_ItemsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_ItemsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_ItemsDS_Datasource")]
        public JsonResult SupplierView_ItemsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_ItemsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_ItemsVMDS:1/>*/
        /*<DataSourceFilter:SupplierView_ItemsVMDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_SupplierView_ItemsVMDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_ItemsVMDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_SupplierView_ItemsVMDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_ItemsVMDS:1/>*/

        [HttpPost]
        [Route("SupplierView_ItemsVMDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_ItemsVMDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "SupplierView_ItemsVMDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_ItemsVMDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_ItemsVMDS_Datasource")]
        public JsonResult SupplierView_ItemsVMDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsVMDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsVMDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_ItemsVMDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_SuppliersDS:1/>*/
        /*<DataSourceFilter:SupplierView_SuppliersDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_SupplierView_SuppliersDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_SuppliersDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_SupplierView_SuppliersDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_SuppliersDS:1/>*/

        [HttpPost]
        [Route("SupplierView_SuppliersDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_SuppliersDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_SuppliersDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_SuppliersDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_SuppliersDS_Datasource")]
        public JsonResult SupplierView_SuppliersDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SuppliersDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SuppliersDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SuppliersDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_WarehousesDS:1/>*/
        /*<DataSourceFilter:SupplierView_WarehousesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_SupplierView_WarehousesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_WarehousesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_SupplierView_WarehousesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_WarehousesDS:1/>*/

        [HttpPost]
        [Route("SupplierView_WarehousesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_WarehousesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_WarehousesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_WarehousesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_WarehousesDS_Datasource")]
        public JsonResult SupplierView_WarehousesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_WarehousesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_WarehousesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_WarehousesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_SelectedOrderFDetailsVM:1/>*/
        /*<DataSourceFilter:SupplierView_SelectedOrderFDetailsVM:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_SupplierView_SelectedOrderFDetailsVM_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_SelectedOrderFDetailsVM_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> Get_SupplierView_SelectedOrderFDetailsVM_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedOrderFDetails?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_SelectedOrderFDetailsVM:1/>*/

        [HttpPost]
        [Route("SupplierView_SelectedOrderFDetailsVM_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderFDetailsVM", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_SelectedOrderFDetailsVM_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_SelectedOrderFDetailsVM_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectedOrderFDetailsVM_OrderForecastDetailsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_SelectedOrderFDetailsVM");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_SelectedOrderFDetailsVM:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectedOrderFDetailsVM", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_SelectedOrderFDetailsVM_Datasource")]
        public JsonResult SupplierView_SelectedOrderFDetailsVM_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_SelectedOrderFDetailsVM_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SelectedOrderFDetailsVM_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SelectedOrderFDetailsVM_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_SelectedOrderFDetailsVM_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:SupplierView_Commets:1/>*/
        /*<DataSourceFilter:SupplierView_Commets:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_SupplierView_Commets_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SupplierView_Commets_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment> Get_SupplierView_Commets_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SupplierView_Commets:1/>*/

        [HttpPost]
        [Route("SupplierView_Commets_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Commets", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SupplierView_Commets_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SupplierView_Commets_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Commets_CommentDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SupplierViewViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SupplierView_Commets");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SupplierView_Commets:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Commets", ClaimType = ClaimTypes.Dataset)]
        [Route("SupplierView_Commets_Datasource")]
        public JsonResult SupplierView_Commets_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SupplierView_Commets_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_Commets_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_Commets_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SupplierView_Commets_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Comment>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        /*<CondionalFormating:ApplyRecommendationColorConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyRecommendationColorConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyRecommendationColorConditional:2/>*/
                return parents0?.Notification?.Message == "Excess Stock";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyRecommendationColorConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        /*<CondionalFormating:ApplyAlertColorConditional:1/>*/
        [Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ApplyAlertColorConditional(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ApplyAlertColorConditional:2/>*/
                return parents0?.Notification?.Message == "Low Stock";
            };
            return new ListRuleEvaluation
            {
                RuleName = "ApplyAlertColorConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new SupplierViewViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("SupplierView");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: SupplierView, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
