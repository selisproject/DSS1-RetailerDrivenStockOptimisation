// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.KPIDashboardViewOnly
{

    [RoutePrefix("KPIDashboardViewOnly")]
    public class KPIDashboardViewOnlyController : ControllerBase<KPIDashboardViewOnlyViewModel, KPIDashboardViewOnlyViewModelDTO>
    {

        /*<Form:KPIDashboardViewOnly:0/>*/
        public KPIDashboardViewOnlyController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(KPIDashboardViewOnlyController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPageForSlide.MasterPageForSlideController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(KPIDashboardViewOnlyViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(KPIDashboardViewOnlyViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new KPIDashboardViewOnlyViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboardViewOnly"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new KPIDashboardViewOnlyViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboardViewOnly"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPageForSlide.MasterPageForSlideController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSubcategory", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSubcategory")]
        public ActionResult AddSubcategory()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSubcategory();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RefreshFilters", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RefreshFilters")]
        public ActionResult RefreshFilters(string caller)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                caller = DeserializeViewModelProperty<string>(_data["caller"] as Newtonsoft.Json.Linq.JValue);
            }
            var redirectInfo = ExecuteRefreshFilters(caller);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSKU")]
        public ActionResult AddSKU()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSKU();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="ViewFiltered", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("ViewFiltered/{supIdJoined?}/{warehouseIdJoined?}/{businessUnitIdJoined?}/{catIdJoined?}/{subcatIdJoined?}/{baseUnitIdJoined?}/{*skusJoined?}")]
        public ActionResult ViewFiltered(string supIdJoined, string warehouseIdJoined, string businessUnitIdJoined, string catIdJoined, string subcatIdJoined, string baseUnitIdJoined, string skusJoined)

        {
            @model = new KPIDashboardViewOnlyViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboardViewOnly"] = "ViewFiltered";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="ViewFiltered", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_ViewFiltered/{supIdJoined?}/{warehouseIdJoined?}/{businessUnitIdJoined?}/{catIdJoined?}/{subcatIdJoined?}/{baseUnitIdJoined?}/{*skusJoined?}")]
        public ActionResult _API_ViewFiltered(string supIdJoined, string warehouseIdJoined, string businessUnitIdJoined, string catIdJoined, string subcatIdJoined, string baseUnitIdJoined, string skusJoined)

        {
            @model = new KPIDashboardViewOnlyViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboardViewOnly"] = "ViewFiltered";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPageForSlide.MasterPageForSlideController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteViewFiltered(supIdJoined,warehouseIdJoined,businessUnitIdJoined,catIdJoined,subcatIdJoined,baseUnitIdJoined,skusJoined);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPageForSlide.MasterPageForSlideController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel());
            ((MasterPageForSlide.MasterPageForSlideController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.FromDate = new DateTime(2018, 6, 1, 0, 0, 0, DateTimeKind.Utc);
            @model.ToDate = new DateTime(2018, 9, 26, 0, 0, 0, DateTimeKind.Utc);
            return _result;
        }
        /*<ControllerActionImplementation:AddSubcategory:1/>*/
        public ActionResult ExecuteAddSubcategory()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:RefreshFilters:1/>*/
        public ActionResult ExecuteRefreshFilters(string caller)
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:AddSKU:1/>*/
        public ActionResult ExecuteAddSKU()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:ViewFiltered:1/>*/
        public ActionResult ExecuteViewFiltered(string supIdJoined, string warehouseIdJoined, string businessUnitIdJoined, string catIdJoined, string subcatIdJoined, string baseUnitIdJoined, string skusJoined)
        {
            if (_parentController == null) _parentController = new MasterPageForSlide.MasterPageForSlideController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel());
            ((MasterPageForSlide.MasterPageForSlideController) _parentController).ExecuteRender();
            ActionResult _result = null;
            string[] supIdStr = supIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> supIds = new System.Collections.Generic.List<int?>();
            foreach (var s in supIdStr ?? Enumerable.Empty<string>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "KPIDashboardViewOnly",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "** Sup: " + s);
                supIds.Add(int.Parse(s));
            }
            string[] warehouseIdStr = warehouseIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> warehouseIds = new System.Collections.Generic.List<int?>();
            foreach (var w in warehouseIdStr ?? Enumerable.Empty<string>())
            {
                warehouseIds.Add(int.Parse(w));
            }
            string[] businessUnitIdStr = businessUnitIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> BUIds = new System.Collections.Generic.List<int?>();
            foreach (var b in businessUnitIdStr ?? Enumerable.Empty<string>())
            {
                BUIds.Add(int.Parse(b));
            }
            string[] categoryIdStr = catIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> categoryIds = new System.Collections.Generic.List<int?>();
            foreach (var c in categoryIdStr ?? Enumerable.Empty<string>())
            {
                categoryIds.Add(int.Parse(c));
            }
            string[] SubcategoryIdStr = subcatIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> SubcategoryIds = new System.Collections.Generic.List<int?>();
            foreach (var sc in SubcategoryIdStr ?? Enumerable.Empty<string>())
            {
                SubcategoryIds.Add(int.Parse(sc));
            }
            string[] baseUnitsIdStr = baseUnitIdJoined?.SplitExtended(',', false);
            System.Collections.Generic.List<int?> baseUnitIds = new System.Collections.Generic.List<int?>();
            foreach (var bu in baseUnitsIdStr ?? Enumerable.Empty<string>())
            {
                baseUnitIds.Add(int.Parse(bu));
            }
            if ((baseUnitIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getBaseUnitsids = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>()?.Select((a) => a.Id).ToList();
                baseUnitIds.AddRange(getBaseUnitsids);
            }
            string[] skusIdStr = skusJoined?.SplitExtended(',', false);
            foreach (var sku in skusIdStr ?? Enumerable.Empty<string>())
            {
                @model.SelectedItemSKUs.Add(sku);
            }
            if ((supIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getSupids = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>()?.Select((a) => a.Id).ToList();
                supIds.AddRange(getSupids);
            }
            if ((warehouseIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getWarehouseids = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>()?.Select((a) => a.Id).ToList();
                warehouseIds.AddRange(getWarehouseids);
            }
            if ((businessUnitIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getBusinessUnitsIds = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>()?.Select((a) => a.Id).ToList();
                BUIds.AddRange(getBusinessUnitsIds);
            }
            if ((catIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getCategoryIds = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>()?.Select((a) => a.Id).ToList();
                categoryIds.AddRange(getCategoryIds);
            }
            if ((subcatIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getSubCatIds = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>()?.Select((a) => a.Id).ToList();
                SubcategoryIds.AddRange(getSubCatIds);
            }
            if ((baseUnitIdJoined == "0"))
            {
                System.Collections.Generic.List<int?> getBaseUnitsIds = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>()?.Select((a) => a.Id).ToList();
                baseUnitIds.AddRange(getBaseUnitsIds);
            }
            if ((skusJoined == "0"))
            {
                @model.SelectedItemSKUs = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>()?.Select((a) => a.SKU).ToList().ToList();
            }
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "KPIDashboardViewOnly",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "** SupIds: " + supIds.Count());
            @model.SelectedSuppliers = supIds.ToList();
            @model.SelectedWarehouses = warehouseIds.ToList();
            @model.SelectedBUs = BUIds.ToList();
            @model.SelectedCategories = categoryIds.ToList();
            @model.SelectedSubcategories = SubcategoryIds.ToList();
            @model.SelectedBaseUnits = baseUnitIds.ToList();
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:chartStockLevelsInvDays:1/>*/
        /*<DataSourceFilter:chartStockLevelsInvDays:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_chartStockLevelsInvDays_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevelsInvDays_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_chartStockLevelsInvDays_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPIExtensions.InventoryDaysKPIWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartStockLevelsInvDays:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevelsInvDays_Datasource")]
        public JsonResult chartStockLevelsInvDays_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevelsInvDays_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.InventoryDaysKPIKey, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "inventorydays", "Inventory Days"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.SalesForecastDateFormatted, new List<object> { _dto?.InventoryDays }, new List<object> { "Inventory Days" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartStockLevelsUnits:1/>*/
        /*<DataSourceFilter:chartStockLevelsUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_chartStockLevelsUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevelsUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_chartStockLevelsUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.UnitsKPIExtensions.UnitsKPIWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartStockLevelsUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevelsUnits_Datasource")]
        public JsonResult chartStockLevelsUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevelsUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "units", "Units"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new UnitsKPIDataSet_UnitsKPIDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.SalesForecastDateFormatted, new List<object> { _dto?.Units }, new List<object> { "Units" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartSLALeadTime:1/>*/
        /*<DataSourceFilter:chartSLALeadTime:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLALeadTime_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartSLALeadTime_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLALeadTime_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLALeadTimeExtensions.ItemLeadTimePercentageWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartSLALeadTime:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        [Route("chartSLALeadTime_Datasource")]
        public JsonResult chartSLALeadTime_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartSLALeadTime_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "SLA Lead Time (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SLALeadMonthly_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "SLA Lead Time (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartSLADelivery:1/>*/
        /*<DataSourceFilter:chartSLADelivery:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLADelivery_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartSLADelivery_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLADelivery_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLADeliveryExtensions.ItemDeliveryPercentageWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartSLADelivery:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        [Route("chartSLADelivery_Datasource")]
        public JsonResult chartSLADelivery_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartSLADelivery_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "SLA Delivery (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SLADelivery_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "SLA Delivery (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartWaste:1/>*/
        /*<DataSourceFilter:chartWaste:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_chartWaste_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartWaste_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_chartWaste_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatsExtensions.ItemWaste("").AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartWaste:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartWaste_Datasource")]
        public JsonResult chartWaste_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartWaste_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "Waste percentage (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new WasteDataSet_StatsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.DateFormatted, new List<object> { _dto?.Percentage }, new List<object> { "Waste percentage (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartOrderForecast:1/>*/
        /*<DataSourceFilter:chartOrderForecast:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartOrderForecast_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartOrderForecast_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartOrderForecast_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.PlatformExtensions.CalculateOrderForecastAccuracy(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartOrderForecast:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartOrderForecast_Datasource")]
        public JsonResult chartOrderForecast_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartOrderForecast_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "Accuracy"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new PlatformDataSet_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "Accuracy" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_WasteDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_WasteDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_KPIDashboardViewOnly_WasteDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_WasteDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_KPIDashboardViewOnly_WasteDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatsExtensions.ItemWaste("").AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_WasteDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_WasteDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_WasteDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_WasteDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WasteDataSet_StatsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_WasteDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_WasteDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_WasteDataSet_Datasource")]
        public JsonResult KPIDashboardViewOnly_WasteDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_WasteDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WasteDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WasteDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WasteDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Stats>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_PlatformDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_PlatformDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_PlatformDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_PlatformDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_PlatformDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.PlatformExtensions.CalculateOrderForecastAccuracy(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_PlatformDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_PlatformDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_PlatformDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_PlatformDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new PlatformDataSet_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_PlatformDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_PlatformDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_PlatformDataSet_Datasource")]
        public JsonResult KPIDashboardViewOnly_PlatformDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_PlatformDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_PlatformDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_PlatformDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_PlatformDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_SLADelivery:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_SLADelivery:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_SLADelivery_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_SLADelivery_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_SLADelivery_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLADeliveryExtensions.ItemDeliveryPercentageWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_SLADelivery:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_SLADelivery_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_SLADelivery_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_SLADelivery_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SLADelivery_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_SLADelivery");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_SLADelivery:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_SLADelivery_Datasource")]
        public JsonResult KPIDashboardViewOnly_SLADelivery_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_SLADelivery_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLADelivery_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLADelivery_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLADelivery_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_SLALeadMonthly:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_SLALeadMonthly:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_SLALeadMonthly_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_SLALeadMonthly_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboardViewOnly_SLALeadMonthly_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLALeadTimeExtensions.ItemLeadTimePercentageWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_SLALeadMonthly:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_SLALeadMonthly_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_SLALeadMonthly_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_SLALeadMonthly_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SLALeadMonthly_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_SLALeadMonthly");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_SLALeadMonthly:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_SLALeadMonthly_Datasource")]
        public JsonResult KPIDashboardViewOnly_SLALeadMonthly_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_SLALeadMonthly_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLALeadMonthly_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLALeadMonthly_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SLALeadMonthly_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_UnitsKPIDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_UnitsKPIDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_KPIDashboardViewOnly_UnitsKPIDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_UnitsKPIDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_KPIDashboardViewOnly_UnitsKPIDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.UnitsKPIExtensions.UnitsKPIWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_UnitsKPIDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_UnitsKPIDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_UnitsKPIDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_UnitsKPIDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new UnitsKPIDataSet_UnitsKPIDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_UnitsKPIDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_UnitsKPIDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_UnitsKPIDataSet_Datasource")]
        public JsonResult KPIDashboardViewOnly_UnitsKPIDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_UnitsKPIDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_UnitsKPIDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_UnitsKPIDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_UnitsKPIDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_InventoryDaysKPIDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_InventoryDaysKPIDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_KPIDashboardViewOnly_InventoryDaysKPIDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_InventoryDaysKPIDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_KPIDashboardViewOnly_InventoryDaysKPIDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPIExtensions.InventoryDaysKPIWithCriteria(@model.SelectedSuppliers, @model.SelectedWarehouses, @model.SelectedBUs, @model.SelectedCategories, @model.SelectedSubcategories, @model.SelectedBaseUnits, @model.SelectedItemSKUs, @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_InventoryDaysKPIDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_InventoryDaysKPIDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_InventoryDaysKPIDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_InventoryDaysKPIDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.InventoryDaysKPIKey.ToString()).ToList(), "KPIDashboardViewOnly_InventoryDaysKPIDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_InventoryDaysKPIDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_InventoryDaysKPIDataSet_Datasource")]
        public JsonResult KPIDashboardViewOnly_InventoryDaysKPIDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_InventoryDaysKPIDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_InventoryDaysKPIDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_InventoryDaysKPIDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_InventoryDaysKPIDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.InventoryDaysKPIKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_BusinessUnitDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_BusinessUnitDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_KPIDashboardViewOnly_BusinessUnitDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_BusinessUnitDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_KPIDashboardViewOnly_BusinessUnitDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_BusinessUnitDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_BusinessUnitDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_BusinessUnitDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_BusinessUnitDataSet_Datasource")]
        public JsonResult KPIDashboardViewOnly_BusinessUnitDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_BusinessUnitDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_OrderForecastsDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_OrderForecastsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_KPIDashboardViewOnly_OrderForecastsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_OrderForecastsDS_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_KPIDashboardViewOnly_OrderForecastsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_OrderForecastsDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_OrderForecastsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_OrderForecastsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_OrderForecastsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_OrderForecastsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_OrderForecastsDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_OrderForecastsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_OrderForecastsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_NotificationsDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_NotificationsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_KPIDashboardViewOnly_NotificationsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_NotificationsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_KPIDashboardViewOnly_NotificationsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_NotificationsDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_NotificationsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_NotificationsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new NotificationsDS_NotificationDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_NotificationsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_NotificationsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_NotificationsDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_NotificationsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_NotificationsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_NotificationsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_NotificationsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_AllSubcategoriesDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_AllSubcategoriesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_KPIDashboardViewOnly_AllSubcategoriesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_AllSubcategoriesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_KPIDashboardViewOnly_AllSubcategoriesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_AllSubcategoriesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_AllSubcategoriesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_AllSubcategoriesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_AllSubcategoriesDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_AllSubcategoriesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_AllSubcategoriesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_ItemsDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_ItemsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboardViewOnly_ItemsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_ItemsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboardViewOnly_ItemsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_ItemsDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_ItemsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_ItemsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_ItemsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "KPIDashboardViewOnly_ItemsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_ItemsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_ItemsDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_ItemsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_ItemsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_ItemsVMDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_ItemsVMDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboardViewOnly_ItemsVMDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_ItemsVMDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboardViewOnly_ItemsVMDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_ItemsVMDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_ItemsVMDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_ItemsVMDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "KPIDashboardViewOnly_ItemsVMDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_ItemsVMDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_ItemsVMDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_ItemsVMDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsVMDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsVMDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_ItemsVMDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_SuppliersDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_SuppliersDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_KPIDashboardViewOnly_SuppliersDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_SuppliersDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_KPIDashboardViewOnly_SuppliersDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_SuppliersDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_SuppliersDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_SuppliersDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_SuppliersDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_SuppliersDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_SuppliersDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_SuppliersDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SuppliersDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SuppliersDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_SuppliersDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboardViewOnly_WarehousesDS:1/>*/
        /*<DataSourceFilter:KPIDashboardViewOnly_WarehousesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_KPIDashboardViewOnly_WarehousesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboardViewOnly_WarehousesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_KPIDashboardViewOnly_WarehousesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboardViewOnly_WarehousesDS:1/>*/

        [HttpPost]
        [Route("KPIDashboardViewOnly_WarehousesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboardViewOnly_WarehousesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboardViewOnly_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewOnlyViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboardViewOnly_WarehousesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboardViewOnly_WarehousesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboardViewOnly_WarehousesDS_Datasource")]
        public JsonResult KPIDashboardViewOnly_WarehousesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboardViewOnly_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WarehousesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WarehousesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboardViewOnly_WarehousesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new KPIDashboardViewOnlyViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("KPIDashboardViewOnly");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: KPIDashboardViewOnly, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPageForSlide.MasterPageForSlideController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
