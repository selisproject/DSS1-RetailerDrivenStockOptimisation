// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS1_RetailerDriverStockOptimisation.UI.Controllers.KPIDashboard
{

    [RoutePrefix("KPIDashboard")]
    public class KPIDashboardController : ControllerBase<KPIDashboardViewModel, KPIDashboardViewModelDTO>
    {

        /*<Form:KPIDashboard:0/>*/
        public KPIDashboardController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(KPIDashboardController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(KPIDashboardViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(KPIDashboardViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("KPIDashboard", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "KPIDashboard");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "KPIDashboard");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "KPIDashboard");
        }



        #region Controller Actions
        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new KPIDashboardViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboard"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new KPIDashboardViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_KPIDashboard"] = "Render";
            PushToHistory();
            var _masterController = new DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSubcategory", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSubcategory")]
        public ActionResult AddSubcategory()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSubcategory();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RefreshFilters", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RefreshFilters")]
        public ActionResult RefreshFilters(string caller)

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            if (!_redirectionFromSameController)
            {
                caller = DeserializeViewModelProperty<string>(_data["caller"] as Newtonsoft.Json.Linq.JValue);
            }
            var redirectInfo = ExecuteRefreshFilters(caller);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="AddSKU", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddSKU")]
        public ActionResult AddSKU()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteAddSKU();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="ViewFiltered", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ViewFiltered")]
        public ActionResult ViewFiltered()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteViewFiltered();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.FromDate = new DateTime(2018, 9, 1, 0, 0, 0, DateTimeKind.Utc);
            @model.ToDate = new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Utc);
            return _result;
        }
        /*<ControllerActionImplementation:AddSubcategory:1/>*/
        public ActionResult ExecuteAddSubcategory()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            return _result;
        }
        /*<ControllerActionImplementation:RefreshFilters:1/>*/
        public ActionResult ExecuteRefreshFilters(string caller)
        {
            ActionResult _result = null;
            if ((caller == "BusinessUnits"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listCategories");
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            }
            if ((caller == "Categories"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSubcategories");
            }
            if ((caller == "Subcategories"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listBaseUnits");
            }
            if ((caller == "SKU"))
            {
                ClientCommand(ClientCommands.DATALIST_REFRESH, "listSKUs");
            }
            ClientCommand(ClientCommands.CHART_REFRESH, "chartOrderForecast");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartSLADelivery");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartSLALeadTime");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevelsInvDays");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartStockLevelsUnits");
            ClientCommand(ClientCommands.CHART_REFRESH, "chartWaste");
            ClientCommand(ClientCommands.DROPDOWN_REFRESH, "ddlSKUs");
            return _result;
        }
        /*<ControllerActionImplementation:AddSKU:1/>*/
        public ActionResult ExecuteAddSKU()
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "KPIDashboard",  DSS1_RetailerDriverStockOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Selected Suppliers: " + (SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Count() ?? 0));
            @model.SelectedSKUs?.Add(@model.SelectedSKU);
            @model.SelectedSKU = null;
            _result = this.ExecuteRefreshFilters(caller : "SKU");
            return _result;
        }
        /*<ControllerActionImplementation:ViewFiltered:1/>*/
        public ActionResult ExecuteViewFiltered()
        {
            ActionResult _result = null;
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:listSuppliers:1/>*/
        /*<DataSourceFilter:listSuppliers:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_listSuppliers_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSuppliers_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_listSuppliers_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listSuppliers:1/>*/

        [HttpPost]
        [Route("listSuppliers_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSuppliers_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listSuppliers");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSuppliers:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSuppliers_Datasource")]
        public JsonResult listSuppliers_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSuppliers_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSuppliers:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSuppliers_DatasourceAggregators")]
        public JsonResult listSuppliers_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSuppliers_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listWarehouses:1/>*/
        /*<DataSourceFilter:listWarehouses:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listWarehouses_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_listWarehouses_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listWarehouses:1/>*/

        [HttpPost]
        [Route("listWarehouses_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listWarehouses_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listWarehouses");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_Datasource")]
        public JsonResult listWarehouses_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listWarehouses_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listWarehouses:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listWarehouses_DatasourceAggregators")]
        public JsonResult listWarehouses_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listWarehouses_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listBusinessUnits:1/>*/
        /*<DataSourceFilter:listBusinessUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_listBusinessUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listBusinessUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_listBusinessUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listBusinessUnits:1/>*/

        [HttpPost]
        [Route("listBusinessUnits_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listBusinessUnits_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listBusinessUnits");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listBusinessUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listBusinessUnits_Datasource")]
        public JsonResult listBusinessUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listBusinessUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listBusinessUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listBusinessUnits_DatasourceAggregators")]
        public JsonResult listBusinessUnits_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBusinessUnits_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listCategories:1/>*/
        /*<DataSourceFilter:listCategories:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category> Get_listCategories_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listCategories_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.BusinessUnit != null && @this.BusinessUnit.Id != null ? @this.BusinessUnit.Id : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category> Get_listCategories_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedBUs = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>().AsQueryable();
            return __items.Where(@this => selectedBUs.Contains((@this.BusinessUnit.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listCategories:1/>*/

        [HttpPost]
        [Route("listCategories_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listCategories_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listCategories");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listCategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listCategories_Datasource")]
        public JsonResult listCategories_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listCategories_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new CategoryDataSet_CategoryDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listCategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listCategories_DatasourceAggregators")]
        public JsonResult listCategories_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listCategories_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Category>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listSubcategories:1/>*/
        /*<DataSourceFilter:listSubcategories:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_listSubcategories_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSubcategories_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_listSubcategories_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedCategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => selectedCategories.Contains((@this.Category.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listSubcategories:1/>*/

        [HttpPost]
        [Route("listSubcategories_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSubcategories_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listSubcategories");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSubcategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listSubcategories_Datasource")]
        public JsonResult listSubcategories_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSubcategories_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SubCategoryDataSet_SubCategoryDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSubcategories:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SubCategoryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("listSubcategories_DatasourceAggregators")]
        public JsonResult listSubcategories_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSubcategories_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:ddlSubcategory:1/>*/
        /*<DataSourceFilter:ddlSubcategory:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_ddlSubcategory_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ddlSubcategory_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_ddlSubcategory_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ddlSubcategory:1/>*/

        [HttpPost]
        [Route("ddlSubcategory_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ddlSubcategory_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ddlSubcategory_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ddlSubcategory");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ddlSubcategory:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("ddlSubcategory_Datasource")]
        public JsonResult ddlSubcategory_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ddlSubcategory_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSubcategory_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:listBaseUnits:1/>*/
        /*<DataSourceFilter:listBaseUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit> Get_listBaseUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listBaseUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit> Get_listBaseUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedSubcategories = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>().AsQueryable();
            return __items.Where(@this => selectedSubcategories.Contains((@this.SubCategory.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:listBaseUnits:1/>*/

        [HttpPost]
        [Route("listBaseUnits_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listBaseUnits_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "listBaseUnits");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listBaseUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listBaseUnits_Datasource")]
        public JsonResult listBaseUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listBaseUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new AllBaseUnitsDS_BaseUnitDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listBaseUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllBaseUnitsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listBaseUnits_DatasourceAggregators")]
        public JsonResult listBaseUnits_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listBaseUnits_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:listSKUs:1/>*/
        /*<DataSourceFilter:listSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_listSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_listSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:listSKUs:1/>*/

        [HttpPost]
        [Route("listSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult listSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "listSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_Datasource")]
        public JsonResult listSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_listSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:listSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("listSKUs_DatasourceAggregators")]
        public JsonResult listSKUs_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_listSKUs_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS1_RetailerDriverStockOptimisation.BO.Item>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }





        /*<Datasource:ddlSKUs:1/>*/
        /*<DataSourceFilter:ddlSKUs:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ddlSKUs_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_ddlSKUs_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
// Filter Inputs
            System.Collections.Generic.List<int?> selectedSuppliers = SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList();
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            if ((selectedSuppliers.Count() == 0))
            {
                return __items.Where(@this => true);
            }
            return __items.Where(@this => selectedSuppliers.Contains((@this.Supplier.Id).GetValueOrDefault(0)));
        }


        /*<DataSourceGetFullRecordset:ddlSKUs:1/>*/

        [HttpPost]
        [Route("ddlSKUs_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ddlSKUs_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "ddlSKUs");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ddlSKUs:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("ddlSKUs_Datasource")]
        public JsonResult ddlSKUs_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ddlSKUs_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ddlSKUs_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new ItemsDS_ItemDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartStockLevelsInvDays:1/>*/
        /*<DataSourceFilter:chartStockLevelsInvDays:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_chartStockLevelsInvDays_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevelsInvDays_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_chartStockLevelsInvDays_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPIExtensions.InventoryDaysKPIWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartStockLevelsInvDays:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevelsInvDays_Datasource")]
        public JsonResult chartStockLevelsInvDays_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevelsInvDays_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsInvDays_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.InventoryDaysKPIKey, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "inventorydays", "Inventory Days"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.SalesForecastDateFormatted, new List<object> { _dto?.InventoryDays }, new List<object> { "Inventory Days" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartStockLevelsUnits:1/>*/
        /*<DataSourceFilter:chartStockLevelsUnits:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_chartStockLevelsUnits_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartStockLevelsUnits_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_chartStockLevelsUnits_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.UnitsKPIExtensions.UnitsKPIWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartStockLevelsUnits:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartStockLevelsUnits_Datasource")]
        public JsonResult chartStockLevelsUnits_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartStockLevelsUnits_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartStockLevelsUnits_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "units", "Units"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new UnitsKPIDataSet_UnitsKPIDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.SalesForecastDateFormatted, new List<object> { _dto?.Units }, new List<object> { "Units" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartSLALeadTime:1/>*/
        /*<DataSourceFilter:chartSLALeadTime:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLALeadTime_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartSLALeadTime_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLALeadTime_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLALeadTimeExtensions.ItemLeadTimePercentageWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartSLALeadTime:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        [Route("chartSLALeadTime_Datasource")]
        public JsonResult chartSLALeadTime_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartSLALeadTime_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLALeadTime_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "SLA Lead Time (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SLALeadMonthly_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "SLA Lead Time (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartSLADelivery:1/>*/
        /*<DataSourceFilter:chartSLADelivery:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLADelivery_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartSLADelivery_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartSLADelivery_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLADeliveryExtensions.ItemDeliveryPercentageWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartSLADelivery:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        [Route("chartSLADelivery_Datasource")]
        public JsonResult chartSLADelivery_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartSLADelivery_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartSLADelivery_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "SLA Delivery (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SLADelivery_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "SLA Delivery (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartWaste:1/>*/
        /*<DataSourceFilter:chartWaste:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_chartWaste_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartWaste_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_chartWaste_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatsExtensions.ItemWaste("").AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartWaste:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartWaste_Datasource")]
        public JsonResult chartWaste_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartWaste_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartWaste_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "Waste percentage (%)"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new WasteDataSet_StatsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.DateFormatted, new List<object> { _dto?.Percentage }, new List<object> { "Waste percentage (%)" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:chartOrderForecast:1/>*/
        /*<DataSourceFilter:chartOrderForecast:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartOrderForecast_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_chartOrderForecast_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_chartOrderForecast_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.PlatformExtensions.CalculateOrderForecastAccuracy(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:chartOrderForecast:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("chartOrderForecast_Datasource")]
        public JsonResult chartOrderForecast_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_chartOrderForecast_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_chartOrderForecast_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "percentage", "Accuracy"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new PlatformDataSet_SLAStatisticsDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Month, new List<object> { _dto?.Percentage }, new List<object> { "Accuracy" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_WasteDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_WasteDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_KPIDashboard_WasteDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_WasteDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats> Get_KPIDashboard_WasteDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatsExtensions.ItemWaste("").AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_WasteDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_WasteDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_WasteDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_WasteDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WasteDataSet_StatsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_WasteDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_WasteDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WasteDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_WasteDataSet_Datasource")]
        public JsonResult KPIDashboard_WasteDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_WasteDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WasteDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WasteDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WasteDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Stats>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_PlatformDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_PlatformDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_PlatformDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_PlatformDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_PlatformDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.PlatformExtensions.CalculateOrderForecastAccuracy(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_PlatformDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_PlatformDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_PlatformDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_PlatformDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new PlatformDataSet_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_PlatformDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_PlatformDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PlatformDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_PlatformDataSet_Datasource")]
        public JsonResult KPIDashboard_PlatformDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_PlatformDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_PlatformDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_PlatformDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_PlatformDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_SLADelivery:1/>*/
        /*<DataSourceFilter:KPIDashboard_SLADelivery:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_SLADelivery_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_SLADelivery_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_SLADelivery_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLADeliveryExtensions.ItemDeliveryPercentageWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_SLADelivery:1/>*/

        [HttpPost]
        [Route("KPIDashboard_SLADelivery_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_SLADelivery_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_SLADelivery_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SLADelivery_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_SLADelivery");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_SLADelivery:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLADelivery", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_SLADelivery_Datasource")]
        public JsonResult KPIDashboard_SLADelivery_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_SLADelivery_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLADelivery_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLADelivery_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLADelivery_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_SLALeadMonthly:1/>*/
        /*<DataSourceFilter:KPIDashboard_SLALeadMonthly:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_SLALeadMonthly_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_SLALeadMonthly_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics> Get_KPIDashboard_SLALeadMonthly_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.SLALeadTimeExtensions.ItemLeadTimePercentageWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_SLALeadMonthly:1/>*/

        [HttpPost]
        [Route("KPIDashboard_SLALeadMonthly_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_SLALeadMonthly_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_SLALeadMonthly_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SLALeadMonthly_SLAStatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_SLALeadMonthly");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_SLALeadMonthly:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SLALeadMonthly", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_SLALeadMonthly_Datasource")]
        public JsonResult KPIDashboard_SLALeadMonthly_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_SLALeadMonthly_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLALeadMonthly_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLALeadMonthly_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SLALeadMonthly_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_UnitsKPIDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_UnitsKPIDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_KPIDashboard_UnitsKPIDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_UnitsKPIDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI> Get_KPIDashboard_UnitsKPIDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.UnitsKPIExtensions.UnitsKPIWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_UnitsKPIDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_UnitsKPIDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_UnitsKPIDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_UnitsKPIDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new UnitsKPIDataSet_UnitsKPIDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_UnitsKPIDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_UnitsKPIDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitsKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_UnitsKPIDataSet_Datasource")]
        public JsonResult KPIDashboard_UnitsKPIDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_UnitsKPIDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_UnitsKPIDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_UnitsKPIDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_UnitsKPIDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_InventoryDaysKPIDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_InventoryDaysKPIDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_KPIDashboard_InventoryDaysKPIDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_InventoryDaysKPIDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI> Get_KPIDashboard_InventoryDaysKPIDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPIExtensions.InventoryDaysKPIWithCriteria(SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), @model.FromDate, @model.ToDate).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_InventoryDaysKPIDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_InventoryDaysKPIDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_InventoryDaysKPIDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_InventoryDaysKPIDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.InventoryDaysKPIKey.ToString()).ToList(), "KPIDashboard_InventoryDaysKPIDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_InventoryDaysKPIDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InventoryDaysKPIDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_InventoryDaysKPIDataSet_Datasource")]
        public JsonResult KPIDashboard_InventoryDaysKPIDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_InventoryDaysKPIDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_InventoryDaysKPIDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_InventoryDaysKPIDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_InventoryDaysKPIDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.InventoryDaysKPIKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_BusinessUnitDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_BusinessUnitDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_KPIDashboard_BusinessUnitDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_BusinessUnitDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit> Get_KPIDashboard_BusinessUnitDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_BusinessUnitDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_BusinessUnitDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessUnitDataSet_BusinessUnitDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_BusinessUnitDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_BusinessUnitDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessUnitDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_BusinessUnitDataSet_Datasource")]
        public JsonResult KPIDashboard_BusinessUnitDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_BusinessUnitDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_BusinessUnitDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_BusinessUnitDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_OrderForecastsDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_OrderForecastsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_KPIDashboard_OrderForecastsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_OrderForecastsDS_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.CreatedOn != null ? @this.CreatedOn : null)
                          ;
            }
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast> Get_KPIDashboard_OrderForecastsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_OrderForecastsDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_OrderForecastsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_OrderForecastsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OrderForecastsDS_OrderForecastDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_OrderForecastsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_OrderForecastsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OrderForecastsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_OrderForecastsDS_Datasource")]
        public JsonResult KPIDashboard_OrderForecastsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_OrderForecastsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_OrderForecastsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_OrderForecastsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_ForecastVS:1/>*/
        /*<DataSourceFilter:KPIDashboard_ForecastVS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_KPIDashboard_ForecastVS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_ForecastVS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_KPIDashboard_ForecastVS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_ForecastVS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_ForecastVS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_ForecastVS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_ForecastVS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ForecastVS_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_ForecastVS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_ForecastVS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ForecastVS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_ForecastVS_Datasource")]
        public JsonResult KPIDashboard_ForecastVS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_ForecastVS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ForecastVS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ForecastVS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ForecastVS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_StockDataSet:1/>*/
        /*<DataSourceFilter:KPIDashboard_StockDataSet:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_KPIDashboard_StockDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_StockDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics> Get_KPIDashboard_StockDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS1_RetailerDriverStockOptimisation.BO.StatisticsExtensions.CalculateFullStatistics(@model.SelectedForecast, SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>.GetSelectedItems(Get_listWarehouses_DatasourceQueryable(null, false), @model.listWarehousesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>.GetSelectedItems(Get_listSKUs_DatasourceQueryable(null, false), @model.listSKUsSelectedItems)?.Select((a) => a.SKU).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>.GetSelectedItems(Get_listBusinessUnits_DatasourceQueryable(null, false), @model.listBusinessUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>.GetSelectedItems(Get_listCategories_DatasourceQueryable(null, false), @model.listCategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>.GetSelectedItems(Get_listSubcategories_DatasourceQueryable(null, false), @model.listSubcategoriesSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>.GetSelectedItems(Get_listBaseUnits_DatasourceQueryable(null, false), @model.listBaseUnitsSelectedItems)?.Select((a) => a.Id).ToList(), SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>.GetSelectedItems(Get_listSuppliers_DatasourceQueryable(null, false), @model.listSuppliersSelectedItems)?.Select((a) => a.Id).ToList(), @model.FromDate, @model.ToDate, @model.Supplier, @model.FlowType).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_StockDataSet:1/>*/

        [HttpPost]
        [Route("KPIDashboard_StockDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_StockDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_StockDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new StockDataSet_StatisticsDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_StockDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_StockDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "StockDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_StockDataSet_Datasource")]
        public JsonResult KPIDashboard_StockDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_StockDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_StockDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_StockDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_StockDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Statistics>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_NotificationsDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_NotificationsDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_KPIDashboard_NotificationsDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_NotificationsDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification> Get_KPIDashboard_NotificationsDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_NotificationsDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_NotificationsDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_NotificationsDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new NotificationsDS_NotificationDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_NotificationsDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_NotificationsDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "NotificationsDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_NotificationsDS_Datasource")]
        public JsonResult KPIDashboard_NotificationsDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_NotificationsDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_NotificationsDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_NotificationsDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_NotificationsDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_AllSubcategoriesDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_AllSubcategoriesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_KPIDashboard_AllSubcategoriesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_AllSubcategoriesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory> Get_KPIDashboard_AllSubcategoriesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_AllSubcategoriesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_AllSubcategoriesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AllSubcategoriesDS_SubCategoryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_AllSubcategoriesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_AllSubcategoriesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AllSubcategoriesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_AllSubcategoriesDS_Datasource")]
        public JsonResult KPIDashboard_AllSubcategoriesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_AllSubcategoriesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_AllSubcategoriesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_AllSubcategoriesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_ItemsVMDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_ItemsVMDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboard_ItemsVMDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_ItemsVMDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item> Get_KPIDashboard_ItemsVMDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.SelectedSKUs?.AsQueryable();
            if (__items == null) return new List<DSS1_RetailerDriverStockOptimisation.BO.Item>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_ItemsVMDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_ItemsVMDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_ItemsVMDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ItemsVMDS_ItemDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.SKU.ToString()).ToList(), "KPIDashboard_ItemsVMDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_ItemsVMDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ItemsVMDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_ItemsVMDS_Datasource")]
        public JsonResult KPIDashboard_ItemsVMDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_ItemsVMDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ItemsVMDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ItemsVMDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_ItemsVMDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.SKU, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_SuppliersDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_SuppliersDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_KPIDashboard_SuppliersDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_SuppliersDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier> Get_KPIDashboard_SuppliersDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_SuppliersDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_SuppliersDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_SuppliersDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SuppliersDS_SupplierDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_SuppliersDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_SuppliersDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SuppliersDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_SuppliersDS_Datasource")]
        public JsonResult KPIDashboard_SuppliersDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_SuppliersDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SuppliersDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SuppliersDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_SuppliersDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Supplier>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:KPIDashboard_WarehousesDS:1/>*/
        /*<DataSourceFilter:KPIDashboard_WarehousesDS:2/>*/
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_KPIDashboard_WarehousesDS_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_KPIDashboard_WarehousesDS_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse> Get_KPIDashboard_WarehousesDS_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS1_RetailerDriverStockOptimisation.DAL.Repository().GetAsQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:KPIDashboard_WarehousesDS:1/>*/

        [HttpPost]
        [Route("KPIDashboard_WarehousesDS_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        public JsonResult KPIDashboard_WarehousesDS_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_KPIDashboard_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new WarehousesDS_WarehouseDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(KPIDashboardViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "KPIDashboard_WarehousesDS");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:KPIDashboard_WarehousesDS:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "WarehousesDS", ClaimType = ClaimTypes.Dataset)]
        [Route("KPIDashboard_WarehousesDS_Datasource")]
        public JsonResult KPIDashboard_WarehousesDS_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_KPIDashboard_WarehousesDS_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WarehousesDS_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WarehousesDS_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_KPIDashboard_WarehousesDS_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new KPIDashboardViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("KPIDashboard");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: KPIDashboard, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
