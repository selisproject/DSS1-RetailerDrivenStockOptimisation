// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.NewContact;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPageForSlide;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPageForSlide;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact
{
    public class NewContactViewModel : MasterPageForSlideViewModel
    {
        public DSS1_RetailerDriverStockOptimisation.BO.Contact ApplicationUser;
        public string Password;
        public string PasswordRetype;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>> PickListSelectedItems;
        public List<SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>> Button1SelectedItems;
        public List<SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>> Button2SelectedItems;


        public NewContactViewModel()
        {
            ApplicationUser = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(ApplicationUser))
            {
                manager.Session.Evict(ApplicationUser);
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel))]
    public class NewContactViewModelDTO : MasterPageForSlideViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel>
    {

        [JsonConstructor]
        public NewContactViewModelDTO() { }
        public NewContactViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            ApplicationUser = original.ApplicationUser == null ? null : new ApplicationUser_ContactDTO(original.ApplicationUser);
            Password = original.Password;
            PasswordRetype = original.PasswordRetype;
            PickListSelectedItemKeys = original.PickListSelectedItems == null
                                       ? null
                                       : original.PickListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Button1SelectedItemKeys = original.Button1SelectedItems == null
                                      ? null
                                      : original.Button1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Button2SelectedItemKeys = original.Button2SelectedItems == null
                                      ? null
                                      : original.Button2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public ApplicationUser_ContactDTO ApplicationUser;
        public string Password;
        public string PasswordRetype;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel).FullName;
        public List<SelectedItemInfo<int?>> PickListSelectedItemKeys;
        public List<SelectedItemInfo<int?>> Button1SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Button2SelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewContact.NewContactViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.ApplicationUser = ApplicationUser == null
                                       ? null
                                       : ApplicationUser.Convert();
            original.Password = Password;
            original.PasswordRetype = PasswordRetype;
            original.PickListSelectedItems = PickListSelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>>()
                                             : PickListSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(x.SelectedItems.Select(y => ViewModels.NewContact.Suppliers_SupplierDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Button1SelectedItems = Button1SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>>()
                                            : Button1SelectedItemKeys.Select(x => new SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(x.SelectedItems.Select(y => ViewModels.NewContact.Button1DataSet_ApplicationPermissionDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Button2SelectedItems = Button2SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>>()
                                            : Button2SelectedItemKeys.Select(x => new SelectedItemInfo<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(x.SelectedItems.Select(y => ViewModels.NewContact.Button2DataSet_ApplicationRoleDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact))]
    public class ApplicationUser_ContactDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Contact>
    {

        [JsonConstructor]
        public ApplicationUser_ContactDTO() { }
        public ApplicationUser_ContactDTO(DSS1_RetailerDriverStockOptimisation.BO.Contact original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            Email = original.Email;
            Name = original.Name;
            UserName = original.UserName;
            Company = original.Company == null ? null : new ApplicationUser_Contact_Company_CompanyDTO(original.Company);
            Permissions = original.Permissions?.Select(x => new ApplicationUser_Contact_Permissions_ApplicationPermissionDTO(x)).ToList();
            Roles = original.Roles?.Select(x => new ApplicationUser_Contact_Roles_ApplicationRoleDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string Email;
        public string Name;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public ApplicationUser_Contact_Company_CompanyDTO Company;
        public List<ApplicationUser_Contact_Permissions_ApplicationPermissionDTO> Permissions;
        public List<ApplicationUser_Contact_Roles_ApplicationRoleDTO> Roles;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Contact GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Contact>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Contact Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Contact original)
        {
            if (original == null) return;
            original.Email = Email;
            original.Name = Name;
            original.UserName = UserName ?? "";
            original.Company = Company == null
                               ? null
                               : Company.Convert();
            original.Permissions = Permissions == null
                                   ? null
                                   : Permissions.Select(q => q.Convert()).ToList();
            original.Roles = Roles == null
                             ? null
                             : Roles.Select(q => q.Convert()).ToList();
        }
        public static ApplicationUser_ContactDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ApplicationUser_ContactDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    public class ApplicationUser_Contact_Company_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {

        [JsonConstructor]
        public ApplicationUser_Contact_Company_CompanyDTO() { }
        public ApplicationUser_Contact_Company_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Company GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Company>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Company();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ApplicationUser_Contact_Company_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ApplicationUser_Contact_Company_CompanyDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission))]
    public class ApplicationUser_Contact_Permissions_ApplicationPermissionDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>
    {

        [JsonConstructor]
        public ApplicationUser_Contact_Permissions_ApplicationPermissionDTO() { }
        public ApplicationUser_Contact_Permissions_ApplicationPermissionDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission).FullName;
        public override List<string> _baseClasses => null;
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission();
            }
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ApplicationUser_Contact_Permissions_ApplicationPermissionDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ApplicationUser_Contact_Permissions_ApplicationPermissionDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole))]
    public class ApplicationUser_Contact_Roles_ApplicationRoleDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>
    {

        [JsonConstructor]
        public ApplicationUser_Contact_Roles_ApplicationRoleDTO() { }
        public ApplicationUser_Contact_Roles_ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole).FullName;
        public override List<string> _baseClasses => null;
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            }
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ApplicationUser_Contact_Roles_ApplicationRoleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ApplicationUser_Contact_Roles_ApplicationRoleDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission))]
    public class ApplicationPermissionDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;


        [JsonConstructor]
        public ApplicationPermissionDTO() : base() {}
        public  static ApplicationPermissionDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ApplicationPermissionDTO(foundEntry);
            }
            return null;
        }
        public ApplicationPermissionDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ApplicationPermissionDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole))]
    public class ApplicationRoleDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;


        [JsonConstructor]
        public ApplicationRoleDTO() : base() {}
        public  static ApplicationRoleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ApplicationRoleDTO(foundEntry);
            }
            return null;
        }
        public ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationRole GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission))]
    [DataSetDTO]
    public class Button1DataSet_ApplicationPermissionDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;


        [JsonConstructor]
        public Button1DataSet_ApplicationPermissionDTO() : base() {}
        public  static Button1DataSet_ApplicationPermissionDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Button1DataSet_ApplicationPermissionDTO(foundEntry);
            }
            return null;
        }
        public Button1DataSet_ApplicationPermissionDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Button1DataSet_ApplicationPermissionDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole))]
    [DataSetDTO]
    public class Button2DataSet_ApplicationRoleDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;


        [JsonConstructor]
        public Button2DataSet_ApplicationRoleDTO() : base() {}
        public  static Button2DataSet_ApplicationRoleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Button2DataSet_ApplicationRoleDTO(foundEntry);
            }
            return null;
        }
        public Button2DataSet_ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Button2DataSet_ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationRole GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class Suppliers_SupplierDTO : Suppliers_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Name;


        [JsonConstructor]
        public Suppliers_SupplierDTO() : base() {}
        public new static Suppliers_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_SupplierDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
            Name = original.Name;
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class Suppliers_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Name;


        [JsonConstructor]
        public Suppliers_CompanyDTO() : base() {}
        public  static Suppliers_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewContactController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_CompanyDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
            Name = original.Name;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    #endregion

}
