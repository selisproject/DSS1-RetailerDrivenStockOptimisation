// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.NewDashboard;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard
{
    public class NewDashboardViewModel : MasterPageViewModel
    {
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Warehouse;
        public string SKU;
        public int? LocId;
        public string ItemDesc;
        public int? warehouseid;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Notification> Notifications;
        public DateTime? FromDate;
        public DateTime? ToDate;
        public DSS1_RetailerDriverStockOptimisation.BO.Category Category;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory SubCategory;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit BaseUnit;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit BusinessUnit;
        public DSS1_RetailerDriverStockOptimisation.BO.Item Item;
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Supplier;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>> ddlBusinessUnitSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>> ddlCategorySelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>> ddlSubcategorySelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>> ddlBaseunitSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> ddlSKUSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>> ddlSupplierSelectedItems;
        public List<SelectedItemInfo<string>> ddlWarehouseSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>> Chart1SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>> Chart3SelectedItems;


        public NewDashboardViewModel()
        {
            Warehouse = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            Notifications = new List<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            Category = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            SubCategory = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            BaseUnit = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            BusinessUnit = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            Item = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            Supplier = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Warehouse))
            {
                manager.Session.Evict(Warehouse);
            }
            if (Notifications != null)
            {
                foreach (var item in Notifications)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(Category))
            {
                manager.Session.Evict(Category);
            }
            if (manager.Session.Contains(SubCategory))
            {
                manager.Session.Evict(SubCategory);
            }
            if (manager.Session.Contains(BaseUnit))
            {
                manager.Session.Evict(BaseUnit);
            }
            if (manager.Session.Contains(BusinessUnit))
            {
                manager.Session.Evict(BusinessUnit);
            }
            if (manager.Session.Contains(Item))
            {
                manager.Session.Evict(Item);
            }
            if (manager.Session.Contains(Supplier))
            {
                manager.Session.Evict(Supplier);
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel))]
    public class NewDashboardViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel>
    {

        [JsonConstructor]
        public NewDashboardViewModelDTO() { }
        public NewDashboardViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Warehouse = original.Warehouse == null ? null : new Warehouse_WarehouseDTO(original.Warehouse);
            SKU = original.SKU;
            LocId = original.LocId;
            ItemDesc = original.ItemDesc;
            warehouseid = original.warehouseid;
            Notifications = original.Notifications?.Select(x => new Notifications_NotificationDTO(x)).ToList();
            FromDate = original.FromDate;
            ToDate = original.ToDate;
            Category = original.Category == null ? null : new Category_CategoryDTO(original.Category);
            SubCategory = original.SubCategory == null ? null : new SubCategory_SubCategoryDTO(original.SubCategory);
            BaseUnit = original.BaseUnit == null ? null : new BaseUnit_BaseUnitDTO(original.BaseUnit);
            BusinessUnit = original.BusinessUnit == null ? null : new BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Item = original.Item == null ? null : new Item_ItemDTO(original.Item);
            Supplier = original.Supplier == null ? null : new Supplier_SupplierDTO(original.Supplier);
            ddlBusinessUnitSelectedItemKeys = original.ddlBusinessUnitSelectedItems == null
                                              ? null
                                              : original.ddlBusinessUnitSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlCategorySelectedItemKeys = original.ddlCategorySelectedItems == null
                                          ? null
                                          : original.ddlCategorySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSubcategorySelectedItemKeys = original.ddlSubcategorySelectedItems == null
                                             ? null
                                             : original.ddlSubcategorySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlBaseunitSelectedItemKeys = original.ddlBaseunitSelectedItems == null
                                          ? null
                                          : original.ddlBaseunitSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSKUSelectedItemKeys = original.ddlSKUSelectedItems == null
                                     ? null
                                     : original.ddlSKUSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSupplierSelectedItemKeys = original.ddlSupplierSelectedItems == null
                                          ? null
                                          : original.ddlSupplierSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlWarehouseSelectedItemKeys = original.ddlWarehouseSelectedItems == null
                                           ? null
                                           : original.ddlWarehouseSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1SelectedItemKeys = original.Chart1SelectedItems == null
                                     ? null
                                     : original.Chart1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart3SelectedItemKeys = original.Chart3SelectedItems == null
                                     ? null
                                     : original.Chart3SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Warehouse_WarehouseDTO Warehouse;
        public string SKU;
        public int? LocId;
        public string ItemDesc;
        public int? warehouseid;
        public List<Notifications_NotificationDTO> Notifications;
        public DateTime? FromDate;
        public DateTime? ToDate;
        public Category_CategoryDTO Category;
        public SubCategory_SubCategoryDTO SubCategory;
        public BaseUnit_BaseUnitDTO BaseUnit;
        public BusinessUnit_BusinessUnitDTO BusinessUnit;
        public Item_ItemDTO Item;
        public Supplier_SupplierDTO Supplier;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel).FullName;
        public List<SelectedItemInfo<int?>> ddlBusinessUnitSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.BusinessUnitDataSet_BusinessUnitDTO>> ddlBusinessUnit__InitialSelection;
        public List<SelectedItemInfo<int?>> ddlCategorySelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.CategoryDataSet_CategoryDTO>> ddlCategory__InitialSelection;
        public List<SelectedItemInfo<int?>> ddlSubcategorySelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.SubCategoryDataSet_SubCategoryDTO>> ddlSubcategory__InitialSelection;
        public List<SelectedItemInfo<int?>> ddlBaseunitSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.BaseUnitDataSet_BaseUnitDTO>> ddlBaseunit__InitialSelection;
        public List<SelectedItemInfo<string>> ddlSKUSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.ItemDataSet_ItemDTO>> ddlSKU__InitialSelection;
        public List<SelectedItemInfo<int?>> ddlSupplierSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.NewDashboard.Suppliers_SupplierDTO>> ddlSupplier__InitialSelection;
        public List<SelectedItemInfo<string>> ddlWarehouseSelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart1SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart3SelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.NewDashboard.NewDashboardViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.SKU = SKU;
            original.LocId = LocId;
            original.ItemDesc = ItemDesc;
            original.warehouseid = warehouseid;
            original.Notifications = Notifications == null
                                     ? null
                                     : Notifications.Select(q => q.Convert()).ToList();
            original.FromDate = FromDate;
            original.ToDate = ToDate;
            original.Category = Category == null
                                ? null
                                : Category.Convert();
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Convert();
            original.BaseUnit = BaseUnit == null
                                ? null
                                : BaseUnit.Convert();
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.ddlBusinessUnitSelectedItems = ddlBusinessUnitSelectedItemKeys == null
                                                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>>()
                                                    : ddlBusinessUnitSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(x.SelectedItems.Select(y => ViewModels.NewDashboard.BusinessUnitDataSet_BusinessUnitDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlCategorySelectedItems = ddlCategorySelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>>()
                                                : ddlCategorySelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>(x.SelectedItems.Select(y => ViewModels.NewDashboard.CategoryDataSet_CategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSubcategorySelectedItems = ddlSubcategorySelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>>()
                                                   : ddlSubcategorySelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(x.SelectedItems.Select(y => ViewModels.NewDashboard.SubCategoryDataSet_SubCategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlBaseunitSelectedItems = ddlBaseunitSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>>()
                                                : ddlBaseunitSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(x.SelectedItems.Select(y => ViewModels.NewDashboard.BaseUnitDataSet_BaseUnitDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSKUSelectedItems = ddlSKUSelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                           : ddlSKUSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.NewDashboard.ItemDataSet_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSupplierSelectedItems = ddlSupplierSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>>()
                                                : ddlSupplierSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(x.SelectedItems.Select(y => ViewModels.NewDashboard.Suppliers_SupplierDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlWarehouseSelectedItems = ddlWarehouseSelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<string>>()
                                                 : ddlWarehouseSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1SelectedItems = Chart1SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>>()
                                           : Chart1SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(x.SelectedItems.Select(y => ViewModels.NewDashboard.ForecastVS_StatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart3SelectedItems = Chart3SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>>()
                                           : Chart3SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(x.SelectedItems.Select(y => ViewModels.NewDashboard.StockDataSet_StatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(NewDashboardViewModel original, NewDashboardController _controller)
        {
            ddlBusinessUnit__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.BusinessUnitDataSet_BusinessUnitDTO>>();
            ddlCategory__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.CategoryDataSet_CategoryDTO>>();
            ddlSubcategory__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.SubCategoryDataSet_SubCategoryDTO>>();
            ddlBaseunit__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.BaseUnitDataSet_BaseUnitDTO>>();
            ddlSKU__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.ItemDataSet_ItemDTO>>();
            ddlSupplier__InitialSelection = new List<SelectedItemInfo<ViewModels.NewDashboard.Suppliers_SupplierDTO>>();
            if (original == null) return;
            var ddlBusinessUnitInitiallySelectedItem = original?.BusinessUnit == null
                    ? null
                    : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(c => c.Id == original.BusinessUnit.Id).FirstOrDefault();
            if (ddlBusinessUnitInitiallySelectedItem != null)
            {
                ddlBusinessUnit__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.BusinessUnitDataSet_BusinessUnitDTO>(new List<ViewModels.NewDashboard.BusinessUnitDataSet_BusinessUnitDTO>
                {
                    new BusinessUnitDataSet_BusinessUnitDTO(ddlBusinessUnitInitiallySelectedItem)
                }, "_", false)
                );
            }
            var ddlCategoryInitiallySelectedItem = original?.Category == null
                                                   ? null
                                                   : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Category>(c => c.Id == original.Category.Id).FirstOrDefault();
            if (ddlCategoryInitiallySelectedItem != null)
            {
                ddlCategory__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.CategoryDataSet_CategoryDTO>(new List<ViewModels.NewDashboard.CategoryDataSet_CategoryDTO>
                {
                    new CategoryDataSet_CategoryDTO(ddlCategoryInitiallySelectedItem)
                }, "_", false)
                );
            }
            var ddlSubcategoryInitiallySelectedItem = original?.SubCategory == null
                    ? null
                    : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(c => c.Id == original.SubCategory.Id).FirstOrDefault();
            if (ddlSubcategoryInitiallySelectedItem != null)
            {
                ddlSubcategory__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.SubCategoryDataSet_SubCategoryDTO>(new List<ViewModels.NewDashboard.SubCategoryDataSet_SubCategoryDTO>
                {
                    new SubCategoryDataSet_SubCategoryDTO(ddlSubcategoryInitiallySelectedItem)
                }, "_", false)
                );
            }
            var ddlBaseunitInitiallySelectedItem = original?.BaseUnit == null
                                                   ? null
                                                   : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(c => c.Id == original.BaseUnit.Id).FirstOrDefault();
            if (ddlBaseunitInitiallySelectedItem != null)
            {
                ddlBaseunit__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.BaseUnitDataSet_BaseUnitDTO>(new List<ViewModels.NewDashboard.BaseUnitDataSet_BaseUnitDTO>
                {
                    new BaseUnitDataSet_BaseUnitDTO(ddlBaseunitInitiallySelectedItem)
                }, "_", false)
                );
            }
            var ddlSKUInitiallySelectedItem = original?.Item == null
                                              ? null
                                              : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(c => c.SKU == original.Item.SKU).FirstOrDefault();
            if (ddlSKUInitiallySelectedItem != null)
            {
                ddlSKU__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.ItemDataSet_ItemDTO>(new List<ViewModels.NewDashboard.ItemDataSet_ItemDTO>
                {
                    new ItemDataSet_ItemDTO(ddlSKUInitiallySelectedItem)
                }, "_", false)
                );
            }
            var ddlSupplierInitiallySelectedItem = original?.Supplier == null
                                                   ? null
                                                   : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(c => c.Id == original.Supplier.Id).FirstOrDefault();
            if (ddlSupplierInitiallySelectedItem != null)
            {
                ddlSupplier__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.NewDashboard.Suppliers_SupplierDTO>(new List<ViewModels.NewDashboard.Suppliers_SupplierDTO>
                {
                    new Suppliers_SupplierDTO(ddlSupplierInitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Warehouse_WarehouseDTO() { }
        public Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class Notifications_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {

        [JsonConstructor]
        public Notifications_NotificationDTO() { }
        public Notifications_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Diff = original.Diff;
            Id = original.Id;
            OrderForecastQuantity = original.OrderForecastQuantity;
            SalesForecastDate = original.SalesForecastDate;
            TotalSupplierStock = original.TotalSupplierStock;
            Item = original.Item == null ? null : new Notifications_Notification_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Notifications_Notification_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Diff;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? OrderForecastQuantity;
        public DateTime? SalesForecastDate;
        public int? TotalSupplierStock;
        public Notifications_Notification_Item_ItemDTO Item;
        public Notifications_Notification_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Notification GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Notification>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if (original == null) return;
            original.Diff = Diff;
            original.Id = Id ?? 0;
            original.OrderForecastQuantity = OrderForecastQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.TotalSupplierStock = TotalSupplierStock;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Notifications_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Notifications_NotificationDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Notifications_Notification_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Notifications_Notification_Item_ItemDTO() { }
        public Notifications_Notification_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Notifications_Notification_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Notifications_Notification_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Notifications_Notification_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Notifications_Notification_Warehouse_WarehouseDTO() { }
        public Notifications_Notification_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Notifications_Notification_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Notifications_Notification_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class Category_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public Category_CategoryDTO() { }
        public Category_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            SubCategory = original.SubCategory?.Select(x => new Category_Category_SubCategory_SubCategoryDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public List<Category_Category_SubCategory_SubCategoryDTO> SubCategory;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Category_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Category_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class Category_Category_SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public Category_Category_SubCategory_SubCategoryDTO() { }
        public Category_Category_SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Category_Category_SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Category_Category_SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public SubCategory_SubCategoryDTO() { }
        public SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            BaseUnits = original.BaseUnits?.Select(x => new SubCategory_SubCategory_BaseUnits_BaseUnitDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public List<SubCategory_SubCategory_BaseUnits_BaseUnitDTO> BaseUnits;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.BaseUnits = BaseUnits == null
                                 ? null
                                 : BaseUnits.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class SubCategory_SubCategory_BaseUnits_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public SubCategory_SubCategory_BaseUnits_BaseUnitDTO() { }
        public SubCategory_SubCategory_BaseUnits_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SubCategory_SubCategory_BaseUnits_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SubCategory_SubCategory_BaseUnits_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class BaseUnit_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public BaseUnit_BaseUnitDTO() { }
        public BaseUnit_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static BaseUnit_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new BaseUnit_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public BusinessUnit_BusinessUnitDTO() { }
        public BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Categories = original.Categories?.Select(x => new BusinessUnit_BusinessUnit_Categories_CategoryDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public List<BusinessUnit_BusinessUnit_Categories_CategoryDTO> Categories;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Categories = Categories == null
                                  ? null
                                  : Categories.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class BusinessUnit_BusinessUnit_Categories_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public BusinessUnit_BusinessUnit_Categories_CategoryDTO() { }
        public BusinessUnit_BusinessUnit_Categories_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static BusinessUnit_BusinessUnit_Categories_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new BusinessUnit_BusinessUnit_Categories_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Item_ItemDTO() { }
        public Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            Supplier = original.Supplier == null ? null : new Item_Item_Supplier_SupplierDTO(original.Supplier);
            BusinessUnit = original.BusinessUnit == null ? null : new Item_Item_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Category = original.Category == null ? null : new Item_Item_Category_CategoryDTO(original.Category);
            SubCategory = original.SubCategory == null ? null : new Item_Item_SubCategory_SubCategoryDTO(original.SubCategory);
            BaseUnit = original.BaseUnit == null ? null : new Item_Item_BaseUnit_BaseUnitDTO(original.BaseUnit);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public Item_Item_Supplier_SupplierDTO Supplier;
        public Item_Item_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public Item_Item_Category_CategoryDTO Category;
        public Item_Item_SubCategory_SubCategoryDTO SubCategory;
        public Item_Item_BaseUnit_BaseUnitDTO BaseUnit;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Category = Category == null
                                ? null
                                : Category.Convert();
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Convert();
            original.BaseUnit = BaseUnit == null
                                ? null
                                : BaseUnit.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Item_Item_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Item_Item_Supplier_SupplierDTO() { }
        public Item_Item_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static Item_Item_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_Item_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class Item_Item_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public Item_Item_BusinessUnit_BusinessUnitDTO() { }
        public Item_Item_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_Item_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_Item_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class Item_Item_Category_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public Item_Item_Category_CategoryDTO() { }
        public Item_Item_Category_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_Item_Category_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_Item_Category_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class Item_Item_SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public Item_Item_SubCategory_SubCategoryDTO() { }
        public Item_Item_SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_Item_SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_Item_SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class Item_Item_BaseUnit_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public Item_Item_BaseUnit_BaseUnitDTO() { }
        public Item_Item_BaseUnit_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_Item_BaseUnit_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_Item_BaseUnit_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Supplier_SupplierDTO() { }
        public Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
        }
        public static Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand))]
    [DataSetDTO]
    public class StockOnHandDataSet_StockOnHandDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StockOnHandDataSet_StockOnHandDTO() : base() {}
        public  static StockOnHandDataSet_StockOnHandDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockOnHandDataSet_StockOnHandDTO(foundEntry);
            }
            return null;
        }
        public StockOnHandDataSet_StockOnHandDTO(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockOnHandDataSet_StockOnHandDTO(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.StockOnHand GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.StockOnHand Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.StockOnHand();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails))]
    [DataSetDTO]
    public class SalesForecastDataSet_SalesForecastDetailsDTO : SalesForecastDataSet_SalesDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SalesForecastDataSet_SalesForecastDetailsDTO() : base() {}
        public new static SalesForecastDataSet_SalesForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SalesForecastDataSet_SalesForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public SalesForecastDataSet_SalesForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SalesForecastDataSet_SalesForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Sales))]
    [DataSetDTO]
    public class SalesForecastDataSet_SalesDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Sales>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Sales).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SalesForecastDataSet_SalesDTO() : base() {}
        public  static SalesForecastDataSet_SalesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Sales>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Sales>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SalesForecastDataSet_SalesDTO(foundEntry);
            }
            return null;
        }
        public SalesForecastDataSet_SalesDTO(DSS1_RetailerDriverStockOptimisation.BO.Sales original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SalesForecastDataSet_SalesDTO(DSS1_RetailerDriverStockOptimisation.BO.Sales original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Sales GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Sales>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Sales Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Sales();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Sales>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StatisticsDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StatisticsDataSet_StatisticsDTO() : base() {}
        public  static StatisticsDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StatisticsDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StatisticsDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StatisticsDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StatisticsSKUDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StatisticsSKUDataSet_StatisticsDTO() : base() {}
        public  static StatisticsSKUDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StatisticsSKUDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StatisticsSKUDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StatisticsSKUDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class UnitsSKUDataset_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public UnitsSKUDataset_StatisticsDTO() : base() {}
        public  static UnitsSKUDataset_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitsSKUDataset_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public UnitsSKUDataset_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitsSKUDataset_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StockDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SalesForecastDateFormatted;
        public int? TotalUnits;


        [JsonConstructor]
        public StockDataSet_StatisticsDTO() : base() {}
        public  static StockDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SalesForecastDateFormatted = original.SalesForecastDateFormatted;
            TotalUnits = original.TotalUnits;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.SalesForecastDateFormatted = SalesForecastDateFormatted;
            model.TotalUnits = TotalUnits;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule))]
    [DataSetDTO]
    public class DeliveryScheduleDataSet_DeliveryScheduleDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DeliveryScheduleDataSet_DeliveryScheduleDTO() : base() {}
        public  static DeliveryScheduleDataSet_DeliveryScheduleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DeliveryScheduleDataSet_DeliveryScheduleDTO(foundEntry);
            }
            return null;
        }
        public DeliveryScheduleDataSet_DeliveryScheduleDTO(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DeliveryScheduleDataSet_DeliveryScheduleDTO(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class LeadTimeDayDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public LeadTimeDayDataSet_StatisticsDTO() : base() {}
        public  static LeadTimeDayDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new LeadTimeDayDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public LeadTimeDayDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public LeadTimeDayDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemDataSet_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ItemDataSet_ItemDTO() : base() {}
        public  static ItemDataSet_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemDataSet_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemDataSet_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemDataSet_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StockSKUDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StockSKUDataSet_StatisticsDTO() : base() {}
        public  static StockSKUDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockSKUDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StockSKUDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockSKUDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    [DataSetDTO]
    public class CategoryDataSet_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public CategoryDataSet_CategoryDTO() : base() {}
        public  static CategoryDataSet_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CategoryDataSet_CategoryDTO(foundEntry);
            }
            return null;
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Category GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class SubCategoryDataSet_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public SubCategoryDataSet_SubCategoryDTO() : base() {}
        public  static SubCategoryDataSet_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDataSet_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    [DataSetDTO]
    public class BusinessUnitDataSet_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public BusinessUnitDataSet_BusinessUnitDTO() : base() {}
        public  static BusinessUnitDataSet_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessUnitDataSet_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    [DataSetDTO]
    public class BaseUnitDataSet_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public BaseUnitDataSet_BaseUnitDTO() : base() {}
        public  static BaseUnitDataSet_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BaseUnitDataSet_BaseUnitDTO(foundEntry);
            }
            return null;
        }
        public BaseUnitDataSet_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BaseUnitDataSet_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class Suppliers_SupplierDTO : Suppliers_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public Suppliers_SupplierDTO() : base() {}
        public new static Suppliers_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_SupplierDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class Suppliers_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public Suppliers_CompanyDTO() : base() {}
        public  static Suppliers_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_CompanyDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class ForecastVS_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public int? SupplierStock;
        public int? TotalUnits;


        [JsonConstructor]
        public ForecastVS_StatisticsDTO() : base() {}
        public  static ForecastVS_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new NewDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ForecastVS_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            SupplierStock = original.SupplierStock;
            TotalUnits = original.TotalUnits;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.SupplierStock = SupplierStock;
            model.TotalUnits = TotalUnits;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
