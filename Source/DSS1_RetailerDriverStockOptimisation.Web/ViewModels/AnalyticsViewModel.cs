// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.Analytics;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics
{
    public class AnalyticsViewModel : MasterPageViewModel
    {
        public int? TotalRequest;
        public List<DSS1_RetailerDriverStockOptimisation.BO.RequestLog> Logs;
        public string MaxElapseMsecs;
        public string MinElapseMsecs;
        public string AvgElapseMsecs;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Buckets> Top5Service;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Buckets> Top5Operation;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Buckets> Top5Consumer;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Buckets> ErrorRequest;
        public List<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket> RequestOverTime;
        public string TimeRange;
        public List<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket> RequestLatency;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>> Chart13SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>> Chart131SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>> Chart1SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>> Chart11SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>> Chart12SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>> Chart121SelectedItems;


        public AnalyticsViewModel()
        {
            Logs = new List<DSS1_RetailerDriverStockOptimisation.BO.RequestLog>();
            Top5Service = new List<DSS1_RetailerDriverStockOptimisation.BO.Buckets>();
            Top5Operation = new List<DSS1_RetailerDriverStockOptimisation.BO.Buckets>();
            Top5Consumer = new List<DSS1_RetailerDriverStockOptimisation.BO.Buckets>();
            ErrorRequest = new List<DSS1_RetailerDriverStockOptimisation.BO.Buckets>();
            RequestOverTime = new List<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>();
            RequestLatency = new List<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (Logs != null)
            {
                foreach (var item in Logs)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Top5Service != null)
            {
                foreach (var item in Top5Service)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Top5Operation != null)
            {
                foreach (var item in Top5Operation)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Top5Consumer != null)
            {
                foreach (var item in Top5Consumer)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (ErrorRequest != null)
            {
                foreach (var item in ErrorRequest)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (RequestOverTime != null)
            {
                foreach (var item in RequestOverTime)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (RequestLatency != null)
            {
                foreach (var item in RequestLatency)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel))]
    public class AnalyticsViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel>
    {

        [JsonConstructor]
        public AnalyticsViewModelDTO() { }
        public AnalyticsViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            TotalRequest = original.TotalRequest;
            Logs = original.Logs?.Select(x => new Logs_RequestLogDTO(x)).ToList();
            MaxElapseMsecs = original.MaxElapseMsecs;
            MinElapseMsecs = original.MinElapseMsecs;
            AvgElapseMsecs = original.AvgElapseMsecs;
            Top5Service = original.Top5Service?.Select(x => new Top5Service_BucketsDTO(x)).ToList();
            Top5Operation = original.Top5Operation?.Select(x => new Top5Operation_BucketsDTO(x)).ToList();
            Top5Consumer = original.Top5Consumer?.Select(x => new Top5Consumer_BucketsDTO(x)).ToList();
            ErrorRequest = original.ErrorRequest?.Select(x => new ErrorRequest_BucketsDTO(x)).ToList();
            RequestOverTime = original.RequestOverTime?.Select(x => new RequestOverTime_HIstogramBucketDTO(x)).ToList();
            TimeRange = original.TimeRange;
            RequestLatency = original.RequestLatency?.Select(x => new RequestLatency_HIstogramBucketDTO(x)).ToList();
            Chart13SelectedItemKeys = original.Chart13SelectedItems == null
                                      ? null
                                      : original.Chart13SelectedItems.Select(x => new SelectedItemInfo<decimal?>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart131SelectedItemKeys = original.Chart131SelectedItems == null
                                       ? null
                                       : original.Chart131SelectedItems.Select(x => new SelectedItemInfo<decimal?>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1SelectedItemKeys = original.Chart1SelectedItems == null
                                     ? null
                                     : original.Chart1SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart11SelectedItemKeys = original.Chart11SelectedItems == null
                                      ? null
                                      : original.Chart11SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart12SelectedItemKeys = original.Chart12SelectedItems == null
                                      ? null
                                      : original.Chart12SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart121SelectedItemKeys = original.Chart121SelectedItems == null
                                       ? null
                                       : original.Chart121SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.key).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public int? TotalRequest;
        public List<Logs_RequestLogDTO> Logs;
        public string MaxElapseMsecs;
        public string MinElapseMsecs;
        public string AvgElapseMsecs;
        public List<Top5Service_BucketsDTO> Top5Service;
        public List<Top5Operation_BucketsDTO> Top5Operation;
        public List<Top5Consumer_BucketsDTO> Top5Consumer;
        public List<ErrorRequest_BucketsDTO> ErrorRequest;
        public List<RequestOverTime_HIstogramBucketDTO> RequestOverTime;
        public string TimeRange;
        public List<RequestLatency_HIstogramBucketDTO> RequestLatency;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel).FullName;
        public List<SelectedItemInfo<decimal?>> Chart13SelectedItemKeys;
        public List<SelectedItemInfo<decimal?>> Chart131SelectedItemKeys;
        public List<SelectedItemInfo<string>> Chart1SelectedItemKeys;
        public List<SelectedItemInfo<string>> Chart11SelectedItemKeys;
        public List<SelectedItemInfo<string>> Chart12SelectedItemKeys;
        public List<SelectedItemInfo<string>> Chart121SelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Analytics.AnalyticsViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.TotalRequest = TotalRequest;
            original.Logs = Logs == null
                            ? null
                            : Logs.Select(q => q.Convert()).ToList();
            original.MaxElapseMsecs = MaxElapseMsecs;
            original.MinElapseMsecs = MinElapseMsecs;
            original.AvgElapseMsecs = AvgElapseMsecs;
            original.Top5Service = Top5Service == null
                                   ? null
                                   : Top5Service.Select(q => q.Convert()).ToList();
            original.Top5Operation = Top5Operation == null
                                     ? null
                                     : Top5Operation.Select(q => q.Convert()).ToList();
            original.Top5Consumer = Top5Consumer == null
                                    ? null
                                    : Top5Consumer.Select(q => q.Convert()).ToList();
            original.ErrorRequest = ErrorRequest == null
                                    ? null
                                    : ErrorRequest.Select(q => q.Convert()).ToList();
            original.RequestOverTime = RequestOverTime == null
                                       ? null
                                       : RequestOverTime.Select(q => q.Convert()).ToList();
            original.TimeRange = TimeRange;
            original.RequestLatency = RequestLatency == null
                                      ? null
                                      : RequestLatency.Select(q => q.Convert()).ToList();
            original.Chart13SelectedItems = Chart13SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>>()
                                            : Chart13SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>(x.SelectedItems.Select(y => ViewModels.Analytics.RequestOverTimeDataset_HIstogramBucketDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart131SelectedItems = Chart131SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>>()
                                             : Chart131SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>(x.SelectedItems.Select(y => ViewModels.Analytics.RequestLatencyDataset_HIstogramBucketDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1SelectedItems = Chart1SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>>()
                                           : Chart1SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(x.SelectedItems.Select(y => ViewModels.Analytics.Top5ServiceDataset_BucketsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart11SelectedItems = Chart11SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>>()
                                            : Chart11SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(x.SelectedItems.Select(y => ViewModels.Analytics.Top5OperationDataset_BucketsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart12SelectedItems = Chart12SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>>()
                                            : Chart12SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(x.SelectedItems.Select(y => ViewModels.Analytics.Top5ConsumerDataset_BucketsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart121SelectedItems = Chart121SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>>()
                                             : Chart121SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(x.SelectedItems.Select(y => ViewModels.Analytics.ErrorRequestDataset_BucketsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.RequestLog))]
    public class Logs_RequestLogDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.RequestLog>
    {

        [JsonConstructor]
        public Logs_RequestLogDTO() { }
        public Logs_RequestLogDTO(DSS1_RetailerDriverStockOptimisation.BO.RequestLog original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            ClientId = original.ClientId;
            ClientName = original.ClientName;
            ElapsedMsecs = original.ElapsedMsecs;
            IP = original.IP;
            Message = original.Message;
            Operation = original.Operation;
            ProductName = original.ProductName;
            RequestId = original.RequestId;
            RequestMethod = original.RequestMethod;
            RequestPath = original.RequestPath;
            RequestUri = original.RequestUri;
            Service = original.Service;
            StatusCode = original.StatusCode;
            Timestamp = original.Timestamp;
            Username = original.Username;
        }
        public string ClientId;
        public string ClientName;
        public double? ElapsedMsecs;
        public string IP;
        public string Message;
        public string Operation;
        public string ProductName;
        public string RequestId;
        public string RequestMethod;
        public string RequestPath;
        public string RequestUri;
        public string Service;
        public string StatusCode;
        public string Timestamp;
        public string Username;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.RequestLog).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.RequestLog GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.RequestLog>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.RequestLog();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.RequestLog Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.RequestLog();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.RequestLog original)
        {
            if (original == null) return;
            original.ClientId = ClientId;
            original.ClientName = ClientName;
            original.ElapsedMsecs = ElapsedMsecs;
            original.IP = IP;
            original.Message = Message;
            original.Operation = Operation;
            original.ProductName = ProductName;
            original.RequestId = RequestId;
            original.RequestMethod = RequestMethod;
            original.RequestPath = RequestPath;
            original.RequestUri = RequestUri;
            original.Service = Service;
            original.StatusCode = StatusCode;
            original.Timestamp = Timestamp;
            original.Username = Username;
        }
        public  static Logs_RequestLogDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.RequestLog>;
            var foundEntry = records.Where(c => c.RequestLogKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Logs_RequestLogDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    public class Top5Service_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {

        [JsonConstructor]
        public Top5Service_BucketsDTO() { }
        public Top5Service_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            doc_count = original.doc_count;
            key = original.key;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public int? doc_count;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if (original == null) return;
            original.doc_count = doc_count;
            original.key = key ?? "";
        }
        public  static Top5Service_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Buckets>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5Service_BucketsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    public class Top5Operation_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {

        [JsonConstructor]
        public Top5Operation_BucketsDTO() { }
        public Top5Operation_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            doc_count = original.doc_count;
            key = original.key;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public int? doc_count;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if (original == null) return;
            original.doc_count = doc_count;
            original.key = key ?? "";
        }
        public  static Top5Operation_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Buckets>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5Operation_BucketsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    public class Top5Consumer_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {

        [JsonConstructor]
        public Top5Consumer_BucketsDTO() { }
        public Top5Consumer_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            doc_count = original.doc_count;
            key = original.key;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public int? doc_count;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if (original == null) return;
            original.doc_count = doc_count;
            original.key = key ?? "";
        }
        public  static Top5Consumer_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Buckets>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5Consumer_BucketsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    public class ErrorRequest_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {

        [JsonConstructor]
        public ErrorRequest_BucketsDTO() { }
        public ErrorRequest_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            doc_count = original.doc_count;
            key = original.key;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public int? doc_count;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Buckets>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if (original == null) return;
            original.doc_count = doc_count;
            original.key = key ?? "";
        }
        public  static ErrorRequest_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Buckets>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new ErrorRequest_BucketsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket))]
    public class RequestOverTime_HIstogramBucketDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>
    {

        [JsonConstructor]
        public RequestOverTime_HIstogramBucketDTO() { }
        public RequestOverTime_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            avg = original.avg;
            doc_count = original.doc_count;
            error_rate = original.error_rate;
            failure = original.failure;
            key = original.key;
            keyAsString = original.keyAsString;
            max = original.max;
            min = original.min;
            success = original.success;
            sum = original.sum;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public double? avg;
        public int? doc_count;
        public float? error_rate;
        public int? failure;
        public decimal? key;
        public new object _key
        {
            get;
            set;
        }
        public string keyAsString;
        public double? max;
        public double? min;
        public int? success;
        public double? sum;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original)
        {
            if (original == null) return;
            original.avg = avg;
            original.doc_count = doc_count;
            original.error_rate = error_rate;
            original.failure = failure;
            original.key = key ?? 0;
            original.keyAsString = keyAsString;
            original.max = max;
            original.min = min;
            original.success = success;
            original.sum = sum;
        }
        public  static RequestOverTime_HIstogramBucketDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = decimal.Parse(rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new RequestOverTime_HIstogramBucketDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket))]
    public class RequestLatency_HIstogramBucketDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>
    {

        [JsonConstructor]
        public RequestLatency_HIstogramBucketDTO() { }
        public RequestLatency_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.key as object;
            avg = original.avg;
            doc_count = original.doc_count;
            error_rate = original.error_rate;
            failure = original.failure;
            key = original.key;
            keyAsString = original.keyAsString;
            max = original.max;
            min = original.min;
            success = original.success;
            sum = original.sum;
            _clientKey = DTOHelper.GetClientKey(original, key);
        }
        public double? avg;
        public int? doc_count;
        public float? error_rate;
        public int? failure;
        public decimal? key;
        public new object _key
        {
            get;
            set;
        }
        public string keyAsString;
        public double? max;
        public double? min;
        public int? success;
        public double? sum;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
        }
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original)
        {
            if (original == null) return;
            original.avg = avg;
            original.doc_count = doc_count;
            original.error_rate = error_rate;
            original.failure = failure;
            original.key = key ?? 0;
            original.keyAsString = keyAsString;
            original.max = max;
            original.min = min;
            original.success = success;
            original.sum = sum;
        }
        public  static RequestLatency_HIstogramBucketDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = decimal.Parse(rawKey);
            var controller = new AnalyticsController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>;
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new RequestLatency_HIstogramBucketDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.RequestLog))]
    [DataSetDTO]
    public class LogsDataset_RequestLogDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.RequestLog>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.RequestLog).FullName;
        public  string _runtimeType;
        public int? RequestLogKey;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public LogsDataset_RequestLogDTO() : base() {}
        public  static LogsDataset_RequestLogDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var records = new AnalyticsController().Get_Analytics_LogsDataset_DatasourceQueryable();
            var foundEntry = records.Where(c => c.RequestLogKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new LogsDataset_RequestLogDTO(foundEntry);
            }
            return null;
        }
        public LogsDataset_RequestLogDTO(DSS1_RetailerDriverStockOptimisation.BO.RequestLog original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public LogsDataset_RequestLogDTO(DSS1_RetailerDriverStockOptimisation.BO.RequestLog original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.RequestLogKey == 0) ? original._GetUniqueIdentifier() as object : original.RequestLogKey as object;
            _runtimeType = original?.GetType().FullName;
            RequestLogKey = original.RequestLogKey;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.RequestLog GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.RequestLog Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.RequestLog();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.RequestLogKey = RequestLogKey ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    [DataSetDTO]
    public class Top5ServiceDataset_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public  string _runtimeType;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public int? doc_count;


        [JsonConstructor]
        public Top5ServiceDataset_BucketsDTO() : base() {}
        public  static Top5ServiceDataset_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var records = new AnalyticsController().Get_Chart1_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5ServiceDataset_BucketsDTO(foundEntry);
            }
            return null;
        }
        public Top5ServiceDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public Top5ServiceDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == "") ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? "";
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    [DataSetDTO]
    public class Top5OperationDataset_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public  string _runtimeType;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public int? doc_count;


        [JsonConstructor]
        public Top5OperationDataset_BucketsDTO() : base() {}
        public  static Top5OperationDataset_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var records = new AnalyticsController().Get_Chart11_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5OperationDataset_BucketsDTO(foundEntry);
            }
            return null;
        }
        public Top5OperationDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public Top5OperationDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == "") ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? "";
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    [DataSetDTO]
    public class Top5ConsumerDataset_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public  string _runtimeType;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public int? doc_count;


        [JsonConstructor]
        public Top5ConsumerDataset_BucketsDTO() : base() {}
        public  static Top5ConsumerDataset_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var records = new AnalyticsController().Get_Chart12_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Top5ConsumerDataset_BucketsDTO(foundEntry);
            }
            return null;
        }
        public Top5ConsumerDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public Top5ConsumerDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == "") ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? "";
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets))]
    [DataSetDTO]
    public class ErrorRequestDataset_BucketsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Buckets>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Buckets).FullName;
        public  string _runtimeType;
        public string key;
        public new object _key
        {
            get;
            set;
        }
        public int? doc_count;


        [JsonConstructor]
        public ErrorRequestDataset_BucketsDTO() : base() {}
        public  static ErrorRequestDataset_BucketsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var records = new AnalyticsController().Get_Chart121_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new ErrorRequestDataset_BucketsDTO(foundEntry);
            }
            return null;
        }
        public ErrorRequestDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public ErrorRequestDataset_BucketsDTO(DSS1_RetailerDriverStockOptimisation.BO.Buckets original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == "") ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Buckets GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Buckets Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? "";
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket))]
    [DataSetDTO]
    public class RequestOverTimeDataset_HIstogramBucketDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket).FullName;
        public  string _runtimeType;
        public decimal? key;
        public new object _key
        {
            get;
            set;
        }
        public string keyAsString;
        public int? doc_count;


        [JsonConstructor]
        public RequestOverTimeDataset_HIstogramBucketDTO() : base() {}
        public  static RequestOverTimeDataset_HIstogramBucketDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = decimal.Parse(rawKey);
            var records = new AnalyticsController().Get_Chart13_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new RequestOverTimeDataset_HIstogramBucketDTO(foundEntry);
            }
            return null;
        }
        public RequestOverTimeDataset_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public RequestOverTimeDataset_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == 0) ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            keyAsString = original.keyAsString;
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? 0;
            model.keyAsString = keyAsString;
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket))]
    [DataSetDTO]
    public class RequestLatencyDataset_HIstogramBucketDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket).FullName;
        public  string _runtimeType;
        public decimal? key;
        public new object _key
        {
            get;
            set;
        }
        public string keyAsString;
        public int? doc_count;


        [JsonConstructor]
        public RequestLatencyDataset_HIstogramBucketDTO() : base() {}
        public  static RequestLatencyDataset_HIstogramBucketDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = decimal.Parse(rawKey);
            var records = new AnalyticsController().Get_Chart131_DatasourceQueryable();
            var foundEntry = records.Where(c => c.key == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new RequestLatencyDataset_HIstogramBucketDTO(foundEntry);
            }
            return null;
        }
        public RequestLatencyDataset_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public RequestLatencyDataset_HIstogramBucketDTO(DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.key == 0) ? original._GetUniqueIdentifier() as object : original.key as object;
            _runtimeType = original?.GetType().FullName;
            key = original.key;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            keyAsString = original.keyAsString;
            doc_count = original.doc_count;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.key = key ?? 0;
            model.keyAsString = keyAsString;
            model.doc_count = doc_count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
