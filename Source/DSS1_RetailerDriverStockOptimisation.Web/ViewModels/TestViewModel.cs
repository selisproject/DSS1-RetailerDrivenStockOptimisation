// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.Test;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test
{
    public class TestViewModel : MasterPageViewModel
    {
        public string Item;
        public int? BusinessUnitId;
        public int? CategoryId;
        public int? SubCategoryId;
        public int? BaseUnitId;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>> DropdownBox1SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>> DropdownBox2SelectedItems;


        public TestViewModel()
        {
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel))]
    public class TestViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel>
    {

        [JsonConstructor]
        public TestViewModelDTO() { }
        public TestViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Item = original.Item;
            BusinessUnitId = original.BusinessUnitId;
            CategoryId = original.CategoryId;
            SubCategoryId = original.SubCategoryId;
            BaseUnitId = original.BaseUnitId;
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItems == null
                                           ? null
                                           : original.DropdownBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox2SelectedItemKeys = original.DropdownBox2SelectedItems == null
                                           ? null
                                           : original.DropdownBox2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public string Item;
        public int? BusinessUnitId;
        public int? CategoryId;
        public int? SubCategoryId;
        public int? BaseUnitId;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.Test.BusinessUnitDataSet_BusinessUnitDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.Test.CategoryDataSet_CategoryDTO>> DropdownBox1__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox2SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.Test.SubCategoryDataSet_SubCategoryDTO>> DropdownBox2__InitialSelection;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.Test.TestViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Item = Item;
            original.BusinessUnitId = BusinessUnitId;
            original.CategoryId = CategoryId;
            original.SubCategoryId = SubCategoryId;
            original.BaseUnitId = BaseUnitId;
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(x.SelectedItems.Select(y => ViewModels.Test.BusinessUnitDataSet_BusinessUnitDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox1SelectedItems = DropdownBox1SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>>()
                                                 : DropdownBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>(x.SelectedItems.Select(y => ViewModels.Test.CategoryDataSet_CategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox2SelectedItems = DropdownBox2SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>>()
                                                 : DropdownBox2SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(x.SelectedItems.Select(y => ViewModels.Test.SubCategoryDataSet_SubCategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(TestViewModel original, TestController _controller)
        {
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.Test.BusinessUnitDataSet_BusinessUnitDTO>>();
            DropdownBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.Test.CategoryDataSet_CategoryDTO>>();
            DropdownBox2__InitialSelection = new List<SelectedItemInfo<ViewModels.Test.SubCategoryDataSet_SubCategoryDTO>>();
            if (original == null) return;
            var DropdownBoxInitiallySelectedItem = original == null
                                                   ? null
                                                   : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(c => c.Id == original.BusinessUnitId).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.Test.BusinessUnitDataSet_BusinessUnitDTO>(new List<ViewModels.Test.BusinessUnitDataSet_BusinessUnitDTO>
                {
                    new BusinessUnitDataSet_BusinessUnitDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox1InitiallySelectedItem = original == null
                                                    ? null
                                                    : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Category>(c => c.Id == original.CategoryId).FirstOrDefault();
            if (DropdownBox1InitiallySelectedItem != null)
            {
                DropdownBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.Test.CategoryDataSet_CategoryDTO>(new List<ViewModels.Test.CategoryDataSet_CategoryDTO>
                {
                    new CategoryDataSet_CategoryDTO(DropdownBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox2InitiallySelectedItem = original == null
                                                    ? null
                                                    : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(c => c.Id == original.SubCategoryId).FirstOrDefault();
            if (DropdownBox2InitiallySelectedItem != null)
            {
                DropdownBox2__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.Test.SubCategoryDataSet_SubCategoryDTO>(new List<ViewModels.Test.SubCategoryDataSet_SubCategoryDTO>
                {
                    new SubCategoryDataSet_SubCategoryDTO(DropdownBox2InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand))]
    [DataSetDTO]
    public class StockOnHandDataSet_StockOnHandDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StockOnHandDataSet_StockOnHandDTO() : base() {}
        public  static StockOnHandDataSet_StockOnHandDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockOnHandDataSet_StockOnHandDTO(foundEntry);
            }
            return null;
        }
        public StockOnHandDataSet_StockOnHandDTO(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockOnHandDataSet_StockOnHandDTO(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.StockOnHand GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.StockOnHand Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.StockOnHand();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    [DataSetDTO]
    public class BusinessUnitDataSet_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public BusinessUnitDataSet_BusinessUnitDTO() : base() {}
        public  static BusinessUnitDataSet_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessUnitDataSet_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    [DataSetDTO]
    public class CategoryDataSet_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public CategoryDataSet_CategoryDTO() : base() {}
        public  static CategoryDataSet_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CategoryDataSet_CategoryDTO(foundEntry);
            }
            return null;
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Category GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class SubCategoryDataSet_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public SubCategoryDataSet_SubCategoryDTO() : base() {}
        public  static SubCategoryDataSet_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDataSet_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    [DataSetDTO]
    public class BaseUnitDataSet_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public BaseUnitDataSet_BaseUnitDTO() : base() {}
        public  static BaseUnitDataSet_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BaseUnitDataSet_BaseUnitDTO(foundEntry);
            }
            return null;
        }
        public BaseUnitDataSet_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BaseUnitDataSet_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemDataSet_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ItemDataSet_ItemDTO() : base() {}
        public  static ItemDataSet_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new TestController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemDataSet_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemDataSet_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemDataSet_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
