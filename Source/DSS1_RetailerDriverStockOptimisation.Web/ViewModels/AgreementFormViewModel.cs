// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.AgreementForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm
{
    public class AgreementFormViewModel : MasterPageViewModel
    {
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Agreement;
        public List<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule> DeliverySchedules;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> Items;
        public List<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem> InventoryItems;
        public List<SelectedItemInfo<string>> txtStatusSelectedItems;


        public AgreementFormViewModel()
        {
            Agreement = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            DeliverySchedules = new List<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>();
            Items = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            InventoryItems = new List<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Agreement))
            {
                manager.Session.Evict(Agreement);
            }
            if (DeliverySchedules != null)
            {
                foreach (var item in DeliverySchedules)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Items != null)
            {
                foreach (var item in Items)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (InventoryItems != null)
            {
                foreach (var item in InventoryItems)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel))]
    public class AgreementFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel>
    {

        [JsonConstructor]
        public AgreementFormViewModelDTO() { }
        public AgreementFormViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Agreement = original.Agreement == null ? null : new Agreement_AgreementDTO(original.Agreement);
            DeliverySchedules = original.DeliverySchedules?.Select(x => new DeliverySchedules_DeliveryScheduleDTO(x)).ToList();
            Items = original.Items?.Select(x => new Items_ItemDTO(x)).ToList();
            InventoryItems = original.InventoryItems?.Select(x => new InventoryItems_InventoryItemDTO(x)).ToList();
            txtStatusSelectedItemKeys = original.txtStatusSelectedItems == null
                                        ? null
                                        : original.txtStatusSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Agreement_AgreementDTO Agreement;
        public List<DeliverySchedules_DeliveryScheduleDTO> DeliverySchedules;
        public List<Items_ItemDTO> Items;
        public List<InventoryItems_InventoryItemDTO> InventoryItems;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel).FullName;
        public List<SelectedItemInfo<string>> txtStatusSelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AgreementForm.AgreementFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Agreement = Agreement == null
                                 ? null
                                 : Agreement.Convert();
            original.DeliverySchedules = DeliverySchedules == null
                                         ? null
                                         : DeliverySchedules.Select(q => q.Convert()).ToList();
            original.Items = Items == null
                             ? null
                             : Items.Select(q => q.Convert()).ToList();
            original.InventoryItems = InventoryItems == null
                                      ? null
                                      : InventoryItems.Select(q => q.Convert()).ToList();
            original.txtStatusSelectedItems = txtStatusSelectedItemKeys == null
                                              ? new List<SelectedItemInfo<string>>()
                                              : txtStatusSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class Agreement_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public Agreement_AgreementDTO() { }
        public Agreement_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AgreementDocument = original.AgreementDocument;
            DateCreated = original.DateCreated;
            Id = original.Id;
            Profile = original.Profile;
            TargetInventoryDays = original.TargetInventoryDays;
            Supplier = original.Supplier == null ? null : new Agreement_Agreement_Supplier_SupplierDTO(original.Supplier);
            TransportUnCaps = original.TransportUnCaps?.Select(x => new Agreement_Agreement_TransportUnCaps_TransportUnCapDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string AgreementDocument;
        public DateTime? DateCreated;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Profile;
        public int? TargetInventoryDays;
        public Agreement_Agreement_Supplier_SupplierDTO Supplier;
        public List<Agreement_Agreement_TransportUnCaps_TransportUnCapDTO> TransportUnCaps;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.AgreementDocument = AgreementDocument;
            original.DateCreated = DateCreated;
            original.Id = Id ?? 0;
            original.Profile = Profile;
            original.TargetInventoryDays = TargetInventoryDays;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.TransportUnCaps = TransportUnCaps == null
                                       ? null
                                       : TransportUnCaps.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreement_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreement_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Agreement_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Agreement_Agreement_Supplier_SupplierDTO() { }
        public Agreement_Agreement_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static Agreement_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreement_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap))]
    public class Agreement_Agreement_TransportUnCaps_TransportUnCapDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>
    {

        [JsonConstructor]
        public Agreement_Agreement_TransportUnCaps_TransportUnCapDTO() { }
        public Agreement_Agreement_TransportUnCaps_TransportUnCapDTO(DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            PercRound = original.PercRound;
            Status = original.Status;
            Tuc1 = original.Tuc1;
            UOP = original.UOP;
            Warehouse = original.Warehouse == null ? null : new Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? PercRound;
        public string Status;
        public decimal? Tuc1;
        public string UOP;
        public Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.PercRound = PercRound;
            original.Status = Status;
            original.Tuc1 = Tuc1;
            original.UOP = UOP;
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreement_Agreement_TransportUnCaps_TransportUnCapDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreement_Agreement_TransportUnCaps_TransportUnCapDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO() { }
        public Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule))]
    public class DeliverySchedules_DeliveryScheduleDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>
    {

        [JsonConstructor]
        public DeliverySchedules_DeliveryScheduleDTO() { }
        public DeliverySchedules_DeliveryScheduleDTO(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            LeadTime = original.LeadTime;
            NameOfDay = original.NameOfDay;
            Warehouse = original.Warehouse == null ? null : new DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? LeadTime;
        public string NameOfDay;
        public DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.LeadTime = LeadTime;
            original.NameOfDay = NameOfDay;
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static DeliverySchedules_DeliveryScheduleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, true);
            if(foundEntry != null)
            {
                return new DeliverySchedules_DeliveryScheduleDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO() { }
        public DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new DeliverySchedules_DeliverySchedule_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Items_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Items_ItemDTO() { }
        public Items_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            SKU = original.SKU;
            BusinessUnit = original.BusinessUnit == null ? null : new Items_Item_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Category = original.Category == null ? null : new Items_Item_Category_CategoryDTO(original.Category);
            SubCategory = original.SubCategory == null ? null : new Items_Item_SubCategory_SubCategoryDTO(original.SubCategory);
            BaseUnit = original.BaseUnit == null ? null : new Items_Item_BaseUnit_BaseUnitDTO(original.BaseUnit);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? CoverageDays;
        public string Description;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public Items_Item_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public Items_Item_Category_CategoryDTO Category;
        public Items_Item_SubCategory_SubCategoryDTO SubCategory;
        public Items_Item_BaseUnit_BaseUnitDTO BaseUnit;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.SKU = SKU ?? "";
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Category = Category == null
                                ? null
                                : Category.Convert();
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Convert();
            original.BaseUnit = BaseUnit == null
                                ? null
                                : BaseUnit.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Items_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Items_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class Items_Item_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public Items_Item_BusinessUnit_BusinessUnitDTO() { }
        public Items_Item_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Items_Item_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Items_Item_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class Items_Item_Category_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public Items_Item_Category_CategoryDTO() { }
        public Items_Item_Category_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Items_Item_Category_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Items_Item_Category_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class Items_Item_SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public Items_Item_SubCategory_SubCategoryDTO() { }
        public Items_Item_SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Items_Item_SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Items_Item_SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class Items_Item_BaseUnit_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public Items_Item_BaseUnit_BaseUnitDTO() { }
        public Items_Item_BaseUnit_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Items_Item_BaseUnit_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Items_Item_BaseUnit_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem))]
    public class InventoryItems_InventoryItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItemDTO() { }
        public InventoryItems_InventoryItemDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            CoverageDays = original.CoverageDays;
            SafetyStock = original.SafetyStock;
            Status = original.Status;
            Item = original.Item == null ? null : new InventoryItems_InventoryItem_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new InventoryItems_InventoryItem_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? CoverageDays;
        public int? SafetyStock;
        public string Status;
        public InventoryItems_InventoryItem_Item_ItemDTO Item;
        public InventoryItems_InventoryItem_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryItem GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.InventoryItem();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryItem Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.InventoryItem();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.CoverageDays = CoverageDays;
            original.SafetyStock = SafetyStock;
            original.Status = Status;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class InventoryItems_InventoryItem_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Item_ItemDTO() { }
        public InventoryItems_InventoryItem_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            CoverageDays = original.CoverageDays;
            PalletSize = original.PalletSize;
            SupplierPackSize = original.SupplierPackSize;
            InnerPackSize = original.InnerPackSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            PalHI = original.PalHI;
            UOM = original.UOM;
            BusinessUnit = original.BusinessUnit == null ? null : new InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Category = original.Category == null ? null : new InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO(original.Category);
            SubCategory = original.SubCategory == null ? null : new InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO(original.SubCategory);
            BaseUnit = original.BaseUnit == null ? null : new InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO(original.BaseUnit);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public int? CoverageDays;
        public int? PalletSize;
        public int? SupplierPackSize;
        public int? InnerPackSize;
        public string PalletType;
        public int? PalTI;
        public int? PalHI;
        public string UOM;
        public InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO Category;
        public InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO SubCategory;
        public InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO BaseUnit;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.CoverageDays = CoverageDays;
            original.PalletSize = PalletSize;
            original.SupplierPackSize = SupplierPackSize;
            original.InnerPackSize = InnerPackSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.PalHI = PalHI;
            original.UOM = UOM;
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Category = Category == null
                                ? null
                                : Category.Convert();
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Convert();
            original.BaseUnit = BaseUnit == null
                                ? null
                                : BaseUnit.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO() { }
        public InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO() { }
        public InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Item_Item_Category_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO() { }
        public InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO() { }
        public InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class InventoryItems_InventoryItem_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public InventoryItems_InventoryItem_Warehouse_WarehouseDTO() { }
        public InventoryItems_InventoryItem_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static InventoryItems_InventoryItem_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new InventoryItems_InventoryItem_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs

    #endregion

}
