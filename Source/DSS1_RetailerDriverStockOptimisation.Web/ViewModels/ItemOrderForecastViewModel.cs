// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.ItemOrderForecast;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast
{
    public class ItemOrderForecastViewModel : MasterPageViewModel
    {
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> OrderProposals;
        public DSS1_RetailerDriverStockOptimisation.BO.Item Item;
        public int? SupplierId;
        public string SKU;
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Supplier;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart107;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart105;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart108;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart104;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart1243;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic> Chart1284;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> DropdownBox1SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart107SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart108SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart105SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart104SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart1243SelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>> Chart1284SelectedItems;


        public ItemOrderForecastViewModel()
        {
            OrderProposals = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            Item = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            Supplier = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            Chart107 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            Chart105 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            Chart108 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            Chart104 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            Chart1243 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
            Chart1284 = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (OrderProposals != null)
            {
                foreach (var item in OrderProposals)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(Item))
            {
                manager.Session.Evict(Item);
            }
            if (manager.Session.Contains(Supplier))
            {
                manager.Session.Evict(Supplier);
            }
            if (Chart107 != null)
            {
                foreach (var item in Chart107)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Chart105 != null)
            {
                foreach (var item in Chart105)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Chart108 != null)
            {
                foreach (var item in Chart108)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Chart104 != null)
            {
                foreach (var item in Chart104)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Chart1243 != null)
            {
                foreach (var item in Chart1243)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Chart1284 != null)
            {
                foreach (var item in Chart1284)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel))]
    public class ItemOrderForecastViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel>
    {

        [JsonConstructor]
        public ItemOrderForecastViewModelDTO() { }
        public ItemOrderForecastViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            OrderProposals = original.OrderProposals?.Select(x => new OrderProposals_OrderForecastDetailsDTO(x)).ToList();
            Item = original.Item == null ? null : new Item_ItemDTO(original.Item);
            SupplierId = original.SupplierId;
            SKU = original.SKU;
            Supplier = original.Supplier == null ? null : new Supplier_SupplierDTO(original.Supplier);
            Chart107 = original.Chart107?.Select(x => new Chart107_OrderForecastStatisticDTO(x)).ToList();
            Chart105 = original.Chart105?.Select(x => new Chart105_OrderForecastStatisticDTO(x)).ToList();
            Chart108 = original.Chart108?.Select(x => new Chart108_OrderForecastStatisticDTO(x)).ToList();
            Chart104 = original.Chart104?.Select(x => new Chart104_OrderForecastStatisticDTO(x)).ToList();
            Chart1243 = original.Chart1243?.Select(x => new Chart1243_OrderForecastStatisticDTO(x)).ToList();
            Chart1284 = original.Chart1284?.Select(x => new Chart1284_OrderForecastStatisticDTO(x)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItems == null
                                           ? null
                                           : original.DropdownBox1SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart107SelectedItemKeys = original.Chart107SelectedItems == null
                                       ? null
                                       : original.Chart107SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart108SelectedItemKeys = original.Chart108SelectedItems == null
                                       ? null
                                       : original.Chart108SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart105SelectedItemKeys = original.Chart105SelectedItems == null
                                       ? null
                                       : original.Chart105SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart104SelectedItemKeys = original.Chart104SelectedItems == null
                                       ? null
                                       : original.Chart104SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1243SelectedItemKeys = original.Chart1243SelectedItems == null
                                        ? null
                                        : original.Chart1243SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1284SelectedItemKeys = original.Chart1284SelectedItems == null
                                        ? null
                                        : original.Chart1284SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public List<OrderProposals_OrderForecastDetailsDTO> OrderProposals;
        public Item_ItemDTO Item;
        public int? SupplierId;
        public string SKU;
        public Supplier_SupplierDTO Supplier;
        public List<Chart107_OrderForecastStatisticDTO> Chart107;
        public List<Chart105_OrderForecastStatisticDTO> Chart105;
        public List<Chart108_OrderForecastStatisticDTO> Chart108;
        public List<Chart104_OrderForecastStatisticDTO> Chart104;
        public List<Chart1243_OrderForecastStatisticDTO> Chart1243;
        public List<Chart1284_OrderForecastStatisticDTO> Chart1284;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ItemOrderForecast.Suppliers_SupplierDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<string>> DropdownBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ItemOrderForecast.Items_ItemDTO>> DropdownBox1__InitialSelection;
        public List<SelectedItemInfo<int?>> Chart107SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart108SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart105SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart104SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart1243SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart1284SelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.OrderProposals = OrderProposals == null
                                      ? null
                                      : OrderProposals.Select(q => q.Convert()).ToList();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.SupplierId = SupplierId;
            original.SKU = SKU;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.Chart107 = Chart107 == null
                                ? null
                                : Chart107.Select(q => q.Convert()).ToList();
            original.Chart105 = Chart105 == null
                                ? null
                                : Chart105.Select(q => q.Convert()).ToList();
            original.Chart108 = Chart108 == null
                                ? null
                                : Chart108.Select(q => q.Convert()).ToList();
            original.Chart104 = Chart104 == null
                                ? null
                                : Chart104.Select(q => q.Convert()).ToList();
            original.Chart1243 = Chart1243 == null
                                 ? null
                                 : Chart1243.Select(q => q.Convert()).ToList();
            original.Chart1284 = Chart1284 == null
                                 ? null
                                 : Chart1284.Select(q => q.Convert()).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Suppliers_SupplierDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox1SelectedItems = DropdownBox1SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                                 : DropdownBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Items_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart107SelectedItems = Chart107SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                             : Chart107SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Warehouse107VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart108SelectedItems = Chart108SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                             : Chart108SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Chart108VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart105SelectedItems = Chart105SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                             : Chart105SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Chart105VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart104SelectedItems = Chart104SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                             : Chart104SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Chart104VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1243SelectedItems = Chart1243SelectedItemKeys == null
                                              ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                              : Chart1243SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Chart1243VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1284SelectedItems = Chart1284SelectedItemKeys == null
                                              ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>>()
                                              : Chart1284SelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(x.SelectedItems.Select(y => ViewModels.ItemOrderForecast.Chart1284VM_OrderForecastStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(ItemOrderForecastViewModel original, ItemOrderForecastController _controller)
        {
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.ItemOrderForecast.Suppliers_SupplierDTO>>();
            DropdownBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.ItemOrderForecast.Items_ItemDTO>>();
            if (original == null) return;
            var DropdownBoxInitiallySelectedItem = original?.Supplier == null
                                                   ? null
                                                   : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(c => c.Id == original.Supplier.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ItemOrderForecast.Suppliers_SupplierDTO>(new List<ViewModels.ItemOrderForecast.Suppliers_SupplierDTO>
                {
                    new Suppliers_SupplierDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox1InitiallySelectedItem = original == null
                                                    ? null
                                                    : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(c => c.SKU == original.SKU).FirstOrDefault();
            if (DropdownBox1InitiallySelectedItem != null)
            {
                DropdownBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ItemOrderForecast.Items_ItemDTO>(new List<ViewModels.ItemOrderForecast.Items_ItemDTO>
                {
                    new Items_ItemDTO(DropdownBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class OrderProposals_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {

        [JsonConstructor]
        public OrderProposals_OrderForecastDetailsDTO() { }
        public OrderProposals_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            SupplierCanDeliver = original.SupplierCanDeliver;
            SupplierMaxQuantity = original.SupplierMaxQuantity;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool SupplierCanDeliver;
        public decimal? SupplierMaxQuantity;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.SupplierCanDeliver = SupplierCanDeliver;
            original.SupplierMaxQuantity = SupplierMaxQuantity;
        }
        public static OrderProposals_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, true);
            if(foundEntry != null)
            {
                return new OrderProposals_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Item_ItemDTO() { }
        public Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            Description = original.Description;
            SKU = original.SKU;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string Description;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.Description = Description;
            original.SKU = SKU ?? "";
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Supplier_SupplierDTO() { }
        public Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Name = original.Name;
            Contacts = original.Contacts?.Select(x => new Supplier_Supplier_Contacts_ContactDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Name;
        public List<Supplier_Supplier_Contacts_ContactDTO> Contacts;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Name = Name;
            original.Contacts = Contacts == null
                                ? null
                                : Contacts.Select(q => q.Convert()).ToList();
        }
        public static Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact))]
    public class Supplier_Supplier_Contacts_ContactDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Contact>
    {

        [JsonConstructor]
        public Supplier_Supplier_Contacts_ContactDTO() { }
        public Supplier_Supplier_Contacts_ContactDTO(DSS1_RetailerDriverStockOptimisation.BO.Contact original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            UserName = original.UserName;
            EmailConfirmed = original.EmailConfirmed;
            LockoutEnabled = original.LockoutEnabled;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            AccessFailedCount = original.AccessFailedCount;
            Name = original.Name;
            Email = original.Email;
            PhoneNumber = original.PhoneNumber;
            LockoutEndDate = original.LockoutEndDate;
            Id = original.Id;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public bool EmailConfirmed;
        public bool LockoutEnabled;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public int? AccessFailedCount;
        public string Name;
        public string Email;
        public string PhoneNumber;
        public DateTime? LockoutEndDate;
        public int? Id;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Contact GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Contact>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Contact Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Contact original)
        {
            if (original == null) return;
            original.UserName = UserName ?? "";
            original.EmailConfirmed = EmailConfirmed;
            original.LockoutEnabled = LockoutEnabled;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.AccessFailedCount = AccessFailedCount;
            original.Name = Name;
            original.Email = Email;
            original.PhoneNumber = PhoneNumber;
            original.LockoutEndDate = LockoutEndDate;
            original.Id = Id;
        }
        public static Supplier_Supplier_Contacts_ContactDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_Contacts_ContactDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart107_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart107_OrderForecastStatisticDTO() { }
        public Chart107_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart107_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart107_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart107_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart107_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart107_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart107_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart107_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart107_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart107_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart107_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart105_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart105_OrderForecastStatisticDTO() { }
        public Chart105_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart105_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart105_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart105_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart105_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart105_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart105_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart105_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart105_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart105_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart105_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart108_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart108_OrderForecastStatisticDTO() { }
        public Chart108_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart108_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart108_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart108_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart108_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart108_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart108_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart108_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart108_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart108_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart108_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart104_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart104_OrderForecastStatisticDTO() { }
        public Chart104_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart104_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart104_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart104_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart104_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart104_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart104_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart104_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart104_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart104_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart104_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart1243_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart1243_OrderForecastStatisticDTO() { }
        public Chart1243_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart1243_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart1243_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1243_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1243_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart1243_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart1243_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart1243_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1243_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1243_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1243_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    public class Chart1284_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {

        [JsonConstructor]
        public Chart1284_OrderForecastStatisticDTO() { }
        public Chart1284_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Quantity = original.Quantity;
            RoundQuantity = original.RoundQuantity;
            OrderDate = original.OrderDate;
            OrderDateFormatted = original.OrderDateFormatted;
            Item = original.Item == null ? null : new Chart1284_OrderForecastStatistic_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Quantity;
        public int? RoundQuantity;
        public DateTime? OrderDate;
        public string OrderDateFormatted;
        public Chart1284_OrderForecastStatistic_Item_ItemDTO Item;
        public Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Quantity = Quantity;
            original.RoundQuantity = RoundQuantity;
            original.OrderDate = OrderDate;
            original.OrderDateFormatted = OrderDateFormatted;
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1284_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1284_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Chart1284_OrderForecastStatistic_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Chart1284_OrderForecastStatistic_Item_ItemDTO() { }
        public Chart1284_OrderForecastStatistic_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1284_OrderForecastStatistic_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1284_OrderForecastStatistic_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO() { }
        public Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Chart1284_OrderForecastStatistic_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class OrderProposalDataSet_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OrderProposalDataSet_OrderForecastDetailsDTO() : base() {}
        public  static OrderProposalDataSet_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderProposalDataSet_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public OrderProposalDataSet_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderProposalDataSet_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class OrderProposalsDS_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OrderProposalsDS_OrderForecastDetailsDTO() : base() {}
        public  static OrderProposalsDS_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderProposalsDS_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public OrderProposalsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderProposalsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse107_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse107_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse107_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse107_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse107_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse107_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse108_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse108_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse108_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse108_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse108_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse108_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class Suppliers_SupplierDTO : Suppliers_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public Suppliers_SupplierDTO() : base() {}
        public new static Suppliers_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_SupplierDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class Suppliers_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public Suppliers_CompanyDTO() : base() {}
        public  static Suppliers_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Suppliers_CompanyDTO(foundEntry);
            }
            return null;
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Suppliers_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class Items_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public Items_ItemDTO() : base() {}
        public  static Items_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Items_ItemDTO(foundEntry);
            }
            return null;
        }
        public Items_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public Items_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse105_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse105_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse105_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse105_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse105_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse105_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse104_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse104_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse104_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse104_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse104_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse104_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse1243_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse1243_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse1243_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse1243_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse1243_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse1243_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse1284_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Warehouse1284_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse1284_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse1284_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse1284_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse1284_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Warehouse107VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Warehouse107VM_OrderForecastStatisticDTO() : base() {}
        public  static Warehouse107VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Warehouse107VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Warehouse107VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Warehouse107VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart105VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Chart105VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart105VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart105VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart105VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart105VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart108VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Chart108VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart108VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart108VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart108VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart108VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart104VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Chart104VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart104VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart104VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart104VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart104VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart107VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Chart107VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart107VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart107VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart107VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart107VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart1243VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Chart1243VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart1243VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart1243VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart1243VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart1243VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic))]
    [DataSetDTO]
    public class Chart1284VM_OrderForecastStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public decimal? Quantity;


        [JsonConstructor]
        public Chart1284VM_OrderForecastStatisticDTO() : base() {}
        public  static Chart1284VM_OrderForecastStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ItemOrderForecastController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Chart1284VM_OrderForecastStatisticDTO(foundEntry);
            }
            return null;
        }
        public Chart1284VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Chart1284VM_OrderForecastStatisticDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            Quantity = original.Quantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.Quantity = Quantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
