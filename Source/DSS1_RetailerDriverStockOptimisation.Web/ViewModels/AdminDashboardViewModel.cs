// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.AdminDashboard;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard
{
    public class AdminDashboardViewModel : MasterPageViewModel
    {
        public List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> Agreements;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> OrderForecasts;


        public AdminDashboardViewModel()
        {
            Agreements = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement>();
            OrderForecasts = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (Agreements != null)
            {
                foreach (var item in Agreements)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (OrderForecasts != null)
            {
                foreach (var item in OrderForecasts)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel))]
    public class AdminDashboardViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel>
    {

        [JsonConstructor]
        public AdminDashboardViewModelDTO() { }
        public AdminDashboardViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Agreements = original.Agreements?.Select(x => new Agreements_AgreementDTO(x)).ToList();
            OrderForecasts = original.OrderForecasts?.Select(x => new OrderForecasts_OrderForecastDetailsDTO(x)).ToList();
        }
        public List<Agreements_AgreementDTO> Agreements;
        public List<OrderForecasts_OrderForecastDetailsDTO> OrderForecasts;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel).FullName;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.AdminDashboard.AdminDashboardViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Agreements = Agreements == null
                                  ? null
                                  : Agreements.Select(q => q.Convert()).ToList();
            original.OrderForecasts = OrderForecasts == null
                                      ? null
                                      : OrderForecasts.Select(q => q.Convert()).ToList();
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class Agreements_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public Agreements_AgreementDTO() { }
        public Agreements_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AgreementDocument = original.AgreementDocument;
            DateCreated = original.DateCreated;
            FullTruckLoad = original.FullTruckLoad;
            Id = original.Id;
            LeadTime = original.LeadTime;
            Profile = original.Profile;
            TargetInventoryDays = original.TargetInventoryDays;
            WDDeliveries = original.WDDeliveries;
            AgreementStatuses = original.AgreementStatuses?.Select(x => new Agreements_Agreement_AgreementStatuses_AgreementStatusDTO(x)).ToList();
            Items = original.Items?.Select(x => new Agreements_Agreement_Items_ItemDTO(x)).ToList();
            Supplier = original.Supplier == null ? null : new Agreements_Agreement_Supplier_SupplierDTO(original.Supplier);
            Warehouses = original.Warehouses?.Select(x => new Agreements_Agreement_Warehouses_WarehouseDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string AgreementDocument;
        public DateTime? DateCreated;
        public bool FullTruckLoad;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string LeadTime;
        public string Profile;
        public int? TargetInventoryDays;
        public bool WDDeliveries;
        public List<Agreements_Agreement_AgreementStatuses_AgreementStatusDTO> AgreementStatuses;
        public List<Agreements_Agreement_Items_ItemDTO> Items;
        public Agreements_Agreement_Supplier_SupplierDTO Supplier;
        public List<Agreements_Agreement_Warehouses_WarehouseDTO> Warehouses;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.AgreementDocument = AgreementDocument;
            original.DateCreated = DateCreated;
            original.FullTruckLoad = FullTruckLoad;
            original.Id = Id ?? 0;
            original.LeadTime = LeadTime;
            original.Profile = Profile;
            original.TargetInventoryDays = TargetInventoryDays;
            original.WDDeliveries = WDDeliveries;
            original.AgreementStatuses = AgreementStatuses == null
                                         ? null
                                         : AgreementStatuses.Select(q => q.Convert()).ToList();
            original.Items = Items == null
                             ? null
                             : Items.Select(q => q.Convert()).ToList();
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.Warehouses = Warehouses == null
                                  ? null
                                  : Warehouses.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreements_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreements_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus))]
    public class Agreements_Agreement_AgreementStatuses_AgreementStatusDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus>
    {

        [JsonConstructor]
        public Agreements_Agreement_AgreementStatuses_AgreementStatusDTO() { }
        public Agreements_Agreement_AgreementStatuses_AgreementStatusDTO(DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Active = original.Active;
            ApprovedBySonae = original.ApprovedBySonae;
            ApprovedBySupplier = original.ApprovedBySupplier;
            DateIssued = original.DateIssued;
            Id = original.Id;
            InProgress = original.InProgress;
            IssuedBy = original.IssuedBy;
            Status = original.Status;
            UnderRevision = original.UnderRevision;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public bool Active;
        public bool ApprovedBySonae;
        public bool ApprovedBySupplier;
        public DateTime? DateIssued;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool InProgress;
        public string IssuedBy;
        public string Status;
        public bool UnderRevision;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus original)
        {
            if (original == null) return;
            original.Active = Active;
            original.ApprovedBySonae = ApprovedBySonae;
            original.ApprovedBySupplier = ApprovedBySupplier;
            original.DateIssued = DateIssued;
            original.Id = Id ?? 0;
            original.InProgress = InProgress;
            original.IssuedBy = IssuedBy;
            original.Status = Status;
            original.UnderRevision = UnderRevision;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreements_Agreement_AgreementStatuses_AgreementStatusDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreements_Agreement_AgreementStatuses_AgreementStatusDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Agreements_Agreement_Items_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Agreements_Agreement_Items_ItemDTO() { }
        public Agreements_Agreement_Items_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            AvgDailyDemand = original.AvgDailyDemand;
            Description = original.Description;
            SKU = original.SKU;
            UPC = original.UPC;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public decimal? AvgDailyDemand;
        public string Description;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string UPC;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.AvgDailyDemand = AvgDailyDemand;
            original.Description = Description;
            original.SKU = SKU ?? "";
            original.UPC = UPC;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreements_Agreement_Items_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreements_Agreement_Items_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Agreements_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Agreements_Agreement_Supplier_SupplierDTO() { }
        public Agreements_Agreement_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static Agreements_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreements_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Agreements_Agreement_Warehouses_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Agreements_Agreement_Warehouses_WarehouseDTO() { }
        public Agreements_Agreement_Warehouses_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Agreements_Agreement_Warehouses_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Agreements_Agreement_Warehouses_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class OrderForecasts_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {

        [JsonConstructor]
        public OrderForecasts_OrderForecastDetailsDTO() { }
        public OrderForecasts_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AutomatedForecast = original.AutomatedForecast;
            Id = original.Id;
            OrderInventoryDays = original.OrderInventoryDays;
            Quantity = original.Quantity;
            RecommendedOrderDate = original.RecommendedOrderDate;
            ReplenishmentCycle = original.ReplenishmentCycle;
            RoundQuantity = original.RoundQuantity;
            SalesForecastDate = original.SalesForecastDate;
            SupplierCanDeliver = original.SupplierCanDeliver;
            SupplierMaxQuantity = original.SupplierMaxQuantity;
            Warehouse = original.Warehouse == null ? null : new OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO(original.Warehouse);
            Item = original.Item == null ? null : new OrderForecasts_OrderForecastDetails_Item_ItemDTO(original.Item);
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? AutomatedForecast;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? OrderInventoryDays;
        public decimal? Quantity;
        public DateTime? RecommendedOrderDate;
        public int? ReplenishmentCycle;
        public int? RoundQuantity;
        public DateTime? SalesForecastDate;
        public bool SupplierCanDeliver;
        public decimal? SupplierMaxQuantity;
        public OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO Warehouse;
        public OrderForecasts_OrderForecastDetails_Item_ItemDTO Item;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if (original == null) return;
            original.AutomatedForecast = AutomatedForecast;
            original.Id = Id ?? 0;
            original.OrderInventoryDays = OrderInventoryDays;
            original.Quantity = Quantity;
            original.RecommendedOrderDate = RecommendedOrderDate;
            original.ReplenishmentCycle = ReplenishmentCycle;
            original.RoundQuantity = RoundQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.SupplierCanDeliver = SupplierCanDeliver;
            original.SupplierMaxQuantity = SupplierMaxQuantity;
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
        }
        public static OrderForecasts_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, true);
            if(foundEntry != null)
            {
                return new OrderForecasts_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO() { }
        public OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new OrderForecasts_OrderForecastDetails_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class OrderForecasts_OrderForecastDetails_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public OrderForecasts_OrderForecastDetails_Item_ItemDTO() { }
        public OrderForecasts_OrderForecastDetails_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            AvgDailyDemand = original.AvgDailyDemand;
            Description = original.Description;
            SKU = original.SKU;
            UPC = original.UPC;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public decimal? AvgDailyDemand;
        public string Description;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string UPC;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.AvgDailyDemand = AvgDailyDemand;
            original.Description = Description;
            original.SKU = SKU ?? "";
            original.UPC = UPC;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static OrderForecasts_OrderForecastDetails_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new OrderForecasts_OrderForecastDetails_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }



}
