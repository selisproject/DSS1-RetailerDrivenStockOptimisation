// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage
{
    public class MasterPageViewModel
    {
        public string Title;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>> NotificationTableSelectedItems;


        public MasterPageViewModel()
        {
        }


        public virtual void Evict()
        {
            var manager = MiniSessionManager.Instance;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel))]
    public class MasterPageViewModelDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel>
    {

        [JsonConstructor]
        public MasterPageViewModelDTO() { }
        public MasterPageViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Title = original.Title;
            NotificationTableSelectedItemKeys = original.NotificationTableSelectedItems == null
                                                ? null
                                                : original.NotificationTableSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public string Title;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel).FullName;
        public List<SelectedItemInfo<int?>> NotificationTableSelectedItemKeys;

        public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel();
        }
        public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel original)
        {
            if (original == null) return;
            original.Title = Title;
            original.NotificationTableSelectedItems = NotificationTableSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>>()
                    : NotificationTableSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(x.SelectedItems.Select(y => ViewModels.MasterPage.AppNotifications_AppNotificationDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.AppNotification))]
    public class AppNotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsRead;


        [JsonConstructor]
        public AppNotificationDTO() : base() {}
        public  static AppNotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MasterPageController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AppNotificationDTO(foundEntry);
            }
            return null;
        }
        public AppNotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.AppNotification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AppNotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.AppNotification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            IsRead = original.IsRead;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.AppNotification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.AppNotification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.AppNotification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.IsRead = IsRead;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.AppNotification))]
    [DataSetDTO]
    public class AppNotifications_AppNotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.AppNotification).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? DateCreated;
        public string Item;
        public int? Delta;


        [JsonConstructor]
        public AppNotifications_AppNotificationDTO() : base() {}
        public  static AppNotifications_AppNotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MasterPageController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AppNotifications_AppNotificationDTO(foundEntry);
            }
            return null;
        }
        public AppNotifications_AppNotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.AppNotification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AppNotifications_AppNotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.AppNotification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            DateCreated = original.DateCreated;
            Item = original.Item;
            Delta = original.Delta;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.AppNotification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.AppNotification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.AppNotification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.AppNotification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.DateCreated = DateCreated;
            model.Item = Item;
            model.Delta = Delta;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
