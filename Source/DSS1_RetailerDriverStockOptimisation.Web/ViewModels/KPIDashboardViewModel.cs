// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.KPIDashboard;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard
{
    public class KPIDashboardViewModel : MasterPageViewModel
    {
        public List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> SuppliersInSelectedForecast;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast SelectedForecast;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> SelectedSKUs;
        public DSS1_RetailerDriverStockOptimisation.BO.Item SelectedSKU;
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Supplier;
        public string FlowType;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>> listSuppliersSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>> listWarehousesSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>> listBusinessUnitsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>> listCategoriesSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>> listSubcategoriesSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>> ddlSubcategorySelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>> listBaseUnitsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> listSKUsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> ddlSKUsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>> chartStockLevelsInvDaysSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>> chartStockLevelsUnitsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartSLALeadTimeSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartSLADeliverySelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>> chartWasteSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartOrderForecastSelectedItems;


        public KPIDashboardViewModel()
        {
            SuppliersInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement>();
            SelectedForecast = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKUs = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKU = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            Supplier = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (SuppliersInSelectedForecast != null)
            {
                foreach (var item in SuppliersInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedForecast))
            {
                manager.Session.Evict(SelectedForecast);
            }
            if (ItemsInSelectedForecast != null)
            {
                foreach (var item in ItemsInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (SelectedSKUs != null)
            {
                foreach (var item in SelectedSKUs)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedSKU))
            {
                manager.Session.Evict(SelectedSKU);
            }
            if (manager.Session.Contains(Supplier))
            {
                manager.Session.Evict(Supplier);
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel))]
    public class KPIDashboardViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel>
    {

        [JsonConstructor]
        public KPIDashboardViewModelDTO() { }
        public KPIDashboardViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            SuppliersInSelectedForecast = original.SuppliersInSelectedForecast?.Select(x => new SuppliersInSelectedForecast_AgreementDTO(x)).ToList();
            SelectedForecast = original.SelectedForecast == null ? null : new SelectedForecast_OrderForecastDTO(original.SelectedForecast);
            ItemsInSelectedForecast = original.ItemsInSelectedForecast?.Select(x => new ItemsInSelectedForecast_ItemDTO(x)).ToList();
            ToDate = original.ToDate;
            FromDate = original.FromDate;
            SelectedSKUs = original.SelectedSKUs?.Select(x => new SelectedSKUs_ItemDTO(x)).ToList();
            SelectedSKU = original.SelectedSKU == null ? null : new SelectedSKU_ItemDTO(original.SelectedSKU);
            Supplier = original.Supplier == null ? null : new Supplier_SupplierDTO(original.Supplier);
            FlowType = original.FlowType;
            listSuppliersSelectedItemKeys = original.listSuppliersSelectedItems == null
                                            ? null
                                            : original.listSuppliersSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listWarehousesSelectedItemKeys = original.listWarehousesSelectedItems == null
                                             ? null
                                             : original.listWarehousesSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listBusinessUnitsSelectedItemKeys = original.listBusinessUnitsSelectedItems == null
                                                ? null
                                                : original.listBusinessUnitsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listCategoriesSelectedItemKeys = original.listCategoriesSelectedItems == null
                                             ? null
                                             : original.listCategoriesSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listSubcategoriesSelectedItemKeys = original.listSubcategoriesSelectedItems == null
                                                ? null
                                                : original.listSubcategoriesSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSubcategorySelectedItemKeys = original.ddlSubcategorySelectedItems == null
                                             ? null
                                             : original.ddlSubcategorySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listBaseUnitsSelectedItemKeys = original.listBaseUnitsSelectedItems == null
                                            ? null
                                            : original.listBaseUnitsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listSKUsSelectedItemKeys = original.listSKUsSelectedItems == null
                                       ? null
                                       : original.listSKUsSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSKUsSelectedItemKeys = original.ddlSKUsSelectedItems == null
                                      ? null
                                      : original.ddlSKUsSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartStockLevelsInvDaysSelectedItemKeys = original.chartStockLevelsInvDaysSelectedItems == null
                    ? null
                    : original.chartStockLevelsInvDaysSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.InventoryDaysKPIKey).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartStockLevelsUnitsSelectedItemKeys = original.chartStockLevelsUnitsSelectedItems == null
                                                    ? null
                                                    : original.chartStockLevelsUnitsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartSLALeadTimeSelectedItemKeys = original.chartSLALeadTimeSelectedItems == null
                                               ? null
                                               : original.chartSLALeadTimeSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartSLADeliverySelectedItemKeys = original.chartSLADeliverySelectedItems == null
                                               ? null
                                               : original.chartSLADeliverySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartWasteSelectedItemKeys = original.chartWasteSelectedItems == null
                                         ? null
                                         : original.chartWasteSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItems == null
                                                 ? null
                                                 : original.chartOrderForecastSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public List<SuppliersInSelectedForecast_AgreementDTO> SuppliersInSelectedForecast;
        public SelectedForecast_OrderForecastDTO SelectedForecast;
        public List<ItemsInSelectedForecast_ItemDTO> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<SelectedSKUs_ItemDTO> SelectedSKUs;
        public SelectedSKU_ItemDTO SelectedSKU;
        public Supplier_SupplierDTO Supplier;
        public string FlowType;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel).FullName;
        public List<SelectedItemInfo<int?>> listSuppliersSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listWarehousesSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listBusinessUnitsSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listCategoriesSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listSubcategoriesSelectedItemKeys;
        public List<SelectedItemInfo<int?>> ddlSubcategorySelectedItemKeys;
        public List<SelectedItemInfo<int?>> listBaseUnitsSelectedItemKeys;
        public List<SelectedItemInfo<string>> listSKUsSelectedItemKeys;
        public List<SelectedItemInfo<string>> ddlSKUsSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.KPIDashboard.ItemsDS_ItemDTO>> ddlSKUs__InitialSelection;
        public List<SelectedItemInfo<int?>> chartStockLevelsInvDaysSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartStockLevelsUnitsSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartSLALeadTimeSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartSLADeliverySelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartWasteSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartOrderForecastSelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboard.KPIDashboardViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.SuppliersInSelectedForecast = SuppliersInSelectedForecast == null
                                                   ? null
                                                   : SuppliersInSelectedForecast.Select(q => q.Convert()).ToList();
            original.SelectedForecast = SelectedForecast == null
                                        ? null
                                        : SelectedForecast.Convert();
            original.ItemsInSelectedForecast = ItemsInSelectedForecast == null
                                               ? null
                                               : ItemsInSelectedForecast.Select(q => q.Convert()).ToList();
            original.ToDate = ToDate;
            original.FromDate = FromDate;
            original.SelectedSKUs = SelectedSKUs == null
                                    ? null
                                    : SelectedSKUs.Select(q => q.Convert()).ToList();
            original.SelectedSKU = SelectedSKU == null
                                   ? null
                                   : SelectedSKU.Convert();
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.FlowType = FlowType;
            original.listSuppliersSelectedItems = listSuppliersSelectedItemKeys == null
                                                  ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>>()
                                                  : listSuppliersSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.SuppliersDS_SupplierDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listWarehousesSelectedItems = listWarehousesSelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>>()
                                                   : listWarehousesSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.WarehousesDS_WarehouseDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listBusinessUnitsSelectedItems = listBusinessUnitsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>>()
                    : listBusinessUnitsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.BusinessUnitDataSet_BusinessUnitDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listCategoriesSelectedItems = listCategoriesSelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>>()
                                                   : listCategoriesSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Category>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.CategoryDataSet_CategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listSubcategoriesSelectedItems = listSubcategoriesSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>>()
                    : listSubcategoriesSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.SubCategoryDataSet_SubCategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSubcategorySelectedItems = ddlSubcategorySelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>>()
                                                   : ddlSubcategorySelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.AllSubcategoriesDS_SubCategoryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listBaseUnitsSelectedItems = listBaseUnitsSelectedItemKeys == null
                                                  ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>>()
                                                  : listBaseUnitsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.AllBaseUnitsDS_BaseUnitDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listSKUsSelectedItems = listSKUsSelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                             : listSKUsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.ItemsVMDS_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSKUsSelectedItems = ddlSKUsSelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                            : ddlSKUsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.ItemsDS_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartStockLevelsInvDaysSelectedItems = chartStockLevelsInvDaysSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>>()
                    : chartStockLevelsInvDaysSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.InventoryDaysKPIDataSet_InventoryDaysKPIDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartStockLevelsUnitsSelectedItems = chartStockLevelsUnitsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>>()
                    : chartStockLevelsUnitsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.UnitsKPIDataSet_UnitsKPIDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartSLALeadTimeSelectedItems = chartSLALeadTimeSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartSLALeadTimeSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.SLALeadMonthly_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartSLADeliverySelectedItems = chartSLADeliverySelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartSLADeliverySelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.SLADelivery_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartWasteSelectedItems = chartWasteSelectedItemKeys == null
                                               ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>>()
                                               : chartWasteSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.WasteDataSet_StatsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartOrderForecastSelectedItems = chartOrderForecastSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartOrderForecastSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboard.PlatformDataSet_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(KPIDashboardViewModel original, KPIDashboardController _controller)
        {
            ddlSKUs__InitialSelection = new List<SelectedItemInfo<ViewModels.KPIDashboard.ItemsDS_ItemDTO>>();
            if (original == null) return;
            var ddlSKUsInitiallySelectedItem = original?.SelectedSKU == null
                                               ? null
                                               : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(c => c.SKU == original.SelectedSKU.SKU).FirstOrDefault();
            if (ddlSKUsInitiallySelectedItem != null)
            {
                ddlSKUs__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.KPIDashboard.ItemsDS_ItemDTO>(new List<ViewModels.KPIDashboard.ItemsDS_ItemDTO>
                {
                    new ItemsDS_ItemDTO(ddlSKUsInitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class SuppliersInSelectedForecast_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_AgreementDTO() { }
        public SuppliersInSelectedForecast_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            TargetInventoryDays = original.TargetInventoryDays;
            Supplier = original.Supplier == null ? null : new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(original.Supplier);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? TargetInventoryDays;
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO Supplier;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.TargetInventoryDays = TargetInventoryDays;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SuppliersInSelectedForecast_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO() { }
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    public class SelectedForecast_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {

        [JsonConstructor]
        public SelectedForecast_OrderForecastDTO() { }
        public SelectedForecast_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            CreatedOn = original.CreatedOn;
            EndDate = original.EndDate;
            Id = original.Id;
            StartDate = original.StartDate;
            State = original.State;
            Status = original.Status;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public DateTime? CreatedOn;
        public DateTime? EndDate;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? StartDate;
        public string State;
        public string Status;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.CreatedOn = CreatedOn;
            original.EndDate = EndDate;
            original.Id = Id ?? 0;
            original.StartDate = StartDate;
            original.State = State;
            original.Status = Status;
        }
        public static SelectedForecast_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedForecast_OrderForecastDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class ItemsInSelectedForecast_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public ItemsInSelectedForecast_ItemDTO() { }
        public ItemsInSelectedForecast_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ItemsInSelectedForecast_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ItemsInSelectedForecast_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKUs_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKUs_ItemDTO() { }
        public SelectedSKUs_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKU_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKU_ItemDTO() { }
        public SelectedSKU_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKU_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKU_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Supplier_SupplierDTO() { }
        public Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            BusinessUnit = original.BusinessUnit == null ? null : new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Contacts = original.Contacts?.Select(x => new Supplier_Supplier_Contacts_ContactDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public List<Supplier_Supplier_Contacts_ContactDTO> Contacts;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Contacts = Contacts == null
                                ? null
                                : Contacts.Select(q => q.Convert()).ToList();
        }
        public static Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class Supplier_Supplier_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO() { }
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Supplier_Supplier_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact))]
    public class Supplier_Supplier_Contacts_ContactDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Contact>
    {

        [JsonConstructor]
        public Supplier_Supplier_Contacts_ContactDTO() { }
        public Supplier_Supplier_Contacts_ContactDTO(DSS1_RetailerDriverStockOptimisation.BO.Contact original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            Id = original.Id;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public int? Id;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Contact GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Contact>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Contact Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Contact original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.Id = Id;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Supplier_Supplier_Contacts_ContactDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_Contacts_ContactDTO(foundEntry);
            }
            return null;
        }
    }

    #region Unbound Datasource DTOS
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SubCategoryDTO() : base() {}
        public  static SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Stats))]
    [DataSetDTO]
    public class WasteDataSet_StatsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Stats>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Stats).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string DateFormatted;
        public decimal? Percentage;


        [JsonConstructor]
        public WasteDataSet_StatsDTO() : base() {}
        public  static WasteDataSet_StatsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WasteDataSet_StatsDTO(foundEntry);
            }
            return null;
        }
        public WasteDataSet_StatsDTO(DSS1_RetailerDriverStockOptimisation.BO.Stats original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WasteDataSet_StatsDTO(DSS1_RetailerDriverStockOptimisation.BO.Stats original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            DateFormatted = original.DateFormatted;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Stats GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Stats Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Stats();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.DateFormatted = DateFormatted;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class PlatformDataSet_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public PlatformDataSet_SLAStatisticsDTO() : base() {}
        public  static PlatformDataSet_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PlatformDataSet_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public PlatformDataSet_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PlatformDataSet_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class SLADelivery_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public SLADelivery_SLAStatisticsDTO() : base() {}
        public  static SLADelivery_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SLADelivery_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public SLADelivery_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SLADelivery_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class SLALeadMonthly_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public SLALeadMonthly_SLAStatisticsDTO() : base() {}
        public  static SLALeadMonthly_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SLALeadMonthly_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public SLALeadMonthly_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SLALeadMonthly_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI))]
    [DataSetDTO]
    public class UnitsKPIDataSet_UnitsKPIDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SalesForecastDateFormatted;
        public int? Units;


        [JsonConstructor]
        public UnitsKPIDataSet_UnitsKPIDTO() : base() {}
        public  static UnitsKPIDataSet_UnitsKPIDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitsKPIDataSet_UnitsKPIDTO(foundEntry);
            }
            return null;
        }
        public UnitsKPIDataSet_UnitsKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitsKPIDataSet_UnitsKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SalesForecastDateFormatted = original.SalesForecastDateFormatted;
            Units = original.Units;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.SalesForecastDateFormatted = SalesForecastDateFormatted;
            model.Units = Units;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI))]
    [DataSetDTO]
    public class InventoryDaysKPIDataSet_InventoryDaysKPIDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI).FullName;
        public  string _runtimeType;
        public int? InventoryDaysKPIKey;
        public new object _key
        {
            get;
            set;
        }
        public string SalesForecastDateFormatted;
        public decimal? InventoryDays;


        [JsonConstructor]
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO() : base() {}
        public  static InventoryDaysKPIDataSet_InventoryDaysKPIDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var records = new KPIDashboardController().Get_chartStockLevelsInvDays_DatasourceQueryable();
            var foundEntry = records.Where(c => c.InventoryDaysKPIKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(foundEntry);
            }
            return null;
        }
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.InventoryDaysKPIKey == 0) ? original._GetUniqueIdentifier() as object : original.InventoryDaysKPIKey as object;
            _runtimeType = original?.GetType().FullName;
            InventoryDaysKPIKey = original.InventoryDaysKPIKey;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SalesForecastDateFormatted = original.SalesForecastDateFormatted;
            InventoryDays = original.InventoryDays;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.InventoryDaysKPIKey = InventoryDaysKPIKey ?? 0;
            model.SalesForecastDateFormatted = SalesForecastDateFormatted;
            model.InventoryDays = InventoryDays;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    [DataSetDTO]
    public class CategoryDataSet_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public CategoryDataSet_CategoryDTO() : base() {}
        public  static CategoryDataSet_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CategoryDataSet_CategoryDTO(foundEntry);
            }
            return null;
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Category GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class SubCategoryDataSet_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public SubCategoryDataSet_SubCategoryDTO() : base() {}
        public  static SubCategoryDataSet_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDataSet_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    [DataSetDTO]
    public class BusinessUnitDataSet_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public BusinessUnitDataSet_BusinessUnitDTO() : base() {}
        public  static BusinessUnitDataSet_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessUnitDataSet_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    [DataSetDTO]
    public class OrderForecastsDS_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OrderForecastsDS_OrderForecastDTO() : base() {}
        public  static OrderForecastsDS_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecastsDS_OrderForecastDTO(foundEntry);
            }
            return null;
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class ForecastVS_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ForecastVS_StatisticsDTO() : base() {}
        public  static ForecastVS_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ForecastVS_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StockDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public StockDataSet_StatisticsDTO() : base() {}
        public  static StockDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    [DataSetDTO]
    public class NotificationsDS_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public NotificationsDS_NotificationDTO() : base() {}
        public  static NotificationsDS_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new NotificationsDS_NotificationDTO(foundEntry);
            }
            return null;
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Notification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class AllSubcategoriesDS_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public AllSubcategoriesDS_SubCategoryDTO() : base() {}
        public  static AllSubcategoriesDS_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllSubcategoriesDS_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public ItemsDS_ItemDTO() : base() {}
        public  static ItemsDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsVMDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public ItemsVMDS_ItemDTO() : base() {}
        public  static ItemsVMDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsVMDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    [DataSetDTO]
    public class AllBaseUnitsDS_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public AllBaseUnitsDS_BaseUnitDTO() : base() {}
        public  static AllBaseUnitsDS_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllBaseUnitsDS_BaseUnitDTO(foundEntry);
            }
            return null;
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class SuppliersDS_SupplierDTO : SuppliersDS_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public SuppliersDS_SupplierDTO() : base() {}
        public new static SuppliersDS_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class SuppliersDS_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public SuppliersDS_CompanyDTO() : base() {}
        public  static SuppliersDS_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_CompanyDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    [DataSetDTO]
    public class WarehousesDS_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public WarehousesDS_WarehouseDTO() : base() {}
        public  static WarehousesDS_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WarehousesDS_WarehouseDTO(foundEntry);
            }
            return null;
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
