// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.SupplierView;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView
{
    public class SupplierViewViewModel : MasterPageViewModel
    {
        public List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> SuppliersInSelectedForecast;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast SelectedForecast;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> SelectedSKUs;
        public DSS1_RetailerDriverStockOptimisation.BO.Item SelectedSKU;
        public bool CollapseLeftColumn;
        public bool CollapseRightColumn;
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Supplier;
        public List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails> SelectedOrderFDetails;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Notification> Recommendations;
        public bool ShowAlerts;
        public bool ShowRecommendations;
        public string FilterList;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Notification> Alerts;
        public int? AlertsCount;
        public List<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter> SupplierParameters;
        public bool SupplierReplied;
        public int? RecommendationsCount;
        public string FlowType;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>> listWarehousesSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> listSKUsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>> ddlSKUsSelectedItems;
        public List<SelectedItemInfo<string>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>> lstOrderForecastsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>> chartOrderForecastSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>> chartStockLevelsSelectedItems;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>> listOrderForecastDetailsSelectedItems;


        public SupplierViewViewModel()
        {
            SuppliersInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement>();
            SelectedForecast = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKUs = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKU = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            Supplier = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            SelectedOrderFDetails = new List<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>();
            Recommendations = new List<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            Alerts = new List<DSS1_RetailerDriverStockOptimisation.BO.Notification>();
            SupplierParameters = new List<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (SuppliersInSelectedForecast != null)
            {
                foreach (var item in SuppliersInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedForecast))
            {
                manager.Session.Evict(SelectedForecast);
            }
            if (ItemsInSelectedForecast != null)
            {
                foreach (var item in ItemsInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (SelectedSKUs != null)
            {
                foreach (var item in SelectedSKUs)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedSKU))
            {
                manager.Session.Evict(SelectedSKU);
            }
            if (manager.Session.Contains(Supplier))
            {
                manager.Session.Evict(Supplier);
            }
            if (SelectedOrderFDetails != null)
            {
                foreach (var item in SelectedOrderFDetails)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Recommendations != null)
            {
                foreach (var item in Recommendations)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (Alerts != null)
            {
                foreach (var item in Alerts)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (SupplierParameters != null)
            {
                foreach (var item in SupplierParameters)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel))]
    public class SupplierViewViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel>
    {

        [JsonConstructor]
        public SupplierViewViewModelDTO() { }
        public SupplierViewViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            SuppliersInSelectedForecast = original.SuppliersInSelectedForecast?.Select(x => new SuppliersInSelectedForecast_AgreementDTO(x)).ToList();
            SelectedForecast = original.SelectedForecast == null ? null : new SelectedForecast_OrderForecastDTO(original.SelectedForecast);
            ItemsInSelectedForecast = original.ItemsInSelectedForecast?.Select(x => new ItemsInSelectedForecast_ItemDTO(x)).ToList();
            ToDate = original.ToDate;
            FromDate = original.FromDate;
            SelectedSKUs = original.SelectedSKUs?.Select(x => new SelectedSKUs_ItemDTO(x)).ToList();
            SelectedSKU = original.SelectedSKU == null ? null : new SelectedSKU_ItemDTO(original.SelectedSKU);
            CollapseLeftColumn = original.CollapseLeftColumn;
            CollapseRightColumn = original.CollapseRightColumn;
            Supplier = original.Supplier == null ? null : new Supplier_SupplierDTO(original.Supplier);
            SelectedOrderFDetails = original.SelectedOrderFDetails?.Select(x => new SelectedOrderFDetails_OrderForecastDetailsDTO(x)).ToList();
            Recommendations = original.Recommendations?.Select(x => new Recommendations_NotificationDTO(x)).ToList();
            ShowAlerts = original.ShowAlerts;
            ShowRecommendations = original.ShowRecommendations;
            FilterList = original.FilterList;
            Alerts = original.Alerts?.Select(x => new Alerts_NotificationDTO(x)).ToList();
            AlertsCount = original.AlertsCount;
            SupplierParameters = original.SupplierParameters?.Select(x => new SupplierParameters_SupplierParameterDTO(x)).ToList();
            SupplierReplied = original.SupplierReplied;
            RecommendationsCount = original.RecommendationsCount;
            FlowType = original.FlowType;
            listWarehousesSelectedItemKeys = original.listWarehousesSelectedItems == null
                                             ? null
                                             : original.listWarehousesSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listSKUsSelectedItemKeys = original.listSKUsSelectedItems == null
                                       ? null
                                       : original.listSKUsSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ddlSKUsSelectedItemKeys = original.ddlSKUsSelectedItems == null
                                      ? null
                                      : original.ddlSKUsSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y.SKU).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            lstOrderForecastsSelectedItemKeys = original.lstOrderForecastsSelectedItems == null
                                                ? null
                                                : original.lstOrderForecastsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItems == null
                                                 ? null
                                                 : original.chartOrderForecastSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartStockLevelsSelectedItemKeys = original.chartStockLevelsSelectedItems == null
                                               ? null
                                               : original.chartStockLevelsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            OptionButtonSelectedItemKeys = original.OptionButtonSelectedItems == null
                                           ? null
                                           : original.OptionButtonSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listOrderForecastDetailsSelectedItemKeys = original.listOrderForecastDetailsSelectedItems == null
                    ? null
                    : original.listOrderForecastDetailsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public List<SuppliersInSelectedForecast_AgreementDTO> SuppliersInSelectedForecast;
        public SelectedForecast_OrderForecastDTO SelectedForecast;
        public List<ItemsInSelectedForecast_ItemDTO> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<SelectedSKUs_ItemDTO> SelectedSKUs;
        public SelectedSKU_ItemDTO SelectedSKU;
        public bool CollapseLeftColumn;
        public bool CollapseRightColumn;
        public Supplier_SupplierDTO Supplier;
        public List<SelectedOrderFDetails_OrderForecastDetailsDTO> SelectedOrderFDetails;
        public List<Recommendations_NotificationDTO> Recommendations;
        public bool ShowAlerts;
        public bool ShowRecommendations;
        public string FilterList;
        public List<Alerts_NotificationDTO> Alerts;
        public int? AlertsCount;
        public List<SupplierParameters_SupplierParameterDTO> SupplierParameters;
        public bool SupplierReplied;
        public int? RecommendationsCount;
        public string FlowType;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel).FullName;
        public List<SelectedItemInfo<int?>> listWarehousesSelectedItemKeys;
        public List<SelectedItemInfo<string>> listSKUsSelectedItemKeys;
        public List<SelectedItemInfo<string>> ddlSKUsSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.SupplierView.ItemsDS_ItemDTO>> ddlSKUs__InitialSelection;
        public List<SelectedItemInfo<string>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<int?>> lstOrderForecastsSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartOrderForecastSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartStockLevelsSelectedItemKeys;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listOrderForecastDetailsSelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.SupplierView.SupplierViewViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.SuppliersInSelectedForecast = SuppliersInSelectedForecast == null
                                                   ? null
                                                   : SuppliersInSelectedForecast.Select(q => q.Convert()).ToList();
            original.SelectedForecast = SelectedForecast == null
                                        ? null
                                        : SelectedForecast.Convert();
            original.ItemsInSelectedForecast = ItemsInSelectedForecast == null
                                               ? null
                                               : ItemsInSelectedForecast.Select(q => q.Convert()).ToList();
            original.ToDate = ToDate;
            original.FromDate = FromDate;
            original.SelectedSKUs = SelectedSKUs == null
                                    ? null
                                    : SelectedSKUs.Select(q => q.Convert()).ToList();
            original.SelectedSKU = SelectedSKU == null
                                   ? null
                                   : SelectedSKU.Convert();
            original.CollapseLeftColumn = CollapseLeftColumn;
            original.CollapseRightColumn = CollapseRightColumn;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.SelectedOrderFDetails = SelectedOrderFDetails == null
                                             ? null
                                             : SelectedOrderFDetails.Select(q => q.Convert()).ToList();
            original.Recommendations = Recommendations == null
                                       ? null
                                       : Recommendations.Select(q => q.Convert()).ToList();
            original.ShowAlerts = ShowAlerts;
            original.ShowRecommendations = ShowRecommendations;
            original.FilterList = FilterList;
            original.Alerts = Alerts == null
                              ? null
                              : Alerts.Select(q => q.Convert()).ToList();
            original.AlertsCount = AlertsCount;
            original.SupplierParameters = SupplierParameters == null
                                          ? null
                                          : SupplierParameters.Select(q => q.Convert()).ToList();
            original.SupplierReplied = SupplierReplied;
            original.RecommendationsCount = RecommendationsCount;
            original.FlowType = FlowType;
            original.listWarehousesSelectedItems = listWarehousesSelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>>()
                                                   : listWarehousesSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(x.SelectedItems.Select(y => ViewModels.SupplierView.WarehousesDS_WarehouseDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listSKUsSelectedItems = listSKUsSelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                             : listSKUsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.SupplierView.ItemsVMDS_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ddlSKUsSelectedItems = ddlSKUsSelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>>()
                                            : ddlSKUsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Item>(x.SelectedItems.Select(y => ViewModels.SupplierView.ItemsDS_ItemDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<string>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.lstOrderForecastsSelectedItems = lstOrderForecastsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>>()
                    : lstOrderForecastsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(x.SelectedItems.Select(y => ViewModels.SupplierView.OrderForecastsDS_OrderForecastDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartOrderForecastSelectedItems = chartOrderForecastSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>>()
                    : chartOrderForecastSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(x.SelectedItems.Select(y => ViewModels.SupplierView.ForecastVS_StatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartStockLevelsSelectedItems = chartStockLevelsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>>()
                    : chartStockLevelsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(x.SelectedItems.Select(y => ViewModels.SupplierView.StockDataSet_StatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.OptionButtonSelectedItems = OptionButtonSelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<string>>()
                                                 : OptionButtonSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listOrderForecastDetailsSelectedItems = listOrderForecastDetailsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>>()
                    : listOrderForecastDetailsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(x.SelectedItems.Select(y => ViewModels.SupplierView.SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(SupplierViewViewModel original, SupplierViewController _controller)
        {
            ddlSKUs__InitialSelection = new List<SelectedItemInfo<ViewModels.SupplierView.ItemsDS_ItemDTO>>();
            if (original == null) return;
            var ddlSKUsInitiallySelectedItem = original?.SelectedSKU == null
                                               ? null
                                               : new DAL.Repository().Get<DSS1_RetailerDriverStockOptimisation.BO.Item>(c => c.SKU == original.SelectedSKU.SKU).FirstOrDefault();
            if (ddlSKUsInitiallySelectedItem != null)
            {
                ddlSKUs__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.SupplierView.ItemsDS_ItemDTO>(new List<ViewModels.SupplierView.ItemsDS_ItemDTO>
                {
                    new ItemsDS_ItemDTO(ddlSKUsInitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class SuppliersInSelectedForecast_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_AgreementDTO() { }
        public SuppliersInSelectedForecast_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            TargetInventoryDays = original.TargetInventoryDays;
            Supplier = original.Supplier == null ? null : new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(original.Supplier);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? TargetInventoryDays;
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO Supplier;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.TargetInventoryDays = TargetInventoryDays;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SuppliersInSelectedForecast_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO() { }
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    public class SelectedForecast_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {

        [JsonConstructor]
        public SelectedForecast_OrderForecastDTO() { }
        public SelectedForecast_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            CreatedOn = original.CreatedOn;
            EndDate = original.EndDate;
            Id = original.Id;
            StartDate = original.StartDate;
            State = original.State;
            Status = original.Status;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public DateTime? CreatedOn;
        public DateTime? EndDate;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? StartDate;
        public string State;
        public string Status;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.CreatedOn = CreatedOn;
            original.EndDate = EndDate;
            original.Id = Id ?? 0;
            original.StartDate = StartDate;
            original.State = State;
            original.Status = Status;
        }
        public static SelectedForecast_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedForecast_OrderForecastDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class ItemsInSelectedForecast_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public ItemsInSelectedForecast_ItemDTO() { }
        public ItemsInSelectedForecast_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ItemsInSelectedForecast_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ItemsInSelectedForecast_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKUs_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKUs_ItemDTO() { }
        public SelectedSKUs_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKU_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKU_ItemDTO() { }
        public SelectedSKU_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKU_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKU_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Supplier_SupplierDTO() { }
        public Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            BusinessUnit = original.BusinessUnit == null ? null : new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Contacts = original.Contacts?.Select(x => new Supplier_Supplier_Contacts_ContactDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public List<Supplier_Supplier_Contacts_ContactDTO> Contacts;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Contacts = Contacts == null
                                ? null
                                : Contacts.Select(q => q.Convert()).ToList();
        }
        public static Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class Supplier_Supplier_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO() { }
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Supplier_Supplier_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact))]
    public class Supplier_Supplier_Contacts_ContactDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Contact>
    {

        [JsonConstructor]
        public Supplier_Supplier_Contacts_ContactDTO() { }
        public Supplier_Supplier_Contacts_ContactDTO(DSS1_RetailerDriverStockOptimisation.BO.Contact original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            Id = original.Id;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public int? Id;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Contact GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Contact>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Contact Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Contact original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.Id = Id;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Supplier_Supplier_Contacts_ContactDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_Contacts_ContactDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class SelectedOrderFDetails_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {

        [JsonConstructor]
        public SelectedOrderFDetails_OrderForecastDetailsDTO() { }
        public SelectedOrderFDetails_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AutomatedForecast = original.AutomatedForecast;
            CreatedOn = original.CreatedOn;
            Id = original.Id;
            InitialStockLevel = original.InitialStockLevel;
            ItemCoverageDays = original.ItemCoverageDays;
            OrderInventoryDays = original.OrderInventoryDays;
            Quantity = original.Quantity;
            RecommendedOrderDate = original.RecommendedOrderDate;
            ReplenishmentCycle = original.ReplenishmentCycle;
            RoundQuantity = original.RoundQuantity;
            SalesForecastDate = original.SalesForecastDate;
            Status = original.Status;
            SupplierAvailableQuantity = original.SupplierAvailableQuantity;
            SupplierCanDeliver = original.SupplierCanDeliver;
            SupplierCoverageDays = original.SupplierCoverageDays;
            SupplierMaxQuantity = original.SupplierMaxQuantity;
            SupplierSharesStock = original.SupplierSharesStock;
            Warehouse = original.Warehouse == null ? null : new SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO(original.Warehouse);
            Item = original.Item == null ? null : new SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO(original.Item);
            OrderForecast = original.OrderForecast == null ? null : new SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO(original.OrderForecast);
            Notification = original.Notification == null ? null : new SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO(original.Notification);
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? AutomatedForecast;
        public DateTime? CreatedOn;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? InitialStockLevel;
        public int? ItemCoverageDays;
        public decimal? OrderInventoryDays;
        public decimal? Quantity;
        public DateTime? RecommendedOrderDate;
        public int? ReplenishmentCycle;
        public int? RoundQuantity;
        public DateTime? SalesForecastDate;
        public string Status;
        public int? SupplierAvailableQuantity;
        public bool SupplierCanDeliver;
        public int? SupplierCoverageDays;
        public decimal? SupplierMaxQuantity;
        public bool SupplierSharesStock;
        public SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO Warehouse;
        public SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO Item;
        public SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO OrderForecast;
        public SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO Notification;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if (original == null) return;
            original.AutomatedForecast = AutomatedForecast;
            original.CreatedOn = CreatedOn;
            original.Id = Id ?? 0;
            original.InitialStockLevel = InitialStockLevel;
            original.ItemCoverageDays = ItemCoverageDays;
            original.OrderInventoryDays = OrderInventoryDays;
            original.Quantity = Quantity;
            original.RecommendedOrderDate = RecommendedOrderDate;
            original.ReplenishmentCycle = ReplenishmentCycle;
            original.RoundQuantity = RoundQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.Status = Status;
            original.SupplierAvailableQuantity = SupplierAvailableQuantity;
            original.SupplierCanDeliver = SupplierCanDeliver;
            original.SupplierCoverageDays = SupplierCoverageDays;
            original.SupplierMaxQuantity = SupplierMaxQuantity;
            original.SupplierSharesStock = SupplierSharesStock;
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.OrderForecast = OrderForecast == null
                                     ? null
                                     : OrderForecast.Convert();
            original.Notification = Notification == null
                                    ? null
                                    : Notification.Convert();
        }
        public static SelectedOrderFDetails_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedOrderFDetails_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO() { }
        public SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            FlowType = original.FlowType;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public string FlowType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.FlowType = FlowType;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO() { }
        public SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            AvgDailyDemand = original.AvgDailyDemand;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            UPC = original.UPC;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public decimal? AvgDailyDemand;
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string UPC;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.AvgDailyDemand = AvgDailyDemand;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.UPC = UPC;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedOrderFDetails_OrderForecastDetails_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    public class SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {

        [JsonConstructor]
        public SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO() { }
        public SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            CreatedOn = original.CreatedOn;
            EndDate = original.EndDate;
            Id = original.Id;
            ImportId = original.ImportId;
            StartDate = original.StartDate;
            State = original.State;
            Status = original.Status;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public DateTime? CreatedOn;
        public DateTime? EndDate;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? ImportId;
        public DateTime? StartDate;
        public string State;
        public string Status;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.CreatedOn = CreatedOn;
            original.EndDate = EndDate;
            original.Id = Id ?? 0;
            original.ImportId = ImportId;
            original.StartDate = StartDate;
            original.State = State;
            original.Status = Status;
        }
        public static SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {

        [JsonConstructor]
        public SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO() { }
        public SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            Diff = original.Diff;
            Id = original.Id;
            Message = original.Message;
            OrderForecastQuantity = original.OrderForecastQuantity;
            SalesForecastDate = original.SalesForecastDate;
            TotalSupplierStock = original.TotalSupplierStock;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public int? Diff;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Message;
        public int? OrderForecastQuantity;
        public DateTime? SalesForecastDate;
        public int? TotalSupplierStock;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Notification GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Notification>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.Diff = Diff;
            original.Id = Id ?? 0;
            original.Message = Message;
            original.OrderForecastQuantity = OrderForecastQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.TotalSupplierStock = TotalSupplierStock;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class Recommendations_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {

        [JsonConstructor]
        public Recommendations_NotificationDTO() { }
        public Recommendations_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            Diff = original.Diff;
            Id = original.Id;
            Message = original.Message;
            OrderForecastQuantity = original.OrderForecastQuantity;
            SalesForecastDate = original.SalesForecastDate;
            TotalSupplierStock = original.TotalSupplierStock;
            OrderForecastDetails = original.OrderForecastDetails == null ? null : new Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO(original.OrderForecastDetails);
            Item = original.Item == null ? null : new Recommendations_Notification_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Recommendations_Notification_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public int? Diff;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Message;
        public int? OrderForecastQuantity;
        public DateTime? SalesForecastDate;
        public int? TotalSupplierStock;
        public Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO OrderForecastDetails;
        public Recommendations_Notification_Item_ItemDTO Item;
        public Recommendations_Notification_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Notification GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Notification>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.Diff = Diff;
            original.Id = Id ?? 0;
            original.Message = Message;
            original.OrderForecastQuantity = OrderForecastQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.TotalSupplierStock = TotalSupplierStock;
            original.OrderForecastDetails = OrderForecastDetails == null
                                            ? null
                                            : OrderForecastDetails.Convert();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Recommendations_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Recommendations_NotificationDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {

        [JsonConstructor]
        public Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO() { }
        public Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AutomatedForecast = original.AutomatedForecast;
            CreatedOn = original.CreatedOn;
            Id = original.Id;
            InitialStockLevel = original.InitialStockLevel;
            ItemCoverageDays = original.ItemCoverageDays;
            OrderInventoryDays = original.OrderInventoryDays;
            Quantity = original.Quantity;
            RecommendedOrderDate = original.RecommendedOrderDate;
            ReplenishmentCycle = original.ReplenishmentCycle;
            RoundQuantity = original.RoundQuantity;
            SalesForecastDate = original.SalesForecastDate;
            Status = original.Status;
            SupplierAvailableQuantity = original.SupplierAvailableQuantity;
            SupplierCanDeliver = original.SupplierCanDeliver;
            SupplierCoverageDays = original.SupplierCoverageDays;
            SupplierMaxQuantity = original.SupplierMaxQuantity;
            SupplierSharesStock = original.SupplierSharesStock;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? AutomatedForecast;
        public DateTime? CreatedOn;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? InitialStockLevel;
        public int? ItemCoverageDays;
        public decimal? OrderInventoryDays;
        public decimal? Quantity;
        public DateTime? RecommendedOrderDate;
        public int? ReplenishmentCycle;
        public int? RoundQuantity;
        public DateTime? SalesForecastDate;
        public string Status;
        public int? SupplierAvailableQuantity;
        public bool SupplierCanDeliver;
        public int? SupplierCoverageDays;
        public decimal? SupplierMaxQuantity;
        public bool SupplierSharesStock;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if (original == null) return;
            original.AutomatedForecast = AutomatedForecast;
            original.CreatedOn = CreatedOn;
            original.Id = Id ?? 0;
            original.InitialStockLevel = InitialStockLevel;
            original.ItemCoverageDays = ItemCoverageDays;
            original.OrderInventoryDays = OrderInventoryDays;
            original.Quantity = Quantity;
            original.RecommendedOrderDate = RecommendedOrderDate;
            original.ReplenishmentCycle = ReplenishmentCycle;
            original.RoundQuantity = RoundQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.Status = Status;
            original.SupplierAvailableQuantity = SupplierAvailableQuantity;
            original.SupplierCanDeliver = SupplierCanDeliver;
            original.SupplierCoverageDays = SupplierCoverageDays;
            original.SupplierMaxQuantity = SupplierMaxQuantity;
            original.SupplierSharesStock = SupplierSharesStock;
        }
        public static Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Recommendations_Notification_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Recommendations_Notification_Item_ItemDTO() { }
        public Recommendations_Notification_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            AvgDailyDemand = original.AvgDailyDemand;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            UPC = original.UPC;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public decimal? AvgDailyDemand;
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string UPC;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.AvgDailyDemand = AvgDailyDemand;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.UPC = UPC;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Recommendations_Notification_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Recommendations_Notification_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Recommendations_Notification_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Recommendations_Notification_Warehouse_WarehouseDTO() { }
        public Recommendations_Notification_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            FlowType = original.FlowType;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public string FlowType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.FlowType = FlowType;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Recommendations_Notification_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Recommendations_Notification_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class Alerts_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {

        [JsonConstructor]
        public Alerts_NotificationDTO() { }
        public Alerts_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            Diff = original.Diff;
            Id = original.Id;
            Message = original.Message;
            OrderForecastQuantity = original.OrderForecastQuantity;
            SalesForecastDate = original.SalesForecastDate;
            TotalSupplierStock = original.TotalSupplierStock;
            OrderForecastDetails = original.OrderForecastDetails == null ? null : new Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO(original.OrderForecastDetails);
            Item = original.Item == null ? null : new Alerts_Notification_Item_ItemDTO(original.Item);
            Warehouse = original.Warehouse == null ? null : new Alerts_Notification_Warehouse_WarehouseDTO(original.Warehouse);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public int? Diff;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Message;
        public int? OrderForecastQuantity;
        public DateTime? SalesForecastDate;
        public int? TotalSupplierStock;
        public Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO OrderForecastDetails;
        public Alerts_Notification_Item_ItemDTO Item;
        public Alerts_Notification_Warehouse_WarehouseDTO Warehouse;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Notification GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Notification>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.Diff = Diff;
            original.Id = Id ?? 0;
            original.Message = Message;
            original.OrderForecastQuantity = OrderForecastQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.TotalSupplierStock = TotalSupplierStock;
            original.OrderForecastDetails = OrderForecastDetails == null
                                            ? null
                                            : OrderForecastDetails.Convert();
            original.Item = Item == null
                            ? null
                            : Item.Convert();
            original.Warehouse = Warehouse == null
                                 ? null
                                 : Warehouse.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Alerts_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Alerts_NotificationDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {

        [JsonConstructor]
        public Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO() { }
        public Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AutomatedForecast = original.AutomatedForecast;
            CreatedOn = original.CreatedOn;
            Id = original.Id;
            InitialStockLevel = original.InitialStockLevel;
            ItemCoverageDays = original.ItemCoverageDays;
            OrderInventoryDays = original.OrderInventoryDays;
            Quantity = original.Quantity;
            RecommendedOrderDate = original.RecommendedOrderDate;
            ReplenishmentCycle = original.ReplenishmentCycle;
            RoundQuantity = original.RoundQuantity;
            SalesForecastDate = original.SalesForecastDate;
            Status = original.Status;
            SupplierAvailableQuantity = original.SupplierAvailableQuantity;
            SupplierCanDeliver = original.SupplierCanDeliver;
            SupplierCoverageDays = original.SupplierCoverageDays;
            SupplierMaxQuantity = original.SupplierMaxQuantity;
            SupplierSharesStock = original.SupplierSharesStock;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? AutomatedForecast;
        public DateTime? CreatedOn;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? InitialStockLevel;
        public int? ItemCoverageDays;
        public decimal? OrderInventoryDays;
        public decimal? Quantity;
        public DateTime? RecommendedOrderDate;
        public int? ReplenishmentCycle;
        public int? RoundQuantity;
        public DateTime? SalesForecastDate;
        public string Status;
        public int? SupplierAvailableQuantity;
        public bool SupplierCanDeliver;
        public int? SupplierCoverageDays;
        public decimal? SupplierMaxQuantity;
        public bool SupplierSharesStock;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if (original == null) return;
            original.AutomatedForecast = AutomatedForecast;
            original.CreatedOn = CreatedOn;
            original.Id = Id ?? 0;
            original.InitialStockLevel = InitialStockLevel;
            original.ItemCoverageDays = ItemCoverageDays;
            original.OrderInventoryDays = OrderInventoryDays;
            original.Quantity = Quantity;
            original.RecommendedOrderDate = RecommendedOrderDate;
            original.ReplenishmentCycle = ReplenishmentCycle;
            original.RoundQuantity = RoundQuantity;
            original.SalesForecastDate = SalesForecastDate;
            original.Status = Status;
            original.SupplierAvailableQuantity = SupplierAvailableQuantity;
            original.SupplierCanDeliver = SupplierCanDeliver;
            original.SupplierCoverageDays = SupplierCoverageDays;
            original.SupplierMaxQuantity = SupplierMaxQuantity;
            original.SupplierSharesStock = SupplierSharesStock;
        }
        public static Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Alerts_Notification_OrderForecastDetails_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class Alerts_Notification_Item_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public Alerts_Notification_Item_ItemDTO() { }
        public Alerts_Notification_Item_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            AvgDailyDemand = original.AvgDailyDemand;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            UPC = original.UPC;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public decimal? AvgDailyDemand;
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string UPC;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.AvgDailyDemand = AvgDailyDemand;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.UPC = UPC;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Alerts_Notification_Item_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Alerts_Notification_Item_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class Alerts_Notification_Warehouse_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {

        [JsonConstructor]
        public Alerts_Notification_Warehouse_WarehouseDTO() { }
        public Alerts_Notification_Warehouse_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            FlowType = original.FlowType;
            Id = original.Id;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public string FlowType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.FlowType = FlowType;
            original.Id = Id ?? 0;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Alerts_Notification_Warehouse_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Alerts_Notification_Warehouse_WarehouseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter))]
    public class SupplierParameters_SupplierParameterDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>
    {

        [JsonConstructor]
        public SupplierParameters_SupplierParameterDTO() { }
        public SupplierParameters_SupplierParameterDTO(DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CoverageDays = original.CoverageDays;
            HasReplied = original.HasReplied;
            Id = original.Id;
            SharesExcessStock = original.SharesExcessStock;
            SupplierCanDeliverWholeForecast = original.SupplierCanDeliverWholeForecast;
            SupplierComments = original.SupplierComments;
            Agreement = original.Agreement == null ? null : new SupplierParameters_SupplierParameter_Agreement_AgreementDTO(original.Agreement);
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? CoverageDays;
        public bool HasReplied;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool SharesExcessStock;
        public bool SupplierCanDeliverWholeForecast;
        public string SupplierComments;
        public SupplierParameters_SupplierParameter_Agreement_AgreementDTO Agreement;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter original)
        {
            if (original == null) return;
            original.CoverageDays = CoverageDays;
            original.HasReplied = HasReplied;
            original.Id = Id ?? 0;
            original.SharesExcessStock = SharesExcessStock;
            original.SupplierCanDeliverWholeForecast = SupplierCanDeliverWholeForecast;
            original.SupplierComments = SupplierComments;
            original.Agreement = Agreement == null
                                 ? null
                                 : Agreement.Convert();
        }
        public static SupplierParameters_SupplierParameterDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SupplierParameters_SupplierParameterDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class SupplierParameters_SupplierParameter_Agreement_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public SupplierParameters_SupplierParameter_Agreement_AgreementDTO() { }
        public SupplierParameters_SupplierParameter_Agreement_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AgreementDocument = original.AgreementDocument;
            DateCreated = original.DateCreated;
            FullTruckLoad = original.FullTruckLoad;
            Id = original.Id;
            LeadTime = original.LeadTime;
            Profile = original.Profile;
            TargetInventoryDays = original.TargetInventoryDays;
            WDDeliveries = original.WDDeliveries;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string AgreementDocument;
        public DateTime? DateCreated;
        public bool FullTruckLoad;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string LeadTime;
        public string Profile;
        public int? TargetInventoryDays;
        public bool WDDeliveries;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.AgreementDocument = AgreementDocument;
            original.DateCreated = DateCreated;
            original.FullTruckLoad = FullTruckLoad;
            original.Id = Id ?? 0;
            original.LeadTime = LeadTime;
            original.Profile = Profile;
            original.TargetInventoryDays = TargetInventoryDays;
            original.WDDeliveries = WDDeliveries;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SupplierParameters_SupplierParameter_Agreement_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SupplierParameters_SupplierParameter_Agreement_AgreementDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    public class OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierAvailableQuantity;
        public bool SupplierCanDeliver;
        public OrderForecastDTO OrderForecast;
        public ItemDTO Item;
        public NotificationDTO Notification;
        public string Status;
        public decimal? Quantity;
        public DateTime? RecommendedOrderDate;
        public WarehouseDTO Warehouse;


        [JsonConstructor]
        public OrderForecastDetailsDTO() : base() {}
        public  static OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SupplierAvailableQuantity = original.SupplierAvailableQuantity;
            SupplierCanDeliver = original.SupplierCanDeliver;
            OrderForecast = original.OrderForecast == null
                            ? null
                            : DTOHelper.GetDTOFromModel<OrderForecastDTO>(original.OrderForecast as DSS1_RetailerDriverStockOptimisation.BO.OrderForecast);
            Item = original.Item == null
                   ? null
                   : DTOHelper.GetDTOFromModel<ItemDTO>(original.Item as DSS1_RetailerDriverStockOptimisation.BO.Item);
            Notification = original.Notification == null
                           ? null
                           : DTOHelper.GetDTOFromModel<NotificationDTO>(original.Notification as DSS1_RetailerDriverStockOptimisation.BO.Notification);
            Status = original.Status;
            Quantity = original.Quantity;
            RecommendedOrderDate = original.RecommendedOrderDate;
            Warehouse = original.Warehouse == null
                        ? null
                        : DTOHelper.GetDTOFromModel<WarehouseDTO>(original.Warehouse as DSS1_RetailerDriverStockOptimisation.BO.Warehouse);
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.SupplierAvailableQuantity = SupplierAvailableQuantity;
            model.SupplierCanDeliver = SupplierCanDeliver;
            model.OrderForecast = OrderForecast == null
                                  ? null
                                  : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(OrderForecast);
            model.Item = Item == null
                         ? null
                         : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>(Item);
            model.Notification = Notification == null
                                 ? null
                                 : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>(Notification);
            model.Status = Status;
            model.Quantity = Quantity;
            model.RecommendedOrderDate = RecommendedOrderDate;
            model.Warehouse = Warehouse == null
                              ? null
                              : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(Warehouse);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    public class OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public List<OrderForecastDetailsDTO> OrderForecastDetails;
        public string Status;
        public string State;


        [JsonConstructor]
        public OrderForecastDTO() : base() {}
        public  static OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecastDTO(foundEntry);
            }
            return null;
        }
        public OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderForecastDetails = original.OrderForecastDetails == null
                                   ? new List<OrderForecastDetailsDTO>()
                                   : original.OrderForecastDetails.Select(q => DTOHelper.GetDTOFromModel<OrderForecastDetailsDTO>(q as DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails)).ToList();
            Status = original.Status;
            State = original.State;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderForecastDetails = OrderForecastDetails == null
                                         ? null
                                         : OrderForecastDetails.Select(q => DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(q)).ToList();
            model.Status = Status;
            model.State = State;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public SupplierDTO Supplier;


        [JsonConstructor]
        public ItemDTO() : base() {}
        public  static ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<SupplierDTO>(original.Supplier as DSS1_RetailerDriverStockOptimisation.BO.Supplier);
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(Supplier);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class SupplierDTO : CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Code;


        [JsonConstructor]
        public SupplierDTO() : base() {}
        public new static SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierDTO(foundEntry);
            }
            return null;
        }
        public SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Code = original.Code;
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    public class CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Code;


        [JsonConstructor]
        public CompanyDTO() : base() {}
        public  static CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CompanyDTO(foundEntry);
            }
            return null;
        }
        public CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Code = original.Code;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Message;
        public ItemDTO Item;
        public OrderForecastDetailsDTO OrderForecastDetails;
        public int? Diff;
        public DateTime? SalesForecastDate;
        public int? TotalSupplierStock;
        public int? OrderForecastQuantity;
        public WarehouseDTO Warehouse;
        public string CreatedBy;


        [JsonConstructor]
        public NotificationDTO() : base() {}
        public  static NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new NotificationDTO(foundEntry);
            }
            return null;
        }
        public NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Message = original.Message;
            Item = original.Item == null
                   ? null
                   : DTOHelper.GetDTOFromModel<ItemDTO>(original.Item as DSS1_RetailerDriverStockOptimisation.BO.Item);
            OrderForecastDetails = original.OrderForecastDetails == null
                                   ? null
                                   : DTOHelper.GetDTOFromModel<OrderForecastDetailsDTO>(original.OrderForecastDetails as DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails);
            Diff = original.Diff;
            SalesForecastDate = original.SalesForecastDate;
            TotalSupplierStock = original.TotalSupplierStock;
            OrderForecastQuantity = original.OrderForecastQuantity;
            Warehouse = original.Warehouse == null
                        ? null
                        : DTOHelper.GetDTOFromModel<WarehouseDTO>(original.Warehouse as DSS1_RetailerDriverStockOptimisation.BO.Warehouse);
            CreatedBy = original.CreatedBy;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Notification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Message = Message;
            model.Item = Item == null
                         ? null
                         : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>(Item);
            model.OrderForecastDetails = OrderForecastDetails == null
                                         ? null
                                         : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(OrderForecastDetails);
            model.Diff = Diff;
            model.SalesForecastDate = SalesForecastDate;
            model.TotalSupplierStock = TotalSupplierStock;
            model.OrderForecastQuantity = OrderForecastQuantity;
            model.Warehouse = Warehouse == null
                              ? null
                              : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(Warehouse);
            model.CreatedBy = CreatedBy;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    public class WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public WarehouseDTO() : base() {}
        public  static WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WarehouseDTO(foundEntry);
            }
            return null;
        }
        public WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }





    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    [DataSetDTO]
    public class CategoryDataSet_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public CategoryDataSet_CategoryDTO() : base() {}
        public  static CategoryDataSet_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CategoryDataSet_CategoryDTO(foundEntry);
            }
            return null;
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Category GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class SubCategoryDataSet_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SubCategoryDataSet_SubCategoryDTO() : base() {}
        public  static SubCategoryDataSet_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDataSet_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    [DataSetDTO]
    public class BusinessUnitDataSet_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public BusinessUnitDataSet_BusinessUnitDTO() : base() {}
        public  static BusinessUnitDataSet_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessUnitDataSet_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    [DataSetDTO]
    public class OrderForecastsDS_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? StartDate;
        public DateTime? EndDate;
        public string Status;
        public string CreatedBy;
        public DateTime? CreatedOn;


        [JsonConstructor]
        public OrderForecastsDS_OrderForecastDTO() : base() {}
        public  static OrderForecastsDS_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecastsDS_OrderForecastDTO(foundEntry);
            }
            return null;
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            StartDate = original.StartDate;
            EndDate = original.EndDate;
            Status = original.Status;
            CreatedBy = original.CreatedBy;
            CreatedOn = original.CreatedOn;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.StartDate = StartDate;
            model.EndDate = EndDate;
            model.Status = Status;
            model.CreatedBy = CreatedBy;
            model.CreatedOn = CreatedOn;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class ForecastVS_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public int? SupplierStock;
        public int? OrderQuantity;


        [JsonConstructor]
        public ForecastVS_StatisticsDTO() : base() {}
        public  static ForecastVS_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ForecastVS_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ForecastVS_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            SupplierStock = original.SupplierStock;
            OrderQuantity = original.OrderQuantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.SupplierStock = SupplierStock;
            model.OrderQuantity = OrderQuantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics))]
    [DataSetDTO]
    public class StockDataSet_StatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Statistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Statistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderDateFormatted;
        public int? StockOnHand;
        public int? OrderQuantity;
        public int? SupplierStock;
        public int? SalesQuantity;


        [JsonConstructor]
        public StockDataSet_StatisticsDTO() : base() {}
        public  static StockDataSet_StatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Statistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new StockDataSet_StatisticsDTO(foundEntry);
            }
            return null;
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public StockDataSet_StatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.Statistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderDateFormatted = original.OrderDateFormatted;
            StockOnHand = original.StockOnHand;
            OrderQuantity = original.OrderQuantity;
            SupplierStock = original.SupplierStock;
            SalesQuantity = original.SalesQuantity;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Statistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Statistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Statistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Statistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderDateFormatted = OrderDateFormatted;
            model.StockOnHand = StockOnHand;
            model.OrderQuantity = OrderQuantity;
            model.SupplierStock = SupplierStock;
            model.SalesQuantity = SalesQuantity;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    [DataSetDTO]
    public class NotificationsDS_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public NotificationsDS_NotificationDTO() : base() {}
        public  static NotificationsDS_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new NotificationsDS_NotificationDTO(foundEntry);
            }
            return null;
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Notification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public SelectedOrderForecastDetailsDS_ItemDTO Item;
        public SelectedOrderForecastDetailsDS_WarehouseDTO Warehouse;
        public DateTime? RecommendedOrderDate;
        public int? ItemCoverageDays;
        public decimal? Quantity;
        public SelectedOrderForecastDetailsDS_NotificationDTO Notification;
        public int? SupplierAvailableQuantity;
        public bool SupplierCanDeliver;
        public string Status;


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Item = original.Item == null
                   ? null
                   : DTOHelper.GetDTOFromModel<SelectedOrderForecastDetailsDS_ItemDTO>(original.Item as DSS1_RetailerDriverStockOptimisation.BO.Item);
            Warehouse = original.Warehouse == null
                        ? null
                        : DTOHelper.GetDTOFromModel<SelectedOrderForecastDetailsDS_WarehouseDTO>(original.Warehouse as DSS1_RetailerDriverStockOptimisation.BO.Warehouse);
            RecommendedOrderDate = original.RecommendedOrderDate;
            ItemCoverageDays = original.ItemCoverageDays;
            Quantity = original.Quantity;
            Notification = original.Notification == null
                           ? null
                           : DTOHelper.GetDTOFromModel<SelectedOrderForecastDetailsDS_NotificationDTO>(original.Notification as DSS1_RetailerDriverStockOptimisation.BO.Notification);
            SupplierAvailableQuantity = original.SupplierAvailableQuantity;
            SupplierCanDeliver = original.SupplierCanDeliver;
            Status = original.Status;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Item = Item == null
                         ? null
                         : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>(Item);
            model.Warehouse = Warehouse == null
                              ? null
                              : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(Warehouse);
            model.RecommendedOrderDate = RecommendedOrderDate;
            model.ItemCoverageDays = ItemCoverageDays;
            model.Quantity = Quantity;
            model.Notification = Notification == null
                                 ? null
                                 : DTOHelper.GetModelFromDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>(Notification);
            model.SupplierAvailableQuantity = SupplierAvailableQuantity;
            model.SupplierCanDeliver = SupplierCanDeliver;
            model.Status = Status;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_ItemDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public SelectedOrderForecastDetailsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_WarehouseDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_WarehouseDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderForecastDetailsDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Diff;


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_NotificationDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_NotificationDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderForecastDetailsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Diff = original.Diff;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Notification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Diff = Diff;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class AllSubcategoriesDS_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public AllSubcategoriesDS_SubCategoryDTO() : base() {}
        public  static AllSubcategoriesDS_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllSubcategoriesDS_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public ItemsDS_ItemDTO() : base() {}
        public  static ItemsDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsVMDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public ItemsVMDS_ItemDTO() : base() {}
        public  static ItemsVMDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsVMDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    [DataSetDTO]
    public class AllBaseUnitsDS_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public AllBaseUnitsDS_BaseUnitDTO() : base() {}
        public  static AllBaseUnitsDS_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllBaseUnitsDS_BaseUnitDTO(foundEntry);
            }
            return null;
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class SuppliersDS_SupplierDTO : SuppliersDS_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SuppliersDS_SupplierDTO() : base() {}
        public new static SuppliersDS_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class SuppliersDS_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SuppliersDS_CompanyDTO() : base() {}
        public  static SuppliersDS_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_CompanyDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    [DataSetDTO]
    public class WarehousesDS_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Description;


        [JsonConstructor]
        public WarehousesDS_WarehouseDTO() : base() {}
        public  static WarehousesDS_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WarehousesDS_WarehouseDTO(foundEntry);
            }
            return null;
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Description = original.Description;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class SelectedOrderFDetailsVM_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SelectedOrderFDetailsVM_OrderForecastDetailsDTO() : base() {}
        public  static SelectedOrderFDetailsVM_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderFDetailsVM_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderFDetailsVM_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderFDetailsVM_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Comment))]
    [DataSetDTO]
    public class Commets_CommentDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Comment>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Comment).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Commets_CommentDTO() : base() {}
        public  static Commets_CommentDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Comment>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SupplierViewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Comment>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Commets_CommentDTO(foundEntry);
            }
            return null;
        }
        public Commets_CommentDTO(DSS1_RetailerDriverStockOptimisation.BO.Comment original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Commets_CommentDTO(DSS1_RetailerDriverStockOptimisation.BO.Comment original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Comment GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Comment>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Comment Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Comment();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Comment>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
