// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.CalculationsForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPage;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPage;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm
{
    public class CalculationsFormViewModel : MasterPageViewModel
    {
        public string AlertsLength;
        public string Progress;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>> ListSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>> listOrderForecastsSelectedItems;


        public CalculationsFormViewModel()
        {
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel))]
    public class CalculationsFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel>
    {

        [JsonConstructor]
        public CalculationsFormViewModelDTO() { }
        public CalculationsFormViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            AlertsLength = original.AlertsLength;
            Progress = original.Progress;
            ListSelectedItemKeys = original.ListSelectedItems == null
                                   ? null
                                   : original.ListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            listOrderForecastsSelectedItemKeys = original.listOrderForecastsSelectedItems == null
                                                 ? null
                                                 : original.listOrderForecastsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public string AlertsLength;
        public string Progress;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> ListSelectedItemKeys;
        public List<SelectedItemInfo<int?>> listOrderForecastsSelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.CalculationsForm.CalculationsFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.AlertsLength = AlertsLength;
            original.Progress = Progress;
            original.ListSelectedItems = ListSelectedItemKeys == null
                                         ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>>()
                                         : ListSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(x.SelectedItems.Select(y => ViewModels.CalculationsForm.SalesForecasts_SalesForecastDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.listOrderForecastsSelectedItems = listOrderForecastsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>>()
                    : listOrderForecastsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(x.SelectedItems.Select(y => ViewModels.CalculationsForm.OrderForecasts_OrderForecastDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SalesForecast))]
    [DataSetDTO]
    public class SalesForecasts_SalesForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SalesForecast).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? ImportDate;


        [JsonConstructor]
        public SalesForecasts_SalesForecastDTO() : base() {}
        public  static SalesForecasts_SalesForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CalculationsFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SalesForecasts_SalesForecastDTO(foundEntry);
            }
            return null;
        }
        public SalesForecasts_SalesForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.SalesForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SalesForecasts_SalesForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.SalesForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            ImportDate = original.ImportDate;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SalesForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SalesForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SalesForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SalesForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.ImportDate = ImportDate;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    [DataSetDTO]
    public class OrderForecasts_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? CreatedOn;
        public string CreatedBy;


        [JsonConstructor]
        public OrderForecasts_OrderForecastDTO() : base() {}
        public  static OrderForecasts_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CalculationsFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecasts_OrderForecastDTO(foundEntry);
            }
            return null;
        }
        public OrderForecasts_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecasts_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            CreatedOn = original.CreatedOn;
            CreatedBy = original.CreatedBy;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.CreatedOn = CreatedOn;
            model.CreatedBy = CreatedBy;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
