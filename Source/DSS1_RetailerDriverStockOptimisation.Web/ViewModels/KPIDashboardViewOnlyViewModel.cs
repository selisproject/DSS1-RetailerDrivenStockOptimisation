// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS1_RetailerDriverStockOptimisation.BO;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.KPIDashboardViewOnly;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS1_RetailerDriverStockOptimisation.UI.ViewModels.MasterPageForSlide;
using DSS1_RetailerDriverStockOptimisation.UI.Controllers.MasterPageForSlide;
namespace DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly
{
    public class KPIDashboardViewOnlyViewModel : MasterPageForSlideViewModel
    {
        public List<DSS1_RetailerDriverStockOptimisation.BO.Agreement> SuppliersInSelectedForecast;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast SelectedForecast;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<DSS1_RetailerDriverStockOptimisation.BO.Item> SelectedSKUs;
        public DSS1_RetailerDriverStockOptimisation.BO.Item SelectedSKU;
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Supplier;
        public string FlowType;
        public List<int?> SelectedSuppliers;
        public List<int?> SelectedWarehouses;
        public List<int?> SelectedBUs;
        public List<int?> SelectedCategories;
        public List<int?> SelectedSubcategories;
        public List<int?> SelectedBaseUnits;
        public List<string> SelectedItemSKUs;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>> chartStockLevelsInvDaysSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>> chartStockLevelsUnitsSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartSLALeadTimeSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartSLADeliverySelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>> chartWasteSelectedItems;
        public List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>> chartOrderForecastSelectedItems;


        public KPIDashboardViewOnlyViewModel()
        {
            SuppliersInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Agreement>();
            SelectedForecast = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            ItemsInSelectedForecast = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKUs = new List<DSS1_RetailerDriverStockOptimisation.BO.Item>();
            SelectedSKU = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            Supplier = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            SelectedSuppliers = new List<int?>();
            SelectedWarehouses = new List<int?>();
            SelectedBUs = new List<int?>();
            SelectedCategories = new List<int?>();
            SelectedSubcategories = new List<int?>();
            SelectedBaseUnits = new List<int?>();
            SelectedItemSKUs = new List<string>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (SuppliersInSelectedForecast != null)
            {
                foreach (var item in SuppliersInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedForecast))
            {
                manager.Session.Evict(SelectedForecast);
            }
            if (ItemsInSelectedForecast != null)
            {
                foreach (var item in ItemsInSelectedForecast)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (SelectedSKUs != null)
            {
                foreach (var item in SelectedSKUs)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedSKU))
            {
                manager.Session.Evict(SelectedSKU);
            }
            if (manager.Session.Contains(Supplier))
            {
                manager.Session.Evict(Supplier);
            }
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel))]
    public class KPIDashboardViewOnlyViewModelDTO : MasterPageForSlideViewModelDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel>
    {

        [JsonConstructor]
        public KPIDashboardViewOnlyViewModelDTO() { }
        public KPIDashboardViewOnlyViewModelDTO(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            SuppliersInSelectedForecast = original.SuppliersInSelectedForecast?.Select(x => new SuppliersInSelectedForecast_AgreementDTO(x)).ToList();
            SelectedForecast = original.SelectedForecast == null ? null : new SelectedForecast_OrderForecastDTO(original.SelectedForecast);
            ItemsInSelectedForecast = original.ItemsInSelectedForecast?.Select(x => new ItemsInSelectedForecast_ItemDTO(x)).ToList();
            ToDate = original.ToDate;
            FromDate = original.FromDate;
            SelectedSKUs = original.SelectedSKUs?.Select(x => new SelectedSKUs_ItemDTO(x)).ToList();
            SelectedSKU = original.SelectedSKU == null ? null : new SelectedSKU_ItemDTO(original.SelectedSKU);
            Supplier = original.Supplier == null ? null : new Supplier_SupplierDTO(original.Supplier);
            FlowType = original.FlowType;
            SelectedSuppliers = original.SelectedSuppliers == null
                                ? new List<int?>()
                                : original.SelectedSuppliers;
            SelectedWarehouses = original.SelectedWarehouses == null
                                 ? new List<int?>()
                                 : original.SelectedWarehouses;
            SelectedBUs = original.SelectedBUs == null
                          ? new List<int?>()
                          : original.SelectedBUs;
            SelectedCategories = original.SelectedCategories == null
                                 ? new List<int?>()
                                 : original.SelectedCategories;
            SelectedSubcategories = original.SelectedSubcategories == null
                                    ? new List<int?>()
                                    : original.SelectedSubcategories;
            SelectedBaseUnits = original.SelectedBaseUnits == null
                                ? new List<int?>()
                                : original.SelectedBaseUnits;
            SelectedItemSKUs = original.SelectedItemSKUs == null
                               ? new List<string>()
                               : original.SelectedItemSKUs;
            chartStockLevelsInvDaysSelectedItemKeys = original.chartStockLevelsInvDaysSelectedItems == null
                    ? null
                    : original.chartStockLevelsInvDaysSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.InventoryDaysKPIKey).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartStockLevelsUnitsSelectedItemKeys = original.chartStockLevelsUnitsSelectedItems == null
                                                    ? null
                                                    : original.chartStockLevelsUnitsSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartSLALeadTimeSelectedItemKeys = original.chartSLALeadTimeSelectedItems == null
                                               ? null
                                               : original.chartSLALeadTimeSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartSLADeliverySelectedItemKeys = original.chartSLADeliverySelectedItems == null
                                               ? null
                                               : original.chartSLADeliverySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartWasteSelectedItemKeys = original.chartWasteSelectedItems == null
                                         ? null
                                         : original.chartWasteSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItems == null
                                                 ? null
                                                 : original.chartOrderForecastSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public List<SuppliersInSelectedForecast_AgreementDTO> SuppliersInSelectedForecast;
        public SelectedForecast_OrderForecastDTO SelectedForecast;
        public List<ItemsInSelectedForecast_ItemDTO> ItemsInSelectedForecast;
        public DateTime? ToDate;
        public DateTime? FromDate;
        public List<SelectedSKUs_ItemDTO> SelectedSKUs;
        public SelectedSKU_ItemDTO SelectedSKU;
        public Supplier_SupplierDTO Supplier;
        public string FlowType;
        public List<int?> SelectedSuppliers;
        public List<int?> SelectedWarehouses;
        public List<int?> SelectedBUs;
        public List<int?> SelectedCategories;
        public List<int?> SelectedSubcategories;
        public List<int?> SelectedBaseUnits;
        public List<string> SelectedItemSKUs;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel).FullName;
        public List<SelectedItemInfo<int?>> chartStockLevelsInvDaysSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartStockLevelsUnitsSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartSLALeadTimeSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartSLADeliverySelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartWasteSelectedItemKeys;
        public List<SelectedItemInfo<int?>> chartOrderForecastSelectedItemKeys;

        public new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel();
        }
        new  public DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.UI.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.SuppliersInSelectedForecast = SuppliersInSelectedForecast == null
                                                   ? null
                                                   : SuppliersInSelectedForecast.Select(q => q.Convert()).ToList();
            original.SelectedForecast = SelectedForecast == null
                                        ? null
                                        : SelectedForecast.Convert();
            original.ItemsInSelectedForecast = ItemsInSelectedForecast == null
                                               ? null
                                               : ItemsInSelectedForecast.Select(q => q.Convert()).ToList();
            original.ToDate = ToDate;
            original.FromDate = FromDate;
            original.SelectedSKUs = SelectedSKUs == null
                                    ? null
                                    : SelectedSKUs.Select(q => q.Convert()).ToList();
            original.SelectedSKU = SelectedSKU == null
                                   ? null
                                   : SelectedSKU.Convert();
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.FlowType = FlowType;
            original.SelectedSuppliers = SelectedSuppliers;
            original.SelectedWarehouses = SelectedWarehouses;
            original.SelectedBUs = SelectedBUs;
            original.SelectedCategories = SelectedCategories;
            original.SelectedSubcategories = SelectedSubcategories;
            original.SelectedBaseUnits = SelectedBaseUnits;
            original.SelectedItemSKUs = SelectedItemSKUs;
            original.chartStockLevelsInvDaysSelectedItems = chartStockLevelsInvDaysSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>>()
                    : chartStockLevelsInvDaysSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.InventoryDaysKPIDataSet_InventoryDaysKPIDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartStockLevelsUnitsSelectedItems = chartStockLevelsUnitsSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>>()
                    : chartStockLevelsUnitsSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.UnitsKPIDataSet_UnitsKPIDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartSLALeadTimeSelectedItems = chartSLALeadTimeSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartSLALeadTimeSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.SLALeadMonthly_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartSLADeliverySelectedItems = chartSLADeliverySelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartSLADeliverySelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.SLADelivery_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartWasteSelectedItems = chartWasteSelectedItemKeys == null
                                               ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>>()
                                               : chartWasteSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.Stats>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.WasteDataSet_StatsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.chartOrderForecastSelectedItems = chartOrderForecastSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>>()
                    : chartOrderForecastSelectedItemKeys.Select(x => new SelectedItemInfo<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(x.SelectedItems.Select(y => ViewModels.KPIDashboardViewOnly.PlatformDataSet_SLAStatisticsDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class SuppliersInSelectedForecast_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_AgreementDTO() { }
        public SuppliersInSelectedForecast_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            TargetInventoryDays = original.TargetInventoryDays;
            Supplier = original.Supplier == null ? null : new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(original.Supplier);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? TargetInventoryDays;
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO Supplier;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.TargetInventoryDays = TargetInventoryDays;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SuppliersInSelectedForecast_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO() { }
        public SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SuppliersInSelectedForecast_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    public class SelectedForecast_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {

        [JsonConstructor]
        public SelectedForecast_OrderForecastDTO() { }
        public SelectedForecast_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CreatedBy = original.CreatedBy;
            CreatedOn = original.CreatedOn;
            EndDate = original.EndDate;
            Id = original.Id;
            StartDate = original.StartDate;
            State = original.State;
            Status = original.Status;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string CreatedBy;
        public DateTime? CreatedOn;
        public DateTime? EndDate;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? StartDate;
        public string State;
        public string Status;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if (original == null) return;
            original.CreatedBy = CreatedBy;
            original.CreatedOn = CreatedOn;
            original.EndDate = EndDate;
            original.Id = Id ?? 0;
            original.StartDate = StartDate;
            original.State = State;
            original.Status = Status;
        }
        public static SelectedForecast_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedForecast_OrderForecastDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class ItemsInSelectedForecast_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public ItemsInSelectedForecast_ItemDTO() { }
        public ItemsInSelectedForecast_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            CoverageDays = original.CoverageDays;
            Description = original.Description;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? CoverageDays;
        public string Description;
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.CoverageDays = CoverageDays;
            original.Description = Description;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static ItemsInSelectedForecast_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new ItemsInSelectedForecast_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKUs_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKUs_ItemDTO() { }
        public SelectedSKUs_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            SKU = original.SKU;
            Description = original.Description;
            UPC = original.UPC;
            AvgDailyDemand = original.AvgDailyDemand;
            CoverageDays = original.CoverageDays;
            PalletSize = original.PalletSize;
            SupplierPackSize = original.SupplierPackSize;
            InnerPackSize = original.InnerPackSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            PalHI = original.PalHI;
            UOM = original.UOM;
            SupplierCapacities = original.SupplierCapacities?.Select(x => new SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO(x)).ToList();
            Supplier = original.Supplier == null ? null : new SelectedSKUs_Item_Supplier_SupplierDTO(original.Supplier);
            BusinessUnit = original.BusinessUnit == null ? null : new SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Category = original.Category == null ? null : new SelectedSKUs_Item_Category_CategoryDTO(original.Category);
            SubCategory = original.SubCategory == null ? null : new SelectedSKUs_Item_SubCategory_SubCategoryDTO(original.SubCategory);
            BaseUnit = original.BaseUnit == null ? null : new SelectedSKUs_Item_BaseUnit_BaseUnitDTO(original.BaseUnit);
            ItemsForecast = original.ItemsForecast?.Select(x => new SelectedSKUs_Item_ItemsForecast_SalesDTO(x)).ToList();
            StocksOnHand = original.StocksOnHand?.Select(x => new SelectedSKUs_Item_StocksOnHand_StockOnHandDTO(x)).ToList();
            DeliverySchedules = original.DeliverySchedules?.Select(x => new SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO(x)).ToList();
            MinimumQuantity = original.MinimumQuantity == null ? null : new SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO(original.MinimumQuantity);
            Agreements = original.Agreements?.Select(x => new SelectedSKUs_Item_Agreements_AgreementDTO(x)).ToList();
            Notifications = original.Notifications?.Select(x => new SelectedSKUs_Item_Notifications_NotificationDTO(x)).ToList();
            SLALeadTimes = original.SLALeadTimes?.Select(x => new SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO(x)).ToList();
            SLADeliveries = original.SLADeliveries?.Select(x => new SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO(x)).ToList();
            PastOrders = original.PastOrders?.Select(x => new SelectedSKUs_Item_PastOrders_PastOrderDTO(x)).ToList();
            InventoryItems = original.InventoryItems?.Select(x => new SelectedSKUs_Item_InventoryItems_InventoryItemDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public string Description;
        public string UPC;
        public decimal? AvgDailyDemand;
        public int? CoverageDays;
        public int? PalletSize;
        public int? SupplierPackSize;
        public int? InnerPackSize;
        public string PalletType;
        public int? PalTI;
        public int? PalHI;
        public string UOM;
        public List<SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO> SupplierCapacities;
        public SelectedSKUs_Item_Supplier_SupplierDTO Supplier;
        public SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public SelectedSKUs_Item_Category_CategoryDTO Category;
        public SelectedSKUs_Item_SubCategory_SubCategoryDTO SubCategory;
        public SelectedSKUs_Item_BaseUnit_BaseUnitDTO BaseUnit;
        public List<SelectedSKUs_Item_ItemsForecast_SalesDTO> ItemsForecast;
        public List<SelectedSKUs_Item_StocksOnHand_StockOnHandDTO> StocksOnHand;
        public List<SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO> DeliverySchedules;
        public SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO MinimumQuantity;
        public List<SelectedSKUs_Item_Agreements_AgreementDTO> Agreements;
        public List<SelectedSKUs_Item_Notifications_NotificationDTO> Notifications;
        public List<SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO> SLALeadTimes;
        public List<SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO> SLADeliveries;
        public List<SelectedSKUs_Item_PastOrders_PastOrderDTO> PastOrders;
        public List<SelectedSKUs_Item_InventoryItems_InventoryItemDTO> InventoryItems;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.SKU = SKU ?? "";
            original.Description = Description;
            original.UPC = UPC;
            original.AvgDailyDemand = AvgDailyDemand;
            original.CoverageDays = CoverageDays;
            original.PalletSize = PalletSize;
            original.SupplierPackSize = SupplierPackSize;
            original.InnerPackSize = InnerPackSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.PalHI = PalHI;
            original.UOM = UOM;
            original.SupplierCapacities = SupplierCapacities == null
                                          ? null
                                          : SupplierCapacities.Select(q => q.Convert()).ToList();
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Category = Category == null
                                ? null
                                : Category.Convert();
            original.SubCategory = SubCategory == null
                                   ? null
                                   : SubCategory.Convert();
            original.BaseUnit = BaseUnit == null
                                ? null
                                : BaseUnit.Convert();
            original.ItemsForecast = ItemsForecast == null
                                     ? null
                                     : ItemsForecast.Select(q => q.Convert()).ToList();
            original.StocksOnHand = StocksOnHand == null
                                    ? null
                                    : StocksOnHand.Select(q => q.Convert()).ToList();
            original.DeliverySchedules = DeliverySchedules == null
                                         ? null
                                         : DeliverySchedules.Select(q => q.Convert()).ToList();
            original.MinimumQuantity = MinimumQuantity == null
                                       ? null
                                       : MinimumQuantity.Convert();
            original.Agreements = Agreements == null
                                  ? null
                                  : Agreements.Select(q => q.Convert()).ToList();
            original.Notifications = Notifications == null
                                     ? null
                                     : Notifications.Select(q => q.Convert()).ToList();
            original.SLALeadTimes = SLALeadTimes == null
                                    ? null
                                    : SLALeadTimes.Select(q => q.Convert()).ToList();
            original.SLADeliveries = SLADeliveries == null
                                     ? null
                                     : SLADeliveries.Select(q => q.Convert()).ToList();
            original.PastOrders = PastOrders == null
                                  ? null
                                  : PastOrders.Select(q => q.Convert()).ToList();
            original.InventoryItems = InventoryItems == null
                                      ? null
                                      : InventoryItems.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity))]
    public class SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO() { }
        public SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO(DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            DateOfStockUpdate = original.DateOfStockUpdate;
            DailyProduction = original.DailyProduction;
            Stock = original.Stock;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? DateOfStockUpdate;
        public int? DailyProduction;
        public int? Stock;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.DateOfStockUpdate = DateOfStockUpdate;
            original.DailyProduction = DailyProduction;
            original.Stock = Stock;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_SupplierCapacities_SupplierCapacityDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class SelectedSKUs_Item_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_Supplier_SupplierDTO() { }
        public SelectedSKUs_Item_Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Name;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Name = Name;
        }
        public static SelectedSKUs_Item_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO() { }
        public SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    public class SelectedSKUs_Item_Category_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_Category_CategoryDTO() { }
        public SelectedSKUs_Item_Category_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Category GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Category>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_Category_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_Category_CategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    public class SelectedSKUs_Item_SubCategory_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_SubCategory_SubCategoryDTO() { }
        public SelectedSKUs_Item_SubCategory_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_SubCategory_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_SubCategory_SubCategoryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    public class SelectedSKUs_Item_BaseUnit_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_BaseUnit_BaseUnitDTO() { }
        public SelectedSKUs_Item_BaseUnit_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Number = original.Number;
            Description = original.Description;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string Description;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.Description = Description;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_BaseUnit_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_BaseUnit_BaseUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Sales))]
    public class SelectedSKUs_Item_ItemsForecast_SalesDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Sales>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_ItemsForecast_SalesDTO() { }
        public SelectedSKUs_Item_ItemsForecast_SalesDTO(DSS1_RetailerDriverStockOptimisation.BO.Sales original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            ForecastDate = original.ForecastDate;
            Units = original.Units;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? ForecastDate;
        public int? Units;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Sales).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Sales GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Sales>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Sales();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Sales>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Sales Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Sales();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Sales original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.ForecastDate = ForecastDate;
            original.Units = Units;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_ItemsForecast_SalesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Sales>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_ItemsForecast_SalesDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand))]
    public class SelectedSKUs_Item_StocksOnHand_StockOnHandDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_StocksOnHand_StockOnHandDTO() { }
        public SelectedSKUs_Item_StocksOnHand_StockOnHandDTO(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Units = original.Units;
            CurrentInventoryDays = original.CurrentInventoryDays;
            StockOnHandDate = original.StockOnHandDate;
            LeadTime = original.LeadTime;
            TargetInventoryDays = original.TargetInventoryDays;
            FullTrackLoad = original.FullTrackLoad;
            WDDays = original.WDDays;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Units;
        public decimal? CurrentInventoryDays;
        public DateTime? StockOnHandDate;
        public string LeadTime;
        public decimal? TargetInventoryDays;
        public bool FullTrackLoad;
        public bool WDDays;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.StockOnHand GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.StockOnHand();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.StockOnHand Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.StockOnHand();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.StockOnHand original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Units = Units;
            original.CurrentInventoryDays = CurrentInventoryDays;
            original.StockOnHandDate = StockOnHandDate;
            original.LeadTime = LeadTime;
            original.TargetInventoryDays = TargetInventoryDays;
            original.FullTrackLoad = FullTrackLoad;
            original.WDDays = WDDays;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_StocksOnHand_StockOnHandDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.StockOnHand>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_StocksOnHand_StockOnHandDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule))]
    public class SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO() { }
        public SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            LeadTime = original.LeadTime;
            Weekday = original.Weekday;
            NameOfDay = original.NameOfDay;
            DBWeekday = original.DBWeekday;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? LeadTime;
        public int? Weekday;
        public string NameOfDay;
        public int? DBWeekday;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.LeadTime = LeadTime;
            original.Weekday = Weekday;
            original.NameOfDay = NameOfDay;
            original.DBWeekday = DBWeekday;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity))]
    public class SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO() { }
        public SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO(DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Country = original.Country;
            Quantity = original.Quantity;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Country;
        public int? Quantity;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Country = Country;
            original.Quantity = Quantity;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_MinimumQuantity_MinimumQuantityDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement))]
    public class SelectedSKUs_Item_Agreements_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_Agreements_AgreementDTO() { }
        public SelectedSKUs_Item_Agreements_AgreementDTO(DSS1_RetailerDriverStockOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            FullTruckLoad = original.FullTruckLoad;
            AgreementDocument = original.AgreementDocument;
            LeadTime = original.LeadTime;
            DateCreated = original.DateCreated;
            WDDeliveries = original.WDDeliveries;
            TargetInventoryDays = original.TargetInventoryDays;
            Profile = original.Profile;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool FullTruckLoad;
        public string AgreementDocument;
        public string LeadTime;
        public DateTime? DateCreated;
        public bool WDDeliveries;
        public int? TargetInventoryDays;
        public string Profile;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.FullTruckLoad = FullTruckLoad;
            original.AgreementDocument = AgreementDocument;
            original.LeadTime = LeadTime;
            original.DateCreated = DateCreated;
            original.WDDeliveries = WDDeliveries;
            original.TargetInventoryDays = TargetInventoryDays;
            original.Profile = Profile;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_Agreements_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_Agreements_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    public class SelectedSKUs_Item_Notifications_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_Notifications_NotificationDTO() { }
        public SelectedSKUs_Item_Notifications_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Message = original.Message;
            TotalSupplierStock = original.TotalSupplierStock;
            OrderForecastQuantity = original.OrderForecastQuantity;
            Diff = original.Diff;
            SalesForecastDate = original.SalesForecastDate;
            CreatedBy = original.CreatedBy;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Message;
        public int? TotalSupplierStock;
        public int? OrderForecastQuantity;
        public int? Diff;
        public DateTime? SalesForecastDate;
        public string CreatedBy;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Notification GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Notification>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Message = Message;
            original.TotalSupplierStock = TotalSupplierStock;
            original.OrderForecastQuantity = OrderForecastQuantity;
            original.Diff = Diff;
            original.SalesForecastDate = SalesForecastDate;
            original.CreatedBy = CreatedBy;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_Notifications_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_Notifications_NotificationDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime))]
    public class SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO() { }
        public SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO(DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            AgreedLeadTime = original.AgreedLeadTime;
            RealLeadTime = original.RealLeadTime;
            Percentage = original.Percentage;
            ItemDescription = original.ItemDescription;
            DateFormatted = original.DateFormatted;
            Threshold = original.Threshold;
            SLALeadDate = original.SLALeadDate;
            Month = original.Month;
            MonthlyDelayed = original.MonthlyDelayed;
            MontlhyOrders = original.MontlhyOrders;
            MonthlyPercentage = original.MonthlyPercentage;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? AgreedLeadTime;
        public int? RealLeadTime;
        public decimal? Percentage;
        public string ItemDescription;
        public string DateFormatted;
        public decimal? Threshold;
        public DateTime? SLALeadDate;
        public int? Month;
        public decimal? MonthlyDelayed;
        public decimal? MontlhyOrders;
        public decimal? MonthlyPercentage;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.AgreedLeadTime = AgreedLeadTime;
            original.RealLeadTime = RealLeadTime;
            original.Percentage = Percentage;
            original.ItemDescription = ItemDescription;
            original.DateFormatted = DateFormatted;
            original.Threshold = Threshold;
            original.SLALeadDate = SLALeadDate;
            original.Month = Month;
            original.MonthlyDelayed = MonthlyDelayed;
            original.MontlhyOrders = MontlhyOrders;
            original.MonthlyPercentage = MonthlyPercentage;
        }
        public static SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_SLALeadTimes_SLALeadTimeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLADelivery))]
    public class SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO() { }
        public SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO(DSS1_RetailerDriverStockOptimisation.BO.SLADelivery original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            OrderedQuantities = original.OrderedQuantities;
            DeliveredQuantities = original.DeliveredQuantities;
            Percentage = original.Percentage;
            ItemDescription = original.ItemDescription;
            Threshold = original.Threshold;
            SLADate = original.SLADate;
            DateFormatted = original.DateFormatted;
            Month = original.Month;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? OrderedQuantities;
        public decimal? DeliveredQuantities;
        public decimal? Percentage;
        public string ItemDescription;
        public decimal? Threshold;
        public DateTime? SLADate;
        public string DateFormatted;
        public int? Month;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLADelivery).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.SLADelivery GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.SLADelivery();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLADelivery Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.SLADelivery();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.SLADelivery original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.OrderedQuantities = OrderedQuantities;
            original.DeliveredQuantities = DeliveredQuantities;
            original.Percentage = Percentage;
            original.ItemDescription = ItemDescription;
            original.Threshold = Threshold;
            original.SLADate = SLADate;
            original.DateFormatted = DateFormatted;
            original.Month = Month;
        }
        public static SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLADelivery>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_SLADeliveries_SLADeliveryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.PastOrder))]
    public class SelectedSKUs_Item_PastOrders_PastOrderDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_PastOrders_PastOrderDTO() { }
        public SelectedSKUs_Item_PastOrders_PastOrderDTO(DSS1_RetailerDriverStockOptimisation.BO.PastOrder original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            OrderNumber = original.OrderNumber;
            WrittenDate = original.WrittenDate;
            NotBeforeDate = original.NotBeforeDate;
            QuantityOrdered = original.QuantityOrdered;
            ReceiveDate = original.ReceiveDate;
            QuantityReceived = original.QuantityReceived;
            Caller = original.Caller;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? OrderNumber;
        public DateTime? WrittenDate;
        public DateTime? NotBeforeDate;
        public int? QuantityOrdered;
        public DateTime? ReceiveDate;
        public int? QuantityReceived;
        public string Caller;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.PastOrder).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.PastOrder GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.PastOrder();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.PastOrder Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.PastOrder();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.PastOrder original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.OrderNumber = OrderNumber;
            original.WrittenDate = WrittenDate;
            original.NotBeforeDate = NotBeforeDate;
            original.QuantityOrdered = QuantityOrdered;
            original.ReceiveDate = ReceiveDate;
            original.QuantityReceived = QuantityReceived;
            original.Caller = Caller;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_PastOrders_PastOrderDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.PastOrder>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_PastOrders_PastOrderDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem))]
    public class SelectedSKUs_Item_InventoryItems_InventoryItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>
    {

        [JsonConstructor]
        public SelectedSKUs_Item_InventoryItems_InventoryItemDTO() { }
        public SelectedSKUs_Item_InventoryItems_InventoryItemDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            CoverageDays = original.CoverageDays;
            SafetyStock = original.SafetyStock;
            Status = original.Status;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? CoverageDays;
        public int? SafetyStock;
        public string Status;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryItem GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.InventoryItem();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryItem Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.InventoryItem();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.InventoryItem original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.CoverageDays = CoverageDays;
            original.SafetyStock = SafetyStock;
            original.Status = Status;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKUs_Item_InventoryItems_InventoryItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.InventoryItem>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKUs_Item_InventoryItems_InventoryItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    public class SelectedSKU_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {

        [JsonConstructor]
        public SelectedSKU_ItemDTO() { }
        public SelectedSKU_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.SKU as object;
            InnerPackSize = original.InnerPackSize;
            PalHI = original.PalHI;
            PalletSize = original.PalletSize;
            PalletType = original.PalletType;
            PalTI = original.PalTI;
            SKU = original.SKU;
            SupplierPackSize = original.SupplierPackSize;
            UOM = original.UOM;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public int? InnerPackSize;
        public int? PalHI;
        public int? PalletSize;
        public string PalletType;
        public int? PalTI;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }
        public int? SupplierPackSize;
        public string UOM;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.Item GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Item>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if (original == null) return;
            original.InnerPackSize = InnerPackSize;
            original.PalHI = PalHI;
            original.PalletSize = PalletSize;
            original.PalletType = PalletType;
            original.PalTI = PalTI;
            original.SKU = SKU ?? "";
            original.SupplierPackSize = SupplierPackSize;
            original.UOM = UOM;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SelectedSKU_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SelectedSKU_ItemDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    public class Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Supplier_SupplierDTO() { }
        public Supplier_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Name = original.Name;
            BusinessUnit = original.BusinessUnit == null ? null : new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(original.BusinessUnit);
            Contacts = original.Contacts?.Select(x => new Supplier_Supplier_Contacts_ContactDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO BusinessUnit;
        public List<Supplier_Supplier_Contacts_ContactDTO> Contacts;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.BusinessUnit = BusinessUnit == null
                                    ? null
                                    : BusinessUnit.Convert();
            original.Contacts = Contacts == null
                                ? null
                                : Contacts.Select(q => q.Convert()).ToList();
        }
        public static Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    public class Supplier_Supplier_BusinessUnit_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {

        [JsonConstructor]
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO() { }
        public Supplier_Supplier_BusinessUnit_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Number = original.Number;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public int? Number;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public override List<string> _baseClasses => null;
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Number = Number;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Supplier_Supplier_BusinessUnit_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_BusinessUnit_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact))]
    public class Supplier_Supplier_Contacts_ContactDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Contact>
    {

        [JsonConstructor]
        public Supplier_Supplier_Contacts_ContactDTO() { }
        public Supplier_Supplier_Contacts_ContactDTO(DSS1_RetailerDriverStockOptimisation.BO.Contact original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            Id = original.Id;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public int? Id;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Contact).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS1_RetailerDriverStockOptimisation.BO.Contact GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS1_RetailerDriverStockOptimisation.BO.Contact>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Contact Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS1_RetailerDriverStockOptimisation.BO.Contact();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS1_RetailerDriverStockOptimisation.BO.Contact original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.Id = Id;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Supplier_Supplier_Contacts_ContactDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Contact>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Supplier_Supplier_Contacts_ContactDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Stats))]
    [DataSetDTO]
    public class WasteDataSet_StatsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Stats>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Stats).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string DateFormatted;
        public decimal? Percentage;


        [JsonConstructor]
        public WasteDataSet_StatsDTO() : base() {}
        public  static WasteDataSet_StatsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Stats>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WasteDataSet_StatsDTO(foundEntry);
            }
            return null;
        }
        public WasteDataSet_StatsDTO(DSS1_RetailerDriverStockOptimisation.BO.Stats original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WasteDataSet_StatsDTO(DSS1_RetailerDriverStockOptimisation.BO.Stats original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            DateFormatted = original.DateFormatted;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Stats GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Stats Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Stats();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Stats>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.DateFormatted = DateFormatted;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class PlatformDataSet_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public PlatformDataSet_SLAStatisticsDTO() : base() {}
        public  static PlatformDataSet_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PlatformDataSet_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public PlatformDataSet_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PlatformDataSet_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class SLADelivery_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public SLADelivery_SLAStatisticsDTO() : base() {}
        public  static SLADelivery_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SLADelivery_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public SLADelivery_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SLADelivery_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics))]
    [DataSetDTO]
    public class SLALeadMonthly_SLAStatisticsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Month;
        public decimal? Percentage;


        [JsonConstructor]
        public SLALeadMonthly_SLAStatisticsDTO() : base() {}
        public  static SLALeadMonthly_SLAStatisticsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SLALeadMonthly_SLAStatisticsDTO(foundEntry);
            }
            return null;
        }
        public SLALeadMonthly_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SLALeadMonthly_SLAStatisticsDTO(DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Month = original.Month;
            Percentage = original.Percentage;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Month = Month;
            model.Percentage = Percentage;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI))]
    [DataSetDTO]
    public class UnitsKPIDataSet_UnitsKPIDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SalesForecastDateFormatted;
        public int? Units;


        [JsonConstructor]
        public UnitsKPIDataSet_UnitsKPIDTO() : base() {}
        public  static UnitsKPIDataSet_UnitsKPIDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitsKPIDataSet_UnitsKPIDTO(foundEntry);
            }
            return null;
        }
        public UnitsKPIDataSet_UnitsKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitsKPIDataSet_UnitsKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SalesForecastDateFormatted = original.SalesForecastDateFormatted;
            Units = original.Units;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.SalesForecastDateFormatted = SalesForecastDateFormatted;
            model.Units = Units;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI))]
    [DataSetDTO]
    public class InventoryDaysKPIDataSet_InventoryDaysKPIDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI).FullName;
        public  string _runtimeType;
        public int? InventoryDaysKPIKey;
        public new object _key
        {
            get;
            set;
        }
        public string SalesForecastDateFormatted;
        public decimal? InventoryDays;


        [JsonConstructor]
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO() : base() {}
        public  static InventoryDaysKPIDataSet_InventoryDaysKPIDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var records = new KPIDashboardViewOnlyController().Get_chartStockLevelsInvDays_DatasourceQueryable();
            var foundEntry = records.Where(c => c.InventoryDaysKPIKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new InventoryDaysKPIDataSet_InventoryDaysKPIDTO(foundEntry);
            }
            return null;
        }
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public InventoryDaysKPIDataSet_InventoryDaysKPIDTO(DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.InventoryDaysKPIKey == 0) ? original._GetUniqueIdentifier() as object : original.InventoryDaysKPIKey as object;
            _runtimeType = original?.GetType().FullName;
            InventoryDaysKPIKey = original.InventoryDaysKPIKey;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SalesForecastDateFormatted = original.SalesForecastDateFormatted;
            InventoryDays = original.InventoryDays;
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI GetModelByKey(object _key)
        {
            return null;
        }
        public DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.InventoryDaysKPIKey = InventoryDaysKPIKey ?? 0;
            model.SalesForecastDateFormatted = SalesForecastDateFormatted;
            model.InventoryDays = InventoryDays;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Category))]
    [DataSetDTO]
    public class CategoryDataSet_CategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Category>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Category).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public CategoryDataSet_CategoryDTO() : base() {}
        public  static CategoryDataSet_CategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Category>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CategoryDataSet_CategoryDTO(foundEntry);
            }
            return null;
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CategoryDataSet_CategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.Category original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Category GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Category Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Category();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Category>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class SubCategoryDataSet_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SubCategoryDataSet_SubCategoryDTO() : base() {}
        public  static SubCategoryDataSet_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SubCategoryDataSet_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SubCategoryDataSet_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit))]
    [DataSetDTO]
    public class BusinessUnitDataSet_BusinessUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public BusinessUnitDataSet_BusinessUnitDTO() : base() {}
        public  static BusinessUnitDataSet_BusinessUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessUnitDataSet_BusinessUnitDTO(foundEntry);
            }
            return null;
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessUnitDataSet_BusinessUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast))]
    [DataSetDTO]
    public class OrderForecastsDS_OrderForecastDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OrderForecastsDS_OrderForecastDTO() : base() {}
        public  static OrderForecastsDS_OrderForecastDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderForecastsDS_OrderForecastDTO(foundEntry);
            }
            return null;
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderForecastsDS_OrderForecastDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecast original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecast GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecast Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecast();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecast>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification))]
    [DataSetDTO]
    public class NotificationsDS_NotificationDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Notification>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Notification).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public NotificationsDS_NotificationDTO() : base() {}
        public  static NotificationsDS_NotificationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Notification>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new NotificationsDS_NotificationDTO(foundEntry);
            }
            return null;
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public NotificationsDS_NotificationDTO(DSS1_RetailerDriverStockOptimisation.BO.Notification original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Notification GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Notification Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Notification();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Notification>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails))]
    [DataSetDTO]
    public class SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails).FullName;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO() : base() {}
        public  static SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(foundEntry);
            }
            return null;
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SelectedOrderForecastDetailsDS_OrderForecastDetailsDTO(DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory))]
    [DataSetDTO]
    public class AllSubcategoriesDS_SubCategoryDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.SubCategory).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public AllSubcategoriesDS_SubCategoryDTO() : base() {}
        public  static AllSubcategoriesDS_SubCategoryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllSubcategoriesDS_SubCategoryDTO(foundEntry);
            }
            return null;
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllSubcategoriesDS_SubCategoryDTO(DSS1_RetailerDriverStockOptimisation.BO.SubCategory original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.SubCategory GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.SubCategory Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.SubCategory();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.SubCategory>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ItemsDS_ItemDTO() : base() {}
        public  static ItemsDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Item))]
    [DataSetDTO]
    public class ItemsVMDS_ItemDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Item>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Item).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string SKU;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ItemsVMDS_ItemDTO() : base() {}
        public  static ItemsVMDS_ItemDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Item>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ItemsVMDS_ItemDTO(foundEntry);
            }
            return null;
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, SKU);
        }
        public ItemsVMDS_ItemDTO(DSS1_RetailerDriverStockOptimisation.BO.Item original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.SKU == "") ? original._GetUniqueIdentifier() as object : original.SKU as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            SKU = original.SKU;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Item GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Item Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Item();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Item>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.SKU = SKU ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit))]
    [DataSetDTO]
    public class AllBaseUnitsDS_BaseUnitDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public AllBaseUnitsDS_BaseUnitDTO() : base() {}
        public  static AllBaseUnitsDS_BaseUnitDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AllBaseUnitsDS_BaseUnitDTO(foundEntry);
            }
            return null;
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AllBaseUnitsDS_BaseUnitDTO(DSS1_RetailerDriverStockOptimisation.BO.BaseUnit original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.BaseUnit GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.BaseUnit Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.BaseUnit();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.BaseUnit>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class SuppliersDS_SupplierDTO : SuppliersDS_CompanyDTO, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SuppliersDS_SupplierDTO() : base() {}
        public new static SuppliersDS_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_SupplierDTO(DSS1_RetailerDriverStockOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DSS1_RetailerDriverStockOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS1_RetailerDriverStockOptimisation.BO.Supplier Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Company))]
    [DataSetDTO]
    public class SuppliersDS_CompanyDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Company>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Company).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SuppliersDS_CompanyDTO() : base() {}
        public  static SuppliersDS_CompanyDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Company>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SuppliersDS_CompanyDTO(foundEntry);
            }
            return null;
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SuppliersDS_CompanyDTO(DSS1_RetailerDriverStockOptimisation.BO.Company original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Company GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Company Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Company();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Company>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse))]
    [DataSetDTO]
    public class WarehousesDS_WarehouseDTO : ViewModelDTOBase, IViewModelDTO<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>
    {
        public override string _originalTypeClassName => typeof(DSS1_RetailerDriverStockOptimisation.BO.Warehouse).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public WarehousesDS_WarehouseDTO() : base() {}
        public  static WarehousesDS_WarehouseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KPIDashboardViewOnlyController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new WarehousesDS_WarehouseDTO(foundEntry);
            }
            return null;
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public WarehousesDS_WarehouseDTO(DSS1_RetailerDriverStockOptimisation.BO.Warehouse original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DSS1_RetailerDriverStockOptimisation.BO.Warehouse GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false);
        }
        public DSS1_RetailerDriverStockOptimisation.BO.Warehouse Convert()
        {
            var model = new DSS1_RetailerDriverStockOptimisation.BO.Warehouse();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS1_RetailerDriverStockOptimisation.BO.Warehouse>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
