var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var BO;
    (function (BO) {
        var Domain_LocalResourcesDefinition = /** @class */ (function () {
            function Domain_LocalResourcesDefinition() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Domain_LocalResourcesDefinition";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
            }
            return Domain_LocalResourcesDefinition;
        }());
        BO.Domain_LocalResourcesDefinition = Domain_LocalResourcesDefinition;
        var Agreement = /** @class */ (function () {
            function Agreement() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Agreement";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.AgreementStatuses = [];
                this.Items = [];
                this.Warehouses = [];
                this.StockOnHands = [];
                this.TransportUnCaps = [];
                this['_key'] = this.Id = 0;
            }
            Agreement.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Agreement.setAgreementStatuses = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.AgreementStatuses == null)
                    $this.AgreementStatuses = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.AgreementStatuses.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeAgreementStatuses($this, $this.AgreementStatuses[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyAgreementStatuses($this, copyItems);
            };
            Agreement.addManyAgreementStatuses = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addAgreementStatuses($this, items[i]);
                }
            };
            Agreement.addAgreementStatuses = function ($this, item) {
                if ($this.AgreementStatuses == null)
                    $this.AgreementStatuses = [];
                if (item == null || $this.AgreementStatuses.indexOf(item) > -1)
                    return;
                $this.AgreementStatuses.push(item);
            };
            Agreement.addRangeAgreementStatuses = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Agreement.addAgreementStatuses($this, item); });
            };
            Agreement.removeAgreementStatuses = function ($this, item) {
                if ($this == null || $this.AgreementStatuses == null || $this.AgreementStatuses.indexOf(item) === -1)
                    return;
                var _index = $this.AgreementStatuses.indexOf(item);
                $this.AgreementStatuses.splice(_index, 1);
            };
            Agreement.clearAgreementStatuses = function ($this) {
                $this.AgreementStatuses = null;
            };
            Agreement.setItems = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Items == null)
                    $this.Items = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Items.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeItems($this, $this.Items[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyItems($this, copyItems);
            };
            Agreement.addManyItems = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addItems($this, items[i]);
                }
            };
            Agreement.addItems = function ($this, item) {
                if ($this.Items == null)
                    $this.Items = [];
                if (item == null || $this.Items.indexOf(item) > -1)
                    return;
                $this.Items.push(item);
                Item.addAgreements(item, $this);
            };
            Agreement.addRangeItems = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Agreement.addItems($this, item); });
            };
            Agreement.removeItems = function ($this, item) {
                if ($this == null || $this.Items == null || $this.Items.indexOf(item) === -1)
                    return;
                var _index = $this.Items.indexOf(item);
                $this.Items.splice(_index, 1);
                Item.removeAgreements(item, $this);
            };
            Agreement.clearItems = function ($this) {
                $this.Items = null;
            };
            Agreement.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            Agreement.setWarehouses = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Warehouses == null)
                    $this.Warehouses = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Warehouses.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeWarehouses($this, $this.Warehouses[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyWarehouses($this, copyItems);
            };
            Agreement.addManyWarehouses = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addWarehouses($this, items[i]);
                }
            };
            Agreement.addWarehouses = function ($this, item) {
                if ($this.Warehouses == null)
                    $this.Warehouses = [];
                if (item == null || $this.Warehouses.indexOf(item) > -1)
                    return;
                $this.Warehouses.push(item);
            };
            Agreement.addRangeWarehouses = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Agreement.addWarehouses($this, item); });
            };
            Agreement.removeWarehouses = function ($this, item) {
                if ($this == null || $this.Warehouses == null || $this.Warehouses.indexOf(item) === -1)
                    return;
                var _index = $this.Warehouses.indexOf(item);
                $this.Warehouses.splice(_index, 1);
            };
            Agreement.clearWarehouses = function ($this) {
                $this.Warehouses = null;
            };
            Agreement.setStockOnHands = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.StockOnHands == null)
                    $this.StockOnHands = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.StockOnHands.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeStockOnHands($this, $this.StockOnHands[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyStockOnHands($this, copyItems);
            };
            Agreement.addManyStockOnHands = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands($this, items[i]);
                }
            };
            Agreement.addStockOnHands = function ($this, item) {
                if ($this.StockOnHands == null)
                    $this.StockOnHands = [];
                if (item == null || $this.StockOnHands.indexOf(item) > -1)
                    return;
                $this.StockOnHands.push(item);
                if (item.Agreement != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.StockOnHand.setAgreement(item, $this);
                }
            };
            Agreement.addRangeStockOnHands = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands($this, item); });
            };
            Agreement.removeStockOnHands = function ($this, item) {
                if ($this == null || $this.StockOnHands == null || $this.StockOnHands.indexOf(item) === -1)
                    return;
                var _index = $this.StockOnHands.indexOf(item);
                $this.StockOnHands.splice(_index, 1);
                item.Agreement = null;
            };
            Agreement.clearStockOnHands = function ($this) {
                $this.StockOnHands = null;
            };
            Agreement.setTransportUnCaps = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.TransportUnCaps == null)
                    $this.TransportUnCaps = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.TransportUnCaps.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeTransportUnCaps($this, $this.TransportUnCaps[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyTransportUnCaps($this, copyItems);
            };
            Agreement.addManyTransportUnCaps = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addTransportUnCaps($this, items[i]);
                }
            };
            Agreement.addTransportUnCaps = function ($this, item) {
                if ($this.TransportUnCaps == null)
                    $this.TransportUnCaps = [];
                if (item == null || $this.TransportUnCaps.indexOf(item) > -1)
                    return;
                $this.TransportUnCaps.push(item);
            };
            Agreement.addRangeTransportUnCaps = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Agreement.addTransportUnCaps($this, item); });
            };
            Agreement.removeTransportUnCaps = function ($this, item) {
                if ($this == null || $this.TransportUnCaps == null || $this.TransportUnCaps.indexOf(item) === -1)
                    return;
                var _index = $this.TransportUnCaps.indexOf(item);
                $this.TransportUnCaps.splice(_index, 1);
            };
            Agreement.clearTransportUnCaps = function ($this) {
                $this.TransportUnCaps = null;
            };
            return Agreement;
        }());
        BO.Agreement = Agreement;
        var AgreementStatus = /** @class */ (function () {
            function AgreementStatus() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AgreementStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AgreementStatus;
        }());
        BO.AgreementStatus = AgreementStatus;
        var Response = /** @class */ (function () {
            function Response() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Response";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Response.GenerateResponse = function (status, message, details, code) {
                var newResponse = Joove.Common.nullSafe(function () { return new DSS1_RetailerDriverStockOptimisation.BO.Response(); }, null);
                newResponse.Status = status;
                newResponse.Message = message;
                newResponse.Details = details;
                newResponse.Code = code;
                return newResponse;
            };
            Response.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Response;
        }());
        BO.Response = Response;
        var AppNotification = /** @class */ (function () {
            function AppNotification() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AppNotification";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.AppNotificationActions = [];
                this['_key'] = this.Id = 0;
            }
            AppNotification.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            AppNotification.setAppNotificationActions = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.AppNotificationActions == null)
                    $this.AppNotificationActions = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.AppNotificationActions.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.AppNotification.removeAppNotificationActions($this, $this.AppNotificationActions[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addManyAppNotificationActions($this, copyItems);
            };
            AppNotification.addManyAppNotificationActions = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addAppNotificationActions($this, items[i]);
                }
            };
            AppNotification.addAppNotificationActions = function ($this, item) {
                if ($this.AppNotificationActions == null)
                    $this.AppNotificationActions = [];
                if (item == null || $this.AppNotificationActions.indexOf(item) > -1)
                    return;
                $this.AppNotificationActions.push(item);
            };
            AppNotification.addRangeAppNotificationActions = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addAppNotificationActions($this, item); });
            };
            AppNotification.removeAppNotificationActions = function ($this, item) {
                if ($this == null || $this.AppNotificationActions == null || $this.AppNotificationActions.indexOf(item) === -1)
                    return;
                var _index = $this.AppNotificationActions.indexOf(item);
                $this.AppNotificationActions.splice(_index, 1);
            };
            AppNotification.clearAppNotificationActions = function ($this) {
                $this.AppNotificationActions = null;
            };
            AppNotification.setRecipient = function ($this, value) {
                var oldValue = $this.Recipient;
                $this.Recipient = value;
                if (value != null) {
                }
            };
            return AppNotification;
        }());
        BO.AppNotification = AppNotification;
        var AppNotificationAction = /** @class */ (function () {
            function AppNotificationAction() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AppNotificationAction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AppNotificationAction;
        }());
        BO.AppNotificationAction = AppNotificationAction;
        var Company = /** @class */ (function () {
            function Company() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Company";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Contacts = [];
                this['_key'] = this.Id = 0;
            }
            Company.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Company.setContacts = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Contacts == null)
                    $this.Contacts = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Contacts.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Company.removeContacts($this, $this.Contacts[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Company.addManyContacts($this, copyItems);
            };
            Company.addManyContacts = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts($this, items[i]);
                }
            };
            Company.addContacts = function ($this, item) {
                if ($this.Contacts == null)
                    $this.Contacts = [];
                if (item == null || $this.Contacts.indexOf(item) > -1)
                    return;
                $this.Contacts.push(item);
                if (item.Company != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.Contact.setCompany(item, $this);
                }
            };
            Company.addRangeContacts = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts($this, item); });
            };
            Company.removeContacts = function ($this, item) {
                if ($this == null || $this.Contacts == null || $this.Contacts.indexOf(item) === -1)
                    return;
                var _index = $this.Contacts.indexOf(item);
                $this.Contacts.splice(_index, 1);
                item.Company = null;
            };
            Company.clearContacts = function ($this) {
                $this.Contacts = null;
            };
            return Company;
        }());
        BO.Company = Company;
        var Dashboard = /** @class */ (function () {
            function Dashboard() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Dashboard";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Statistics = [];
                this['_key'] = this.Id = 0;
            }
            Dashboard.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Dashboard.setStatistics = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Statistics == null)
                    $this.Statistics = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Statistics.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Dashboard.removeStatistics($this, $this.Statistics[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addManyStatistics($this, copyItems);
            };
            Dashboard.addManyStatistics = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addStatistics($this, items[i]);
                }
            };
            Dashboard.addStatistics = function ($this, item) {
                if ($this.Statistics == null)
                    $this.Statistics = [];
                if (item == null || $this.Statistics.indexOf(item) > -1)
                    return;
                $this.Statistics.push(item);
            };
            Dashboard.addRangeStatistics = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addStatistics($this, item); });
            };
            Dashboard.removeStatistics = function ($this, item) {
                if ($this == null || $this.Statistics == null || $this.Statistics.indexOf(item) === -1)
                    return;
                var _index = $this.Statistics.indexOf(item);
                $this.Statistics.splice(_index, 1);
            };
            Dashboard.clearStatistics = function ($this) {
                $this.Statistics = null;
            };
            return Dashboard;
        }());
        BO.Dashboard = Dashboard;
        var Statistics = /** @class */ (function () {
            function Statistics() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Statistics";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Statistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Statistics.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            Statistics.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            Statistics.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            return Statistics;
        }());
        BO.Statistics = Statistics;
        var MakeRequest = /** @class */ (function () {
            function MakeRequest() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.MakeRequest";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.MakeRequestKey = 0;
            }
            MakeRequest.Analytics = function (q, fromDate, toDate) {
                var analyticsObject = new Object();
                analyticsObject.query = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate); }, null);
                var interval = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetInterval(fromDate); }, "");
                analyticsObject.aggs = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetAggregations(interval); }, null);
                var meta = new Object();
                meta.excludes = ["message"];
                analyticsObject.source = meta;
                return analyticsObject;
            };
            MakeRequest.GetAggregations = function (interval) {
                var aggs = new Object();
                var top_service = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("Service.keyword", 5, true); }, null);
                var top_operation = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("Operation.keyword", 5, true); }, null);
                var from_ip = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("IP.keyword", 5, true); }, null);
                var verb_type = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("RequestMethod.keyword", 5, true); }, null);
                var status = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("StatusCode", 5, true); }, null);
                var elapsed_msecs = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                var req_over_time = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetHistogramQuery("Timestamp", interval); }, null);
                var req_latency = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetBucketHistogramQuery("ElapsedMsecs", 2000); }, null);
                aggs.TopService = top_service;
                aggs.TopOperation = top_operation;
                aggs.FromIP = from_ip;
                aggs.VerbType = verb_type;
                aggs.Status = status;
                aggs.ElapsedMsecs = elapsed_msecs;
                aggs.RequestOverTime = req_over_time;
                aggs.RequestLatency = req_latency;
                aggs.Errors = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                return aggs;
            };
            MakeRequest.GetBucketHistogramQuery = function (field, interval) {
                var q = new Object();
                var hist = new Object();
                q.Histogram = hist;
                hist.Field = field;
                hist.Interval = interval;
                return q;
            };
            MakeRequest.GetDateFormat = function (interval) {
                if ((interval == "month")) {
                    return "yyyy-MM";
                }
                else if ((interval == "day")) {
                    return "yyyy-MM-dd";
                }
                else if ((interval == "6h")) {
                    return "yyyy-MM-dd HH:mm";
                }
                else if ((interval == "h")) {
                    return "yyyy-MM-dd HH:mm";
                }
                else {
                    return "yyyy-MM-dd HH:mm";
                }
            };
            MakeRequest.GetErrorFilter = function () {
                var errorFilter = new Object();
                var filterRoot = new Object();
                var filter = new Object();
                var failureRoot = new Object();
                var successRoot = new Object();
                var failure = new Object();
                var success = new Object();
                var timestampFailure = new Object();
                timestampFailure.gte = "400";
                failure.StatusCode = timestampFailure;
                failureRoot.Range = failure;
                filter.Failure = failureRoot;
                var timestampSuccess = new Object();
                timestampSuccess.lt = "400";
                success.StatusCode = timestampSuccess;
                successRoot.Range = success;
                filter.Success = successRoot;
                filterRoot.Filters = filter;
                errorFilter.Filters = filterRoot;
                return errorFilter;
            };
            MakeRequest.GetFilterByTimePeriod = function (fromDate, toDate) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(fromDate); }, false))) {
                    fromDate = "now-1w";
                }
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(toDate); }, false))) {
                    toDate = "now";
                }
                var timeRange = new Object();
                var timestamp = new Object();
                timestamp.gte = fromDate;
                timestamp.lte = toDate;
                timeRange.timestamp = timestamp;
                return timeRange;
            };
            MakeRequest.GetHistogramQuery = function (field, interval) {
                var q = new Object();
                var hist = new Object();
                q.DateHistogram = hist;
                hist.Field = field;
                hist.Interval = interval;
                hist.Format = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetDateFormat(interval); }, "");
                hist.Offset = "+0h";
                var stats = new Object();
                stats.statistics = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                stats.errors = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                q.Aggregator = stats;
                return q;
            };
            MakeRequest.GetInterval = function (fromDate) {
                if ((fromDate == "now-1y")) {
                    return "month";
                }
                else if ((fromDate == "now-1M")) {
                    return "day";
                }
                else if ((fromDate == "now-1w")) {
                    return "6h";
                }
                else if ((fromDate == "now-1d")) {
                    return "hour";
                }
                else {
                    return "day";
                }
            };
            MakeRequest.GetQuery = function (q, fromDate, toDate) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(fromDate); }, false))) {
                    fromDate = "now-1w";
                }
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(toDate); }, false))) {
                    toDate = "now";
                }
                var queryObject = new Object();
                var logic = new Object();
                logic.must = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQueryStringQuery(q); }, null);
                var filter = new Object();
                filter.range = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetFilterByTimePeriod(fromDate, toDate); }, null);
                logic.filter = filter;
                queryObject.logic = logic;
                return queryObject;
            };
            MakeRequest.GetQueryStringQuery = function (q) {
                var must = new Object();
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(q); }, false))) {
                    var serializer_1 = new CLMS.Framework.Utilities.Serializer();
                    must.match_all = Joove.Common.nullSafe(function () { return serializer_1.FromJson("{\"must\": {\"match_all\": {}}"); }, null);
                }
                else {
                    var queryString = new Object();
                    queryString.AnalyzeWildcard = true;
                    queryString.Query = q;
                    must.QueryString = queryString;
                }
                return must;
            };
            MakeRequest.GetStatQuery = function (field) {
                var q = new Object();
                var stats = new Object();
                q.stats = stats;
                stats.field = field;
                return q;
            };
            MakeRequest.GetTermQuery = function (field, size, aggsEnable) {
                var q = new Object();
                var term = new Object();
                q.terms = term;
                term.field = field;
                if ((aggsEnable)) {
                    var aggs = new Object();
                    q.Aggs = aggs;
                    q.Aggs.ResposeStatus = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(); }, null);
                    q.Aggs.ResponseTime = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"); }, null);
                }
                if ((CLMS.Framework.Number.GreaterThan(function () { return size; }, function () { return 0; }))) {
                    term.size = size;
                }
                return q;
            };
            MakeRequest.Query = function (q, fromDate, toDate) {
                var searchObject = new Object();
                var sorts = [];
                Joove.Common.nullSafe(function () { return sorts.add(Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.SortByTimestamp("desc"); }, null)); }, null);
                searchObject.sort = sorts;
                searchObject.query = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate); }, null);
                var meta = new Object();
                meta.excludes = ["message"];
                searchObject.source = meta;
                return searchObject;
            };
            MakeRequest.SortByTimestamp = function (direction) {
                if ((Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(direction); }, false))) {
                    direction = "desc";
                }
                var sortObject = new Object();
                var orderObject = new Object();
                orderObject.order = direction;
                sortObject.Timestamp = orderObject;
                return sortObject;
            };
            MakeRequest.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.MakeRequestKey == null || $this.MakeRequestKey == 0;
            };
            return MakeRequest;
        }());
        BO.MakeRequest = MakeRequest;
        var RequestLog = /** @class */ (function () {
            function RequestLog() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.RequestLog";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.RequestLogKey = 0;
            }
            RequestLog.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.RequestLogKey == null || $this.RequestLogKey == 0;
            };
            return RequestLog;
        }());
        BO.RequestLog = RequestLog;
        var Buckets = /** @class */ (function () {
            function Buckets() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Buckets";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.key = "";
            }
            Buckets.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.key == null || $this.key == "";
            };
            return Buckets;
        }());
        BO.Buckets = Buckets;
        var Convertor = /** @class */ (function () {
            function Convertor() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Convertor";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.ConvertorKey = 0;
            }
            Convertor.ErrorRateToBucket = function (error) {
                var fail = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
                fail.key = "Failure";
                fail.doc_count = Joove.Common.nullSafe(function () { return error.Buckets.Failure.doc_count; }, 0);
                var success = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();
                success.key = "Success";
                success.doc_count = Joove.Common.nullSafe(function () { return error.Buckets.Success.doc_count; }, 0);
                var buckets = [];
                Joove.Common.nullSafe(function () { return buckets.add(fail); }, null);
                Joove.Common.nullSafe(function () { return buckets.add(success); }, null);
                return buckets;
            };
            Convertor.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ConvertorKey == null || $this.ConvertorKey == 0;
            };
            return Convertor;
        }());
        BO.Convertor = Convertor;
        var HIstogramBucket = /** @class */ (function () {
            function HIstogramBucket() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.key = 0;
            }
            HIstogramBucket.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.key == null || $this.key == 0;
            };
            return HIstogramBucket;
        }());
        BO.HIstogramBucket = HIstogramBucket;
        var Error = /** @class */ (function () {
            function Error() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Error";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.ErrorKey = 0;
            }
            Error.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.ErrorKey == null || $this.ErrorKey == 0;
            };
            return Error;
        }());
        BO.Error = Error;
        var QueryBuilder = /** @class */ (function () {
            function QueryBuilder() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.QueryBuilder";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.QueryBuilderKey = 0;
            }
            QueryBuilder.GetClientToken = function (username) {
                var q = "+ClientId";
                return q;
            };
            QueryBuilder.GetQuery = function (username, product, service) {
                var clientKeys = Joove.Common.nullSafe(function () { return DSS1_RetailerDriverStockOptimisation.BO.QueryBuilder.GetClientToken(username); }, "");
                var q = "+tags:exposed " + clientKeys;
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
                    return product.trim();
                }, "")); }, false)))) {
                    q = q + " +Product:" + product;
                }
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
                    return service.trim();
                }, "")); }, false)))) {
                    q = q + " +Service:" + service;
                }
                return q;
            };
            QueryBuilder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.QueryBuilderKey == null || $this.QueryBuilderKey == 0;
            };
            return QueryBuilder;
        }());
        BO.QueryBuilder = QueryBuilder;
        var DeliverySchedule = /** @class */ (function () {
            function DeliverySchedule() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            DeliverySchedule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            DeliverySchedule.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            DeliverySchedule.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeDeliverySchedules(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules(value, $this);
                }
            };
            DeliverySchedule.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return DeliverySchedule;
        }());
        BO.DeliverySchedule = DeliverySchedule;
        var Category = /** @class */ (function () {
            function Category() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Category";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.SubCategory = [];
                this['_key'] = this.Id = 0;
            }
            Category.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Category.setSubCategory = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SubCategory == null)
                    $this.SubCategory = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SubCategory.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Category.removeSubCategory($this, $this.SubCategory[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Category.addManySubCategory($this, copyItems);
            };
            Category.addManySubCategory = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory($this, items[i]);
                }
            };
            Category.addSubCategory = function ($this, item) {
                if ($this.SubCategory == null)
                    $this.SubCategory = [];
                if (item == null || $this.SubCategory.indexOf(item) > -1)
                    return;
                $this.SubCategory.push(item);
                if (item.Category != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SubCategory.setCategory(item, $this);
                }
            };
            Category.addRangeSubCategory = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory($this, item); });
            };
            Category.removeSubCategory = function ($this, item) {
                if ($this == null || $this.SubCategory == null || $this.SubCategory.indexOf(item) === -1)
                    return;
                var _index = $this.SubCategory.indexOf(item);
                $this.SubCategory.splice(_index, 1);
                item.Category = null;
            };
            Category.clearSubCategory = function ($this) {
                $this.SubCategory = null;
            };
            Category.setBusinessUnit = function ($this, value) {
                var oldValue = $this.BusinessUnit;
                $this.BusinessUnit = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.removeCategories(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories(value, $this);
                }
            };
            return Category;
        }());
        BO.Category = Category;
        var SubCategory = /** @class */ (function () {
            function SubCategory() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SubCategory";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.BaseUnits = [];
                this['_key'] = this.Id = 0;
            }
            SubCategory.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SubCategory.setCategory = function ($this, value) {
                var oldValue = $this.Category;
                $this.Category = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Category.removeSubCategory(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory(value, $this);
                }
            };
            SubCategory.setBaseUnits = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.BaseUnits == null)
                    $this.BaseUnits = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.BaseUnits.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.SubCategory.removeBaseUnits($this, $this.BaseUnits[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addManyBaseUnits($this, copyItems);
            };
            SubCategory.addManyBaseUnits = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits($this, items[i]);
                }
            };
            SubCategory.addBaseUnits = function ($this, item) {
                if ($this.BaseUnits == null)
                    $this.BaseUnits = [];
                if (item == null || $this.BaseUnits.indexOf(item) > -1)
                    return;
                $this.BaseUnits.push(item);
                if (item.SubCategory != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.BaseUnit.setSubCategory(item, $this);
                }
            };
            SubCategory.addRangeBaseUnits = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits($this, item); });
            };
            SubCategory.removeBaseUnits = function ($this, item) {
                if ($this == null || $this.BaseUnits == null || $this.BaseUnits.indexOf(item) === -1)
                    return;
                var _index = $this.BaseUnits.indexOf(item);
                $this.BaseUnits.splice(_index, 1);
                item.SubCategory = null;
            };
            SubCategory.clearBaseUnits = function ($this) {
                $this.BaseUnits = null;
            };
            return SubCategory;
        }());
        BO.SubCategory = SubCategory;
        var BusinessUnit = /** @class */ (function () {
            function BusinessUnit() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Categories = [];
                this['_key'] = this.Id = 0;
            }
            BusinessUnit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            BusinessUnit.setCategories = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Categories == null)
                    $this.Categories = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Categories.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.removeCategories($this, $this.Categories[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addManyCategories($this, copyItems);
            };
            BusinessUnit.addManyCategories = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories($this, items[i]);
                }
            };
            BusinessUnit.addCategories = function ($this, item) {
                if ($this.Categories == null)
                    $this.Categories = [];
                if (item == null || $this.Categories.indexOf(item) > -1)
                    return;
                $this.Categories.push(item);
                if (item.BusinessUnit != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.Category.setBusinessUnit(item, $this);
                }
            };
            BusinessUnit.addRangeCategories = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories($this, item); });
            };
            BusinessUnit.removeCategories = function ($this, item) {
                if ($this == null || $this.Categories == null || $this.Categories.indexOf(item) === -1)
                    return;
                var _index = $this.Categories.indexOf(item);
                $this.Categories.splice(_index, 1);
                item.BusinessUnit = null;
            };
            BusinessUnit.clearCategories = function ($this) {
                $this.Categories = null;
            };
            BusinessUnit.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                    if (oldValue != null && oldValue.BusinessUnit != null) {
                        oldValue.BusinessUnit = null;
                    }
                    if ($this.Supplier.BusinessUnit !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.Supplier.setBusinessUnit(value, $this);
                    }
                }
            };
            return BusinessUnit;
        }());
        BO.BusinessUnit = BusinessUnit;
        var BaseUnit = /** @class */ (function () {
            function BaseUnit() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.BaseUnit";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            BaseUnit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            BaseUnit.setSubCategory = function ($this, value) {
                var oldValue = $this.SubCategory;
                $this.SubCategory = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.SubCategory.removeBaseUnits(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits(value, $this);
                }
            };
            return BaseUnit;
        }());
        BO.BaseUnit = BaseUnit;
        var InventoryItem = /** @class */ (function () {
            function InventoryItem() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.InventoryItem";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            InventoryItem.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            InventoryItem.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeInventoryItems(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems(value, $this);
                }
            };
            InventoryItem.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return InventoryItem;
        }());
        BO.InventoryItem = InventoryItem;
        var Item = /** @class */ (function () {
            function Item() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Item";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Agreements = [];
                this.DeliverySchedules = [];
                this.InventoryItems = [];
                this.SupplierCapacities = [];
                this.Notifications = [];
                this.PastOrders = [];
                this.ItemsForecast = [];
                this.SLALeadTimes = [];
                this.SLADeliveries = [];
                this.StocksOnHand = [];
                this.CoverageDays = 1;
                this['_key'] = this.SKU = "";
            }
            Item.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.SKU == null || $this.SKU == "";
            };
            Item.setAgreements = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Agreements == null)
                    $this.Agreements = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Agreements.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeAgreements($this, $this.Agreements[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyAgreements($this, copyItems);
            };
            Item.addManyAgreements = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addAgreements($this, items[i]);
                }
            };
            Item.addAgreements = function ($this, item) {
                if ($this.Agreements == null)
                    $this.Agreements = [];
                if (item == null || $this.Agreements.indexOf(item) > -1)
                    return;
                $this.Agreements.push(item);
                Agreement.addItems(item, $this);
            };
            Item.addRangeAgreements = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addAgreements($this, item); });
            };
            Item.removeAgreements = function ($this, item) {
                if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1)
                    return;
                var _index = $this.Agreements.indexOf(item);
                $this.Agreements.splice(_index, 1);
                Agreement.removeItems(item, $this);
            };
            Item.clearAgreements = function ($this) {
                $this.Agreements = null;
            };
            Item.setDeliverySchedules = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.DeliverySchedules == null)
                    $this.DeliverySchedules = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.DeliverySchedules.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeDeliverySchedules($this, $this.DeliverySchedules[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyDeliverySchedules($this, copyItems);
            };
            Item.addManyDeliverySchedules = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules($this, items[i]);
                }
            };
            Item.addDeliverySchedules = function ($this, item) {
                if ($this.DeliverySchedules == null)
                    $this.DeliverySchedules = [];
                if (item == null || $this.DeliverySchedules.indexOf(item) > -1)
                    return;
                $this.DeliverySchedules.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule.setItem(item, $this);
                }
            };
            Item.addRangeDeliverySchedules = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules($this, item); });
            };
            Item.removeDeliverySchedules = function ($this, item) {
                if ($this == null || $this.DeliverySchedules == null || $this.DeliverySchedules.indexOf(item) === -1)
                    return;
                var _index = $this.DeliverySchedules.indexOf(item);
                $this.DeliverySchedules.splice(_index, 1);
                item.Item = null;
            };
            Item.clearDeliverySchedules = function ($this) {
                $this.DeliverySchedules = null;
            };
            Item.setInventoryItems = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.InventoryItems == null)
                    $this.InventoryItems = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.InventoryItems.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeInventoryItems($this, $this.InventoryItems[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyInventoryItems($this, copyItems);
            };
            Item.addManyInventoryItems = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems($this, items[i]);
                }
            };
            Item.addInventoryItems = function ($this, item) {
                if ($this.InventoryItems == null)
                    $this.InventoryItems = [];
                if (item == null || $this.InventoryItems.indexOf(item) > -1)
                    return;
                $this.InventoryItems.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.InventoryItem.setItem(item, $this);
                }
            };
            Item.addRangeInventoryItems = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems($this, item); });
            };
            Item.removeInventoryItems = function ($this, item) {
                if ($this == null || $this.InventoryItems == null || $this.InventoryItems.indexOf(item) === -1)
                    return;
                var _index = $this.InventoryItems.indexOf(item);
                $this.InventoryItems.splice(_index, 1);
                item.Item = null;
            };
            Item.clearInventoryItems = function ($this) {
                $this.InventoryItems = null;
            };
            Item.setSupplierCapacities = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SupplierCapacities == null)
                    $this.SupplierCapacities = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SupplierCapacities.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeSupplierCapacities($this, $this.SupplierCapacities[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManySupplierCapacities($this, copyItems);
            };
            Item.addManySupplierCapacities = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities($this, items[i]);
                }
            };
            Item.addSupplierCapacities = function ($this, item) {
                if ($this.SupplierCapacities == null)
                    $this.SupplierCapacities = [];
                if (item == null || $this.SupplierCapacities.indexOf(item) > -1)
                    return;
                $this.SupplierCapacities.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity.setItem(item, $this);
                }
            };
            Item.addRangeSupplierCapacities = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities($this, item); });
            };
            Item.removeSupplierCapacities = function ($this, item) {
                if ($this == null || $this.SupplierCapacities == null || $this.SupplierCapacities.indexOf(item) === -1)
                    return;
                var _index = $this.SupplierCapacities.indexOf(item);
                $this.SupplierCapacities.splice(_index, 1);
                item.Item = null;
            };
            Item.clearSupplierCapacities = function ($this) {
                $this.SupplierCapacities = null;
            };
            Item.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            Item.setBusinessUnit = function ($this, value) {
                var oldValue = $this.BusinessUnit;
                $this.BusinessUnit = value;
                if (value != null) {
                }
            };
            Item.setCategory = function ($this, value) {
                var oldValue = $this.Category;
                $this.Category = value;
                if (value != null) {
                }
            };
            Item.setSubCategory = function ($this, value) {
                var oldValue = $this.SubCategory;
                $this.SubCategory = value;
                if (value != null) {
                }
            };
            Item.setBaseUnit = function ($this, value) {
                var oldValue = $this.BaseUnit;
                $this.BaseUnit = value;
                if (value != null) {
                }
            };
            Item.setMinimumQuantity = function ($this, value) {
                var oldValue = $this.MinimumQuantity;
                $this.MinimumQuantity = value;
                if (value != null) {
                    if (oldValue != null && oldValue.Item != null) {
                        oldValue.Item = null;
                    }
                    if ($this.MinimumQuantity.Item !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity.setItem(value, $this);
                    }
                }
            };
            Item.setNotifications = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Notifications == null)
                    $this.Notifications = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Notifications.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeNotifications($this, $this.Notifications[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyNotifications($this, copyItems);
            };
            Item.addManyNotifications = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications($this, items[i]);
                }
            };
            Item.addNotifications = function ($this, item) {
                if ($this.Notifications == null)
                    $this.Notifications = [];
                if (item == null || $this.Notifications.indexOf(item) > -1)
                    return;
                $this.Notifications.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.Notification.setItem(item, $this);
                }
            };
            Item.addRangeNotifications = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications($this, item); });
            };
            Item.removeNotifications = function ($this, item) {
                if ($this == null || $this.Notifications == null || $this.Notifications.indexOf(item) === -1)
                    return;
                var _index = $this.Notifications.indexOf(item);
                $this.Notifications.splice(_index, 1);
                item.Item = null;
            };
            Item.clearNotifications = function ($this) {
                $this.Notifications = null;
            };
            Item.setPastOrders = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.PastOrders == null)
                    $this.PastOrders = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.PastOrders.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removePastOrders($this, $this.PastOrders[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyPastOrders($this, copyItems);
            };
            Item.addManyPastOrders = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders($this, items[i]);
                }
            };
            Item.addPastOrders = function ($this, item) {
                if ($this.PastOrders == null)
                    $this.PastOrders = [];
                if (item == null || $this.PastOrders.indexOf(item) > -1)
                    return;
                $this.PastOrders.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.PastOrder.setItem(item, $this);
                }
            };
            Item.addRangePastOrders = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders($this, item); });
            };
            Item.removePastOrders = function ($this, item) {
                if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1)
                    return;
                var _index = $this.PastOrders.indexOf(item);
                $this.PastOrders.splice(_index, 1);
                item.Item = null;
            };
            Item.clearPastOrders = function ($this) {
                $this.PastOrders = null;
            };
            Item.setItemsForecast = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.ItemsForecast == null)
                    $this.ItemsForecast = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.ItemsForecast.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeItemsForecast($this, $this.ItemsForecast[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyItemsForecast($this, copyItems);
            };
            Item.addManyItemsForecast = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast($this, items[i]);
                }
            };
            Item.addItemsForecast = function ($this, item) {
                if ($this.ItemsForecast == null)
                    $this.ItemsForecast = [];
                if (item == null || $this.ItemsForecast.indexOf(item) > -1)
                    return;
                $this.ItemsForecast.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.Sales.setItem(item, $this);
                }
            };
            Item.addRangeItemsForecast = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast($this, item); });
            };
            Item.removeItemsForecast = function ($this, item) {
                if ($this == null || $this.ItemsForecast == null || $this.ItemsForecast.indexOf(item) === -1)
                    return;
                var _index = $this.ItemsForecast.indexOf(item);
                $this.ItemsForecast.splice(_index, 1);
                item.Item = null;
            };
            Item.clearItemsForecast = function ($this) {
                $this.ItemsForecast = null;
            };
            Item.setSLALeadTimes = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SLALeadTimes == null)
                    $this.SLALeadTimes = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SLALeadTimes.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLALeadTimes($this, $this.SLALeadTimes[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManySLALeadTimes($this, copyItems);
            };
            Item.addManySLALeadTimes = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes($this, items[i]);
                }
            };
            Item.addSLALeadTimes = function ($this, item) {
                if ($this.SLALeadTimes == null)
                    $this.SLALeadTimes = [];
                if (item == null || $this.SLALeadTimes.indexOf(item) > -1)
                    return;
                $this.SLALeadTimes.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime.setItem(item, $this);
                }
            };
            Item.addRangeSLALeadTimes = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes($this, item); });
            };
            Item.removeSLALeadTimes = function ($this, item) {
                if ($this == null || $this.SLALeadTimes == null || $this.SLALeadTimes.indexOf(item) === -1)
                    return;
                var _index = $this.SLALeadTimes.indexOf(item);
                $this.SLALeadTimes.splice(_index, 1);
                item.Item = null;
            };
            Item.clearSLALeadTimes = function ($this) {
                $this.SLALeadTimes = null;
            };
            Item.setSLADeliveries = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SLADeliveries == null)
                    $this.SLADeliveries = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SLADeliveries.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLADeliveries($this, $this.SLADeliveries[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManySLADeliveries($this, copyItems);
            };
            Item.addManySLADeliveries = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries($this, items[i]);
                }
            };
            Item.addSLADeliveries = function ($this, item) {
                if ($this.SLADeliveries == null)
                    $this.SLADeliveries = [];
                if (item == null || $this.SLADeliveries.indexOf(item) > -1)
                    return;
                $this.SLADeliveries.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SLADelivery.setItem(item, $this);
                }
            };
            Item.addRangeSLADeliveries = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries($this, item); });
            };
            Item.removeSLADeliveries = function ($this, item) {
                if ($this == null || $this.SLADeliveries == null || $this.SLADeliveries.indexOf(item) === -1)
                    return;
                var _index = $this.SLADeliveries.indexOf(item);
                $this.SLADeliveries.splice(_index, 1);
                item.Item = null;
            };
            Item.clearSLADeliveries = function ($this) {
                $this.SLADeliveries = null;
            };
            Item.setStocksOnHand = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.StocksOnHand == null)
                    $this.StocksOnHand = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.StocksOnHand.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.removeStocksOnHand($this, $this.StocksOnHand[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Item.addManyStocksOnHand($this, copyItems);
            };
            Item.addManyStocksOnHand = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand($this, items[i]);
                }
            };
            Item.addStocksOnHand = function ($this, item) {
                if ($this.StocksOnHand == null)
                    $this.StocksOnHand = [];
                if (item == null || $this.StocksOnHand.indexOf(item) > -1)
                    return;
                $this.StocksOnHand.push(item);
                if (item.Item != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.StockOnHand.setItem(item, $this);
                }
            };
            Item.addRangeStocksOnHand = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand($this, item); });
            };
            Item.removeStocksOnHand = function ($this, item) {
                if ($this == null || $this.StocksOnHand == null || $this.StocksOnHand.indexOf(item) === -1)
                    return;
                var _index = $this.StocksOnHand.indexOf(item);
                $this.StocksOnHand.splice(_index, 1);
                item.Item = null;
            };
            Item.clearStocksOnHand = function ($this) {
                $this.StocksOnHand = null;
            };
            return Item;
        }());
        BO.Item = Item;
        var SupplierCapacity = /** @class */ (function () {
            function SupplierCapacity() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierCapacity.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SupplierCapacity.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeSupplierCapacities(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities(value, $this);
                }
            };
            SupplierCapacity.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            return SupplierCapacity;
        }());
        BO.SupplierCapacity = SupplierCapacity;
        var WasteOld = /** @class */ (function () {
            function WasteOld() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.WasteOld";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            WasteOld.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            WasteOld.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            return WasteOld;
        }());
        BO.WasteOld = WasteOld;
        var MinimumQuantity = /** @class */ (function () {
            function MinimumQuantity() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            MinimumQuantity.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            MinimumQuantity.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null && oldValue.MinimumQuantity != null) {
                        oldValue.MinimumQuantity = null;
                    }
                    if ($this.Item.MinimumQuantity !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.setMinimumQuantity(value, $this);
                    }
                }
            };
            MinimumQuantity.setSupplier = function ($this, value) {
                var oldValue = $this.Supplier;
                $this.Supplier = value;
                if (value != null) {
                }
            };
            return MinimumQuantity;
        }());
        BO.MinimumQuantity = MinimumQuantity;
        var Notification = /** @class */ (function () {
            function Notification() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Notification";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Notification.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Notification.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeNotifications(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications(value, $this);
                }
            };
            Notification.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            Notification.setOrderForecastDetails = function ($this, value) {
                var oldValue = $this.OrderForecastDetails;
                $this.OrderForecastDetails = value;
                if (value != null) {
                    if (oldValue != null && oldValue.Notification != null) {
                        oldValue.Notification = null;
                    }
                    if ($this.OrderForecastDetails.Notification !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.setNotification(value, $this);
                    }
                }
            };
            return Notification;
        }());
        BO.Notification = Notification;
        var OrderFDashboard = /** @class */ (function () {
            function OrderFDashboard() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.OrderForecastStatistics = [];
                this['_key'] = this.Id = 0;
            }
            OrderFDashboard.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            OrderFDashboard.setOrderForecastStatistics = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.OrderForecastStatistics == null)
                    $this.OrderForecastStatistics = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.OrderForecastStatistics.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.removeOrderForecastStatistics($this, $this.OrderForecastStatistics[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addManyOrderForecastStatistics($this, copyItems);
            };
            OrderFDashboard.addManyOrderForecastStatistics = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, items[i]);
                }
            };
            OrderFDashboard.addOrderForecastStatistics = function ($this, item) {
                if ($this.OrderForecastStatistics == null)
                    $this.OrderForecastStatistics = [];
                if (item == null || $this.OrderForecastStatistics.indexOf(item) > -1)
                    return;
                $this.OrderForecastStatistics.push(item);
            };
            OrderFDashboard.addRangeOrderForecastStatistics = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, item); });
            };
            OrderFDashboard.removeOrderForecastStatistics = function ($this, item) {
                if ($this == null || $this.OrderForecastStatistics == null || $this.OrderForecastStatistics.indexOf(item) === -1)
                    return;
                var _index = $this.OrderForecastStatistics.indexOf(item);
                $this.OrderForecastStatistics.splice(_index, 1);
            };
            OrderFDashboard.clearOrderForecastStatistics = function ($this) {
                $this.OrderForecastStatistics = null;
            };
            return OrderFDashboard;
        }());
        BO.OrderFDashboard = OrderFDashboard;
        var OrderForecastStatistic = /** @class */ (function () {
            function OrderForecastStatistic() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            OrderForecastStatistic.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            OrderForecastStatistic.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            OrderForecastStatistic.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return OrderForecastStatistic;
        }());
        BO.OrderForecastStatistic = OrderForecastStatistic;
        var OrderForecastDetails = /** @class */ (function () {
            function OrderForecastDetails() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Comments = [];
                this['_key'] = this.Id = 0;
            }
            OrderForecastDetails.Get_OrderInventoryDays = function ($this) {
                return 0;
            };
            OrderForecastDetails.Get_RoundQuantity = function ($this) {
                var minQuantity = (Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return $this.Item.MinimumQuantity.Quantity.toString(); }, "")); }, false) ? 0 : Joove.Common.nullSafe(function () { return $this.Item.MinimumQuantity.Quantity; }, 0));
                if (CLMS.Framework.Number.Equal(function () { return minQuantity; }, function () { return 0; })) {
                    return 0;
                }
                return Joove.Common.cast((Joove.Common.safeNumber((parseInt(((Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.Quantity; }, 0)) / Joove.Common.safeNumber(minQuantity))) + Joove.Common.safeNumber(1)))))) * Joove.Common.safeNumber(minQuantity)), "int?");
            };
            OrderForecastDetails.GetDictionaryKey = function (itemSKU, warehouseCode) {
                return "item_" + itemSKU + "_warehouse_" + warehouseCode;
            };
            OrderForecastDetails.PalletsToUnits = function (item, pallets) {
                var palletSize = Joove.Common.nullSafe(function () { return item.PalletSize; }, 0);
                var numberOfUnits = parseInt(((Joove.Common.safeNumber(pallets) * Joove.Common.safeNumber(palletSize))));
                Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Units: " + Joove.Common.safeNumber(numberOfUnits) + " for item: " + Joove.Common.nullSafe(function () { return item.SKU; }, "") + " pallets are: " + Joove.Common.safeNumber(pallets) + " pallet size is: " + Joove.Common.safeNumber(palletSize)); }, null);
                return numberOfUnits;
            };
            OrderForecastDetails.UnitsToPallets = function (item, units) {
                var palletSize = Joove.Common.nullSafe(function () { return item.PalletSize; }, 0);
                var numberOfPallets = 0.0;
                if (CLMS.Framework.Number.GreaterThan(function () { return palletSize; }, function () { return 0; })) {
                    numberOfPallets = Joove.Common.safeNumber(units) / Joove.Common.safeNumber(palletSize);
                }
                return numberOfPallets;
            };
            OrderForecastDetails.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            OrderForecastDetails.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            OrderForecastDetails.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            OrderForecastDetails.setOrderForecast = function ($this, value) {
                var oldValue = $this.OrderForecast;
                $this.OrderForecast = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeOrderForecastDetails(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails(value, $this);
                }
            };
            OrderForecastDetails.setNotification = function ($this, value) {
                var oldValue = $this.Notification;
                $this.Notification = value;
                if (value != null) {
                    if (oldValue != null && oldValue.OrderForecastDetails != null) {
                        oldValue.OrderForecastDetails = null;
                    }
                    if ($this.Notification.OrderForecastDetails !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.Notification.setOrderForecastDetails(value, $this);
                    }
                }
            };
            OrderForecastDetails.setComments = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Comments == null)
                    $this.Comments = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Comments.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.removeComments($this, $this.Comments[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addManyComments($this, copyItems);
            };
            OrderForecastDetails.addManyComments = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addComments($this, items[i]);
                }
            };
            OrderForecastDetails.addComments = function ($this, item) {
                if ($this.Comments == null)
                    $this.Comments = [];
                if (item == null || $this.Comments.indexOf(item) > -1)
                    return;
                $this.Comments.push(item);
            };
            OrderForecastDetails.addRangeComments = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addComments($this, item); });
            };
            OrderForecastDetails.removeComments = function ($this, item) {
                if ($this == null || $this.Comments == null || $this.Comments.indexOf(item) === -1)
                    return;
                var _index = $this.Comments.indexOf(item);
                $this.Comments.splice(_index, 1);
            };
            OrderForecastDetails.clearComments = function ($this) {
                $this.Comments = null;
            };
            return OrderForecastDetails;
        }());
        BO.OrderForecastDetails = OrderForecastDetails;
        var ProposedOrder = /** @class */ (function () {
            function ProposedOrder() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ProposedOrder";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Units = 0;
                this.Finished = false;
                this.CurrentStockUnits = 0;
                this.Initialized = false;
                this.RealOrderUnits = 0;
                this['_key'] = this.Id = 0;
            }
            ProposedOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProposedOrder;
        }());
        BO.ProposedOrder = ProposedOrder;
        var ConstValues = /** @class */ (function () {
            function ConstValues() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ConstValues";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.StockLowLimit = -99999999;
                this['_key'] = this.Id = 0;
            }
            ConstValues.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ConstValues;
        }());
        BO.ConstValues = ConstValues;
        var OrderForecast = /** @class */ (function () {
            function OrderForecast() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecast";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.OrderForecastDetails = [];
                this.SupplierParameters = [];
                this.ItemParameters = [];
                this['_key'] = this.Id = 0;
            }
            OrderForecast.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            OrderForecast.setOrderForecastDetails = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.OrderForecastDetails == null)
                    $this.OrderForecastDetails = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.OrderForecastDetails.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeOrderForecastDetails($this, $this.OrderForecastDetails[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManyOrderForecastDetails($this, copyItems);
            };
            OrderForecast.addManyOrderForecastDetails = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails($this, items[i]);
                }
            };
            OrderForecast.addOrderForecastDetails = function ($this, item) {
                if ($this.OrderForecastDetails == null)
                    $this.OrderForecastDetails = [];
                if (item == null || $this.OrderForecastDetails.indexOf(item) > -1)
                    return;
                $this.OrderForecastDetails.push(item);
                if (item.OrderForecast != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.setOrderForecast(item, $this);
                }
            };
            OrderForecast.addRangeOrderForecastDetails = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails($this, item); });
            };
            OrderForecast.removeOrderForecastDetails = function ($this, item) {
                if ($this == null || $this.OrderForecastDetails == null || $this.OrderForecastDetails.indexOf(item) === -1)
                    return;
                var _index = $this.OrderForecastDetails.indexOf(item);
                $this.OrderForecastDetails.splice(_index, 1);
                item.OrderForecast = null;
            };
            OrderForecast.clearOrderForecastDetails = function ($this) {
                $this.OrderForecastDetails = null;
            };
            OrderForecast.setSalesForecast = function ($this, value) {
                var oldValue = $this.SalesForecast;
                $this.SalesForecast = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeOrderForecasts(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts(value, $this);
                }
            };
            OrderForecast.setSupplierParameters = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SupplierParameters == null)
                    $this.SupplierParameters = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SupplierParameters.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeSupplierParameters($this, $this.SupplierParameters[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManySupplierParameters($this, copyItems);
            };
            OrderForecast.addManySupplierParameters = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters($this, items[i]);
                }
            };
            OrderForecast.addSupplierParameters = function ($this, item) {
                if ($this.SupplierParameters == null)
                    $this.SupplierParameters = [];
                if (item == null || $this.SupplierParameters.indexOf(item) > -1)
                    return;
                $this.SupplierParameters.push(item);
                if (item.OrderForecast != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter.setOrderForecast(item, $this);
                }
            };
            OrderForecast.addRangeSupplierParameters = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters($this, item); });
            };
            OrderForecast.removeSupplierParameters = function ($this, item) {
                if ($this == null || $this.SupplierParameters == null || $this.SupplierParameters.indexOf(item) === -1)
                    return;
                var _index = $this.SupplierParameters.indexOf(item);
                $this.SupplierParameters.splice(_index, 1);
                item.OrderForecast = null;
            };
            OrderForecast.clearSupplierParameters = function ($this) {
                $this.SupplierParameters = null;
            };
            OrderForecast.setItemParameters = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.ItemParameters == null)
                    $this.ItemParameters = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.ItemParameters.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeItemParameters($this, $this.ItemParameters[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManyItemParameters($this, copyItems);
            };
            OrderForecast.addManyItemParameters = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addItemParameters($this, items[i]);
                }
            };
            OrderForecast.addItemParameters = function ($this, item) {
                if ($this.ItemParameters == null)
                    $this.ItemParameters = [];
                if (item == null || $this.ItemParameters.indexOf(item) > -1)
                    return;
                $this.ItemParameters.push(item);
            };
            OrderForecast.addRangeItemParameters = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addItemParameters($this, item); });
            };
            OrderForecast.removeItemParameters = function ($this, item) {
                if ($this == null || $this.ItemParameters == null || $this.ItemParameters.indexOf(item) === -1)
                    return;
                var _index = $this.ItemParameters.indexOf(item);
                $this.ItemParameters.splice(_index, 1);
            };
            OrderForecast.clearItemParameters = function ($this) {
                $this.ItemParameters = null;
            };
            return OrderForecast;
        }());
        BO.OrderForecast = OrderForecast;
        var ItemParameter = /** @class */ (function () {
            function ItemParameter() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ItemParameter";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ItemParameter.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ItemParameter.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            return ItemParameter;
        }());
        BO.ItemParameter = ItemParameter;
        var SupplierParameter = /** @class */ (function () {
            function SupplierParameter() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierParameter.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SupplierParameter.setOrderForecast = function ($this, value) {
                var oldValue = $this.OrderForecast;
                $this.OrderForecast = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeSupplierParameters(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters(value, $this);
                }
            };
            SupplierParameter.setAgreement = function ($this, value) {
                var oldValue = $this.Agreement;
                $this.Agreement = value;
                if (value != null) {
                }
            };
            return SupplierParameter;
        }());
        BO.SupplierParameter = SupplierParameter;
        var Comment = /** @class */ (function () {
            function Comment() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Comment";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Comment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Comment;
        }());
        BO.Comment = Comment;
        var PastOrder = /** @class */ (function () {
            function PastOrder() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.PastOrder";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            PastOrder.DiffDates = function () { };
            PastOrder.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            PastOrder.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removePastOrders(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders(value, $this);
                }
            };
            PastOrder.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Warehouse.removePastOrders(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders(value, $this);
                }
            };
            return PastOrder;
        }());
        BO.PastOrder = PastOrder;
        var Sales = /** @class */ (function () {
            function Sales() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Sales";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Sales.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Sales.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeItemsForecast(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast(value, $this);
                }
            };
            Sales.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return Sales;
        }());
        BO.Sales = Sales;
        var SalesForecast = /** @class */ (function () {
            function SalesForecast() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SalesForecast";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.OrderForecasts = [];
                this.SalesForecastDetails = [];
                this['_key'] = this.Id = 0;
            }
            SalesForecast.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SalesForecast.setOrderForecasts = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.OrderForecasts == null)
                    $this.OrderForecasts = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.OrderForecasts.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeOrderForecasts($this, $this.OrderForecasts[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addManyOrderForecasts($this, copyItems);
            };
            SalesForecast.addManyOrderForecasts = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts($this, items[i]);
                }
            };
            SalesForecast.addOrderForecasts = function ($this, item) {
                if ($this.OrderForecasts == null)
                    $this.OrderForecasts = [];
                if (item == null || $this.OrderForecasts.indexOf(item) > -1)
                    return;
                $this.OrderForecasts.push(item);
                if (item.SalesForecast != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.setSalesForecast(item, $this);
                }
            };
            SalesForecast.addRangeOrderForecasts = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts($this, item); });
            };
            SalesForecast.removeOrderForecasts = function ($this, item) {
                if ($this == null || $this.OrderForecasts == null || $this.OrderForecasts.indexOf(item) === -1)
                    return;
                var _index = $this.OrderForecasts.indexOf(item);
                $this.OrderForecasts.splice(_index, 1);
                item.SalesForecast = null;
            };
            SalesForecast.clearOrderForecasts = function ($this) {
                $this.OrderForecasts = null;
            };
            SalesForecast.setSalesForecastDetails = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.SalesForecastDetails == null)
                    $this.SalesForecastDetails = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.SalesForecastDetails.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeSalesForecastDetails($this, $this.SalesForecastDetails[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addManySalesForecastDetails($this, copyItems);
            };
            SalesForecast.addManySalesForecastDetails = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails($this, items[i]);
                }
            };
            SalesForecast.addSalesForecastDetails = function ($this, item) {
                if ($this.SalesForecastDetails == null)
                    $this.SalesForecastDetails = [];
                if (item == null || $this.SalesForecastDetails.indexOf(item) > -1)
                    return;
                $this.SalesForecastDetails.push(item);
                if (item.SalesForecast != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails.setSalesForecast(item, $this);
                }
            };
            SalesForecast.addRangeSalesForecastDetails = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails($this, item); });
            };
            SalesForecast.removeSalesForecastDetails = function ($this, item) {
                if ($this == null || $this.SalesForecastDetails == null || $this.SalesForecastDetails.indexOf(item) === -1)
                    return;
                var _index = $this.SalesForecastDetails.indexOf(item);
                $this.SalesForecastDetails.splice(_index, 1);
                item.SalesForecast = null;
            };
            SalesForecast.clearSalesForecastDetails = function ($this) {
                $this.SalesForecastDetails = null;
            };
            return SalesForecast;
        }());
        BO.SalesForecast = SalesForecast;
        var SLALeadTime = /** @class */ (function () {
            function SLALeadTime() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLALeadTime.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SLALeadTime.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLALeadTimes(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes(value, $this);
                }
            };
            SLALeadTime.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return SLALeadTime;
        }());
        BO.SLALeadTime = SLALeadTime;
        var SLADelivery = /** @class */ (function () {
            function SLADelivery() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLADelivery";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLADelivery.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SLADelivery.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLADeliveries(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries(value, $this);
                }
            };
            SLADelivery.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return SLADelivery;
        }());
        BO.SLADelivery = SLADelivery;
        var Platform = /** @class */ (function () {
            function Platform() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Platform";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Platform.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Platform.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            Platform.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return Platform;
        }());
        BO.Platform = Platform;
        var SLAStatistics = /** @class */ (function () {
            function SLAStatistics() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            SLAStatistics.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SLAStatistics.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            return SLAStatistics;
        }());
        BO.SLAStatistics = SLAStatistics;
        var InventoryDaysKPI = /** @class */ (function () {
            function InventoryDaysKPI() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.InventoryDaysKPIKey = 0;
            }
            InventoryDaysKPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.InventoryDaysKPIKey == null || $this.InventoryDaysKPIKey == 0;
            };
            return InventoryDaysKPI;
        }());
        BO.InventoryDaysKPI = InventoryDaysKPI;
        var UnitsKPI = /** @class */ (function () {
            function UnitsKPI() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            UnitsKPI.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return UnitsKPI;
        }());
        BO.UnitsKPI = UnitsKPI;
        var Stats = /** @class */ (function () {
            function Stats() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Stats";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Stats.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Stats.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            Stats.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                }
            };
            return Stats;
        }());
        BO.Stats = Stats;
        var StockOnHand = /** @class */ (function () {
            function StockOnHand() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.StockOnHand";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            StockOnHand.DailyStock = function () { };
            StockOnHand.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            StockOnHand.setAgreement = function ($this, value) {
                var oldValue = $this.Agreement;
                $this.Agreement = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeStockOnHands(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands(value, $this);
                }
            };
            StockOnHand.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            StockOnHand.setItem = function ($this, value) {
                var oldValue = $this.Item;
                $this.Item = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Item.removeStocksOnHand(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand(value, $this);
                }
            };
            return StockOnHand;
        }());
        BO.StockOnHand = StockOnHand;
        var Store = /** @class */ (function () {
            function Store() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Store";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            Store.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Store;
        }());
        BO.Store = Store;
        var TransportUnCap = /** @class */ (function () {
            function TransportUnCap() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            TransportUnCap.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            TransportUnCap.setWarehouse = function ($this, value) {
                var oldValue = $this.Warehouse;
                $this.Warehouse = value;
                if (value != null) {
                }
            };
            return TransportUnCap;
        }());
        BO.TransportUnCap = TransportUnCap;
        var Warehouse = /** @class */ (function () {
            function Warehouse() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Warehouse";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.PastOrders = [];
                this['_key'] = this.Id = 0;
            }
            Warehouse.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Warehouse.setPastOrders = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.PastOrders == null)
                    $this.PastOrders = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.PastOrders.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Warehouse.removePastOrders($this, $this.PastOrders[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addManyPastOrders($this, copyItems);
            };
            Warehouse.addManyPastOrders = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders($this, items[i]);
                }
            };
            Warehouse.addPastOrders = function ($this, item) {
                if ($this.PastOrders == null)
                    $this.PastOrders = [];
                if (item == null || $this.PastOrders.indexOf(item) > -1)
                    return;
                $this.PastOrders.push(item);
                if (item.Warehouse != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.PastOrder.setWarehouse(item, $this);
                }
            };
            Warehouse.addRangePastOrders = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders($this, item); });
            };
            Warehouse.removePastOrders = function ($this, item) {
                if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1)
                    return;
                var _index = $this.PastOrders.indexOf(item);
                $this.PastOrders.splice(_index, 1);
                item.Warehouse = null;
            };
            Warehouse.clearPastOrders = function ($this) {
                $this.PastOrders = null;
            };
            return Warehouse;
        }());
        BO.Warehouse = Warehouse;
        var XPackLog = /** @class */ (function () {
            function XPackLog() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.XPackLog";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            XPackLog.GetRecordRequest = function () {
                var req = new Object();
                var query = new Object();
                var boolOp = new Object();
                var mustOp = new Object();
                var queryString = new Object();
                queryString.analyze_wildcard = true;
                queryString.query = "+result_type:\"record\"";
                mustOp.query_string = queryString;
                boolOp.must = mustOp;
                var filter = new Object();
                var range = new Object();
                var timestamp = new Object();
                timestamp.gte = "now-1y";
                timestamp.lte = "now";
                range.timestamp = timestamp;
                filter.range = range;
                boolOp.filter = filter;
                query.Bool = boolOp;
                req.query = query;
                return req;
            };
            XPackLog.Transform = function (logs) {
                var buckets = [];
                var _loop_1 = function (_ibucket) {
                    bucket = logs[_ibucket];
                    var log = new DSS1_RetailerDriverStockOptimisation.BO.XPackLog();
                    log.InitialRecordScore = Joove.Common.nullSafe(function () { return bucket.source.initial_record_score; }, 0);
                    log.Actual = Joove.Common.nullSafe(function () { return bucket.source.actual[0]; }, 0);
                    log.PartitionFieldValue = Joove.Common.nullSafe(function () { return bucket.source.partition_field_value; }, "");
                    log.Probability = Joove.Common.nullSafe(function () { return bucket.source.probability; }, 0);
                    log.RecordScore = Joove.Common.nullSafe(function () { return bucket.source.record_score; }, 0);
                    log.Timestamp = Joove.Common.nullSafe(function () { return bucket.source.timestamp; }, 0);
                    log.Typical = Joove.Common.nullSafe(function () { return bucket.source.typical[0]; }, 0);
                    Joove.Common.nullSafe(function () { return buckets.add(log); }, null);
                };
                var bucket;
                for (var _ibucket = 0; _ibucket < (logs == null ? 0 : logs.length); _ibucket++) {
                    _loop_1(_ibucket);
                }
                return buckets;
            };
            XPackLog.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return XPackLog;
        }());
        BO.XPackLog = XPackLog;
        var ApplicationUserAction = /** @class */ (function () {
            function ApplicationUserAction() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserAction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserAction;
        }());
        BO.ApplicationUserAction = ApplicationUserAction;
        var ApplicationUserExternalProfile = /** @class */ (function () {
            function ApplicationUserExternalProfile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserExternalProfile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserExternalProfile;
        }());
        BO.ApplicationUserExternalProfile = ApplicationUserExternalProfile;
        var ApplicationSetting = /** @class */ (function () {
            function ApplicationSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationSetting;
        }());
        BO.ApplicationSetting = ApplicationSetting;
        var ApplicationUser = /** @class */ (function () {
            function ApplicationUser() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Permissions = [];
                this.Roles = [];
                this.Clients = [];
                this.Logins = [];
                this.Claims = [];
                this['_key'] = this.UserName = "";
            }
            ApplicationUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            ApplicationUser.setPermissions = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Permissions == null)
                    $this.Permissions = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Permissions.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyPermissions($this, copyItems);
            };
            ApplicationUser.addManyPermissions = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addPermissions($this, items[i]);
                }
            };
            ApplicationUser.addPermissions = function ($this, item) {
                if ($this.Permissions == null)
                    $this.Permissions = [];
                if (item == null || $this.Permissions.indexOf(item) > -1)
                    return;
                $this.Permissions.push(item);
                ApplicationPermission.addUsers(item, $this);
            };
            ApplicationUser.addRangePermissions = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addPermissions($this, item); });
            };
            ApplicationUser.removePermissions = function ($this, item) {
                if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                    return;
                var _index = $this.Permissions.indexOf(item);
                $this.Permissions.splice(_index, 1);
                ApplicationPermission.removeUsers(item, $this);
            };
            ApplicationUser.clearPermissions = function ($this) {
                $this.Permissions = null;
            };
            ApplicationUser.setRoles = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Roles == null)
                    $this.Roles = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Roles.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyRoles($this, copyItems);
            };
            ApplicationUser.addManyRoles = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addRoles($this, items[i]);
                }
            };
            ApplicationUser.addRoles = function ($this, item) {
                if ($this.Roles == null)
                    $this.Roles = [];
                if (item == null || $this.Roles.indexOf(item) > -1)
                    return;
                $this.Roles.push(item);
                ApplicationRole.addUsers(item, $this);
            };
            ApplicationUser.addRangeRoles = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addRoles($this, item); });
            };
            ApplicationUser.removeRoles = function ($this, item) {
                if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                    return;
                var _index = $this.Roles.indexOf(item);
                $this.Roles.splice(_index, 1);
                ApplicationRole.removeUsers(item, $this);
            };
            ApplicationUser.clearRoles = function ($this) {
                $this.Roles = null;
            };
            ApplicationUser.setClients = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Clients == null)
                    $this.Clients = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Clients.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyClients($this, copyItems);
            };
            ApplicationUser.addManyClients = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients($this, items[i]);
                }
            };
            ApplicationUser.addClients = function ($this, item) {
                if ($this.Clients == null)
                    $this.Clients = [];
                if (item == null || $this.Clients.indexOf(item) > -1)
                    return;
                $this.Clients.push(item);
                if (item.User != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationClient.setUser(item, $this);
                }
            };
            ApplicationUser.addRangeClients = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients($this, item); });
            };
            ApplicationUser.removeClients = function ($this, item) {
                if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1)
                    return;
                var _index = $this.Clients.indexOf(item);
                $this.Clients.splice(_index, 1);
                item.User = null;
            };
            ApplicationUser.clearClients = function ($this) {
                $this.Clients = null;
            };
            ApplicationUser.setLogins = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Logins == null)
                    $this.Logins = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Logins.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyLogins($this, copyItems);
            };
            ApplicationUser.addManyLogins = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins($this, items[i]);
                }
            };
            ApplicationUser.addLogins = function ($this, item) {
                if ($this.Logins == null)
                    $this.Logins = [];
                if (item == null || $this.Logins.indexOf(item) > -1)
                    return;
                $this.Logins.push(item);
                if (item.User != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUserLogin.setUser(item, $this);
                }
            };
            ApplicationUser.addRangeLogins = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins($this, item); });
            };
            ApplicationUser.removeLogins = function ($this, item) {
                if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1)
                    return;
                var _index = $this.Logins.indexOf(item);
                $this.Logins.splice(_index, 1);
                item.User = null;
            };
            ApplicationUser.clearLogins = function ($this) {
                $this.Logins = null;
            };
            ApplicationUser.setClaims = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Claims == null)
                    $this.Claims = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Claims.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyClaims($this, copyItems);
            };
            ApplicationUser.addManyClaims = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims($this, items[i]);
                }
            };
            ApplicationUser.addClaims = function ($this, item) {
                if ($this.Claims == null)
                    $this.Claims = [];
                if (item == null || $this.Claims.indexOf(item) > -1)
                    return;
                $this.Claims.push(item);
                if (item.User != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUserClaim.setUser(item, $this);
                }
            };
            ApplicationUser.addRangeClaims = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims($this, item); });
            };
            ApplicationUser.removeClaims = function ($this, item) {
                if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1)
                    return;
                var _index = $this.Claims.indexOf(item);
                $this.Claims.splice(_index, 1);
                item.User = null;
            };
            ApplicationUser.clearClaims = function ($this) {
                $this.Claims = null;
            };
            ApplicationUser.setProfile = function ($this, value) {
                var oldValue = $this.Profile;
                $this.Profile = value;
                if (value != null) {
                }
            };
            return ApplicationUser;
        }());
        BO.ApplicationUser = ApplicationUser;
        var ApplicationRole = /** @class */ (function () {
            function ApplicationRole() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Users = [];
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationRole.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationRole.setUsers = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Users == null)
                    $this.Users = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Users.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addManyUsers($this, copyItems);
            };
            ApplicationRole.addManyUsers = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addUsers($this, items[i]);
                }
            };
            ApplicationRole.addUsers = function ($this, item) {
                if ($this.Users == null)
                    $this.Users = [];
                if (item == null || $this.Users.indexOf(item) > -1)
                    return;
                $this.Users.push(item);
                ApplicationUser.addRoles(item, $this);
            };
            ApplicationRole.addRangeUsers = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addUsers($this, item); });
            };
            ApplicationRole.removeUsers = function ($this, item) {
                if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                    return;
                var _index = $this.Users.indexOf(item);
                $this.Users.splice(_index, 1);
                ApplicationUser.removeRoles(item, $this);
            };
            ApplicationRole.clearUsers = function ($this) {
                $this.Users = null;
            };
            ApplicationRole.setPermissions = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Permissions == null)
                    $this.Permissions = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Permissions.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addManyPermissions($this, copyItems);
            };
            ApplicationRole.addManyPermissions = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addPermissions($this, items[i]);
                }
            };
            ApplicationRole.addPermissions = function ($this, item) {
                if ($this.Permissions == null)
                    $this.Permissions = [];
                if (item == null || $this.Permissions.indexOf(item) > -1)
                    return;
                $this.Permissions.push(item);
                ApplicationPermission.addRoles(item, $this);
            };
            ApplicationRole.addRangePermissions = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addPermissions($this, item); });
            };
            ApplicationRole.removePermissions = function ($this, item) {
                if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                    return;
                var _index = $this.Permissions.indexOf(item);
                $this.Permissions.splice(_index, 1);
                ApplicationPermission.removeRoles(item, $this);
            };
            ApplicationRole.clearPermissions = function ($this) {
                $this.Permissions = null;
            };
            return ApplicationRole;
        }());
        BO.ApplicationRole = ApplicationRole;
        var ApplicationOperation = /** @class */ (function () {
            function ApplicationOperation() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationOperation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationOperation.setPermissions = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Permissions == null)
                    $this.Permissions = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Permissions.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addManyPermissions($this, copyItems);
            };
            ApplicationOperation.addManyPermissions = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addPermissions($this, items[i]);
                }
            };
            ApplicationOperation.addPermissions = function ($this, item) {
                if ($this.Permissions == null)
                    $this.Permissions = [];
                if (item == null || $this.Permissions.indexOf(item) > -1)
                    return;
                $this.Permissions.push(item);
                ApplicationPermission.addOperations(item, $this);
            };
            ApplicationOperation.addRangePermissions = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addPermissions($this, item); });
            };
            ApplicationOperation.removePermissions = function ($this, item) {
                if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                    return;
                var _index = $this.Permissions.indexOf(item);
                $this.Permissions.splice(_index, 1);
                ApplicationPermission.removeOperations(item, $this);
            };
            ApplicationOperation.clearPermissions = function ($this) {
                $this.Permissions = null;
            };
            return ApplicationOperation;
        }());
        BO.ApplicationOperation = ApplicationOperation;
        var ApplicationPermission = /** @class */ (function () {
            function ApplicationPermission() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Users = [];
                this.Roles = [];
                this.Operations = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationPermission.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationPermission.setUsers = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Users == null)
                    $this.Users = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Users.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyUsers($this, copyItems);
            };
            ApplicationPermission.addManyUsers = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addUsers($this, items[i]);
                }
            };
            ApplicationPermission.addUsers = function ($this, item) {
                if ($this.Users == null)
                    $this.Users = [];
                if (item == null || $this.Users.indexOf(item) > -1)
                    return;
                $this.Users.push(item);
                ApplicationUser.addPermissions(item, $this);
            };
            ApplicationPermission.addRangeUsers = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addUsers($this, item); });
            };
            ApplicationPermission.removeUsers = function ($this, item) {
                if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                    return;
                var _index = $this.Users.indexOf(item);
                $this.Users.splice(_index, 1);
                ApplicationUser.removePermissions(item, $this);
            };
            ApplicationPermission.clearUsers = function ($this) {
                $this.Users = null;
            };
            ApplicationPermission.setRoles = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Roles == null)
                    $this.Roles = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Roles.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyRoles($this, copyItems);
            };
            ApplicationPermission.addManyRoles = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addRoles($this, items[i]);
                }
            };
            ApplicationPermission.addRoles = function ($this, item) {
                if ($this.Roles == null)
                    $this.Roles = [];
                if (item == null || $this.Roles.indexOf(item) > -1)
                    return;
                $this.Roles.push(item);
                ApplicationRole.addPermissions(item, $this);
            };
            ApplicationPermission.addRangeRoles = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addRoles($this, item); });
            };
            ApplicationPermission.removeRoles = function ($this, item) {
                if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                    return;
                var _index = $this.Roles.indexOf(item);
                $this.Roles.splice(_index, 1);
                ApplicationRole.removePermissions(item, $this);
            };
            ApplicationPermission.clearRoles = function ($this) {
                $this.Roles = null;
            };
            ApplicationPermission.setOperations = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Operations == null)
                    $this.Operations = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Operations.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyOperations($this, copyItems);
            };
            ApplicationPermission.addManyOperations = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addOperations($this, items[i]);
                }
            };
            ApplicationPermission.addOperations = function ($this, item) {
                if ($this.Operations == null)
                    $this.Operations = [];
                if (item == null || $this.Operations.indexOf(item) > -1)
                    return;
                $this.Operations.push(item);
                ApplicationOperation.addPermissions(item, $this);
            };
            ApplicationPermission.addRangeOperations = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addOperations($this, item); });
            };
            ApplicationPermission.removeOperations = function ($this, item) {
                if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1)
                    return;
                var _index = $this.Operations.indexOf(item);
                $this.Operations.splice(_index, 1);
                ApplicationOperation.removePermissions(item, $this);
            };
            ApplicationPermission.clearOperations = function ($this) {
                $this.Operations = null;
            };
            return ApplicationPermission;
        }());
        BO.ApplicationPermission = ApplicationPermission;
        var ApplicationClient = /** @class */ (function () {
            function ApplicationClient() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationClient.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationClient.setUser = function ($this, value) {
                var oldValue = $this.User;
                $this.User = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClients(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients(value, $this);
                }
            };
            return ApplicationClient;
        }());
        BO.ApplicationClient = ApplicationClient;
        var ApplicationUserLogin = /** @class */ (function () {
            function ApplicationUserLogin() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserLogin.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationUserLogin.setUser = function ($this, value) {
                var oldValue = $this.User;
                $this.User = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeLogins(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins(value, $this);
                }
            };
            return ApplicationUserLogin;
        }());
        BO.ApplicationUserLogin = ApplicationUserLogin;
        var ApplicationUserClaim = /** @class */ (function () {
            function ApplicationUserClaim() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserClaim.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationUserClaim.setUser = function ($this, value) {
                var oldValue = $this.User;
                $this.User = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClaims(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims(value, $this);
                }
            };
            return ApplicationUserClaim;
        }());
        BO.ApplicationUserClaim = ApplicationUserClaim;
        var ProfileSetting = /** @class */ (function () {
            function ProfileSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ProfileSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ProfileSetting.setParentProfile = function ($this, value) {
                var oldValue = $this.ParentProfile;
                $this.ParentProfile = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Profile.removeSettings(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings(value, $this);
                }
            };
            return ProfileSetting;
        }());
        BO.ProfileSetting = ProfileSetting;
        var Profile = /** @class */ (function () {
            function Profile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Settings = [];
                this['_key'] = this.Id = 0;
            }
            Profile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Profile.setSettings = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Settings == null)
                    $this.Settings = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Settings.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.Profile.removeSettings($this, $this.Settings[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.Profile.addManySettings($this, copyItems);
            };
            Profile.addManySettings = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings($this, items[i]);
                }
            };
            Profile.addSettings = function ($this, item) {
                if ($this.Settings == null)
                    $this.Settings = [];
                if (item == null || $this.Settings.indexOf(item) > -1)
                    return;
                $this.Settings.push(item);
                if (item.ParentProfile != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.ProfileSetting.setParentProfile(item, $this);
                }
            };
            Profile.addRangeSettings = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings($this, item); });
            };
            Profile.removeSettings = function ($this, item) {
                if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1)
                    return;
                var _index = $this.Settings.indexOf(item);
                $this.Settings.splice(_index, 1);
                item.ParentProfile = null;
            };
            Profile.clearSettings = function ($this) {
                $this.Settings = null;
            };
            return Profile;
        }());
        BO.Profile = Profile;
        var ApplicationLanguage = /** @class */ (function () {
            function ApplicationLanguage() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationLanguage.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            ApplicationLanguage.setDateTimeFormat = function ($this, value) {
                var oldValue = $this.DateTimeFormat;
                $this.DateTimeFormat = value;
                if (value != null) {
                    if (oldValue != null && oldValue.ApplicationLanguage != null) {
                        oldValue.ApplicationLanguage = null;
                    }
                    if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.DateTimeFormat.setApplicationLanguage(value, $this);
                    }
                }
            };
            return ApplicationLanguage;
        }());
        BO.ApplicationLanguage = ApplicationLanguage;
        var DateTimeFormat = /** @class */ (function () {
            function DateTimeFormat() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
                this['_key'] = this.Id = 0;
            }
            DateTimeFormat.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            DateTimeFormat.setApplicationLanguage = function ($this, value) {
                var oldValue = $this.ApplicationLanguage;
                $this.ApplicationLanguage = value;
                if (value != null) {
                    if (oldValue != null && oldValue.DateTimeFormat != null) {
                        oldValue.DateTimeFormat = null;
                    }
                    if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
                    }
                }
            };
            return DateTimeFormat;
        }());
        BO.DateTimeFormat = DateTimeFormat;
        var ApplicationTheme = /** @class */ (function () {
            function ApplicationTheme() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationTheme.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationTheme;
        }());
        BO.ApplicationTheme = ApplicationTheme;
        var FileData = /** @class */ (function () {
            function FileData() {
                this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.FileData";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            FileData.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return FileData;
        }());
        BO.FileData = FileData;
        var StorageMedium;
        (function (StorageMedium) {
            StorageMedium[StorageMedium["FileSystem"] = 0] = "FileSystem";
            StorageMedium[StorageMedium["DataBase"] = 1] = "DataBase";
        })(StorageMedium = BO.StorageMedium || (BO.StorageMedium = {}));
        var AuditEntityConfiguration = /** @class */ (function () {
            function AuditEntityConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Properties = [];
                this['_key'] = this.Id = 0;
            }
            AuditEntityConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            AuditEntityConfiguration.setProperties = function ($this, items) {
                if (items == null)
                    items = [];
                if ($this.Properties == null)
                    $this.Properties = [];
                var copyItems = Joove.Common.cloneObject(items);
                while ($this.Properties.length > 0) {
                    DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
                }
                DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
            };
            AuditEntityConfiguration.addManyProperties = function ($this, items) {
                if (items == null)
                    return;
                for (var i = 0; i < items.length; i++) {
                    DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties($this, items[i]);
                }
            };
            AuditEntityConfiguration.addProperties = function ($this, item) {
                if ($this.Properties == null)
                    $this.Properties = [];
                if (item == null || $this.Properties.indexOf(item) > -1)
                    return;
                $this.Properties.push(item);
                if (item.Entity != $this) {
                    DSS1_RetailerDriverStockOptimisation.BO.AuditPropertyConfiguration.setEntity(item, $this);
                }
            };
            AuditEntityConfiguration.addRangeProperties = function ($this, items) {
                items.forEach(function (item) { return DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties($this, item); });
            };
            AuditEntityConfiguration.removeProperties = function ($this, item) {
                if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1)
                    return;
                var _index = $this.Properties.indexOf(item);
                $this.Properties.splice(_index, 1);
                item.Entity = null;
            };
            AuditEntityConfiguration.clearProperties = function ($this) {
                $this.Properties = null;
            };
            return AuditEntityConfiguration;
        }());
        BO.AuditEntityConfiguration = AuditEntityConfiguration;
        var AuditPropertyConfiguration = /** @class */ (function () {
            function AuditPropertyConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this.Entity = new this.Domain.AuditEntityConfiguration();
                this['_key'] = this.Id = 0;
            }
            AuditPropertyConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            AuditPropertyConfiguration.setEntity = function ($this, value) {
                var oldValue = $this.Entity;
                $this.Entity = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties(value, $this);
                }
            };
            return AuditPropertyConfiguration;
        }());
        BO.AuditPropertyConfiguration = AuditPropertyConfiguration;
        var AuditLogEntry = /** @class */ (function () {
            function AuditLogEntry() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntry.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntry;
        }());
        BO.AuditLogEntry = AuditLogEntry;
        var AuditLogEntryType = /** @class */ (function () {
            function AuditLogEntryType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntryType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntryType;
        }());
        BO.AuditLogEntryType = AuditLogEntryType;
        var AuditLogPropertyActionType = /** @class */ (function () {
            function AuditLogPropertyActionType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogPropertyActionType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogPropertyActionType;
        }());
        BO.AuditLogPropertyActionType = AuditLogPropertyActionType;
        var WorkflowStatus;
        (function (WorkflowStatus) {
            WorkflowStatus[WorkflowStatus["None"] = 0] = "None";
            WorkflowStatus[WorkflowStatus["Completed"] = 1] = "Completed";
            WorkflowStatus[WorkflowStatus["Pending"] = 2] = "Pending";
            WorkflowStatus[WorkflowStatus["Expired"] = 3] = "Expired";
            WorkflowStatus[WorkflowStatus["Cancelled"] = 4] = "Cancelled";
            WorkflowStatus[WorkflowStatus["Failed"] = 5] = "Failed";
            WorkflowStatus[WorkflowStatus["StepToContinueNotFound"] = 6] = "StepToContinueNotFound";
        })(WorkflowStatus = BO.WorkflowStatus || (BO.WorkflowStatus = {}));
        var WorkflowExecutionResult = /** @class */ (function () {
            function WorkflowExecutionResult() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.WorkflowExecutionResultKey = 0;
            }
            WorkflowExecutionResult.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
            };
            WorkflowExecutionResult.setContext = function ($this, value) {
                var oldValue = $this.Context;
                $this.Context = value;
                if (value != null) {
                    if (oldValue != null && oldValue.Result != null) {
                        oldValue.Result = null;
                    }
                    if ($this.Context.Result !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.WorkflowContextBase.setResult(value, $this);
                    }
                }
            };
            return WorkflowExecutionResult;
        }());
        BO.WorkflowExecutionResult = WorkflowExecutionResult;
        var WorkflowContextBase = /** @class */ (function () {
            function WorkflowContextBase() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            WorkflowContextBase.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            WorkflowContextBase.setResult = function ($this, value) {
                var oldValue = $this.Result;
                $this.Result = value;
                if (value != null) {
                    if (oldValue != null && oldValue.Context != null) {
                        oldValue.Context = null;
                    }
                    if ($this.Result.Context !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.WorkflowExecutionResult.setContext(value, $this);
                    }
                }
            };
            return WorkflowContextBase;
        }());
        BO.WorkflowContextBase = WorkflowContextBase;
        var WorkflowSchedule = /** @class */ (function () {
            function WorkflowSchedule() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
                this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                this['_key'] = this.Workflow = "";
            }
            WorkflowSchedule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Workflow == null || $this.Workflow == "";
            };
            return WorkflowSchedule;
        }());
        BO.WorkflowSchedule = WorkflowSchedule;
        var Contact = /** @class */ (function (_super) {
            __extends(Contact, _super);
            function Contact() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Contact";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Contact.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            Contact.setCompany = function ($this, value) {
                var oldValue = $this.Company;
                $this.Company = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.Company.removeContacts(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts(value, $this);
                }
            };
            return Contact;
        }(ApplicationUser));
        BO.Contact = Contact;
        var Retailer = /** @class */ (function (_super) {
            __extends(Retailer, _super);
            function Retailer() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Retailer";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            Retailer.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Retailer;
        }(Company));
        BO.Retailer = Retailer;
        var PastSales = /** @class */ (function (_super) {
            __extends(PastSales, _super);
            function PastSales() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.PastSales";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            PastSales.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PastSales;
        }(Sales));
        BO.PastSales = PastSales;
        var DeliveryPlan = /** @class */ (function (_super) {
            __extends(DeliveryPlan, _super);
            function DeliveryPlan() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            DeliveryPlan.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DeliveryPlan;
        }(Sales));
        BO.DeliveryPlan = DeliveryPlan;
        var SalesForecastDetails = /** @class */ (function (_super) {
            __extends(SalesForecastDetails, _super);
            function SalesForecastDetails() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this.ComputedStock = 0;
                _this.NewOrder = 0;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            SalesForecastDetails.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            SalesForecastDetails.setSalesForecast = function ($this, value) {
                var oldValue = $this.SalesForecast;
                $this.SalesForecast = value;
                if (value != null) {
                    if (oldValue != null) {
                        DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeSalesForecastDetails(oldValue, $this);
                    }
                    DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails(value, $this);
                }
            };
            return SalesForecastDetails;
        }(Sales));
        BO.SalesForecastDetails = SalesForecastDetails;
        var Supplier = /** @class */ (function (_super) {
            __extends(Supplier, _super);
            function Supplier() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Supplier";
                _this.Domain = DSS1_RetailerDriverStockOptimisation.BO;
                _this['_key'] = _this.Id = 0;
                return _this;
            }
            Supplier.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            Supplier.setBusinessUnit = function ($this, value) {
                var oldValue = $this.BusinessUnit;
                $this.BusinessUnit = value;
                if (value != null) {
                    if (oldValue != null && oldValue.Supplier != null) {
                        oldValue.Supplier = null;
                    }
                    if ($this.BusinessUnit.Supplier !== $this) {
                        DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.setSupplier(value, $this);
                    }
                }
            };
            return Supplier;
        }(Company));
        BO.Supplier = Supplier;
    })(BO = DSS1_RetailerDriverStockOptimisation.BO || (DSS1_RetailerDriverStockOptimisation.BO = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
var _appDomain = DSS1_RetailerDriverStockOptimisation.BO;
window.$domain = _appDomain;
