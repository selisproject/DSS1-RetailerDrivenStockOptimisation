// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics {
export class AnalyticsViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
TotalRequest:
true,Logs:
true,MaxElapseMsecs:
true,MinElapseMsecs:
true,AvgElapseMsecs:
true,Top5Service:
true,Top5Operation:
true,Top5Consumer:
true,ErrorRequest:
true,RequestOverTime:
true,TimeRange:
true,RequestLatency:
                true
            }
        } else {
            this._members["TotalRequest"] = true;
            this._members["Logs"] = true;
            this._members["MaxElapseMsecs"] = true;
            this._members["MinElapseMsecs"] = true;
            this._members["AvgElapseMsecs"] = true;
            this._members["Top5Service"] = true;
            this._members["Top5Operation"] = true;
            this._members["Top5Consumer"] = true;
            this._members["ErrorRequest"] = true;
            this._members["RequestOverTime"] = true;
            this._members["TimeRange"] = true;
            this._members["RequestLatency"] = true;
        }

        this.Logs = new Array<any>();
        this.Top5Service = new Array<any>();
        this.Top5Operation = new Array<any>();
        this.Top5Consumer = new Array<any>();
        this.ErrorRequest = new Array<any>();
        this.RequestOverTime = new Array<any>();
        this.RequestLatency = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Logs != null) {
            for(let i = 0; i < instance.Logs.length; i++) {
                instance.Logs[i] = Logs_RequestLogViewModel._lightCast(instance.Logs[i]);

            }
        }

        if(instance.Top5Service != null) {
            for(let i = 0; i < instance.Top5Service.length; i++) {
                instance.Top5Service[i] = Top5Service_BucketsViewModel._lightCast(instance.Top5Service[i]);

            }
        }

        if(instance.Top5Operation != null) {
            for(let i = 0; i < instance.Top5Operation.length; i++) {
                instance.Top5Operation[i] = Top5Operation_BucketsViewModel._lightCast(instance.Top5Operation[i]);

            }
        }

        if(instance.Top5Consumer != null) {
            for(let i = 0; i < instance.Top5Consumer.length; i++) {
                instance.Top5Consumer[i] = Top5Consumer_BucketsViewModel._lightCast(instance.Top5Consumer[i]);

            }
        }

        if(instance.ErrorRequest != null) {
            for(let i = 0; i < instance.ErrorRequest.length; i++) {
                instance.ErrorRequest[i] = ErrorRequest_BucketsViewModel._lightCast(instance.ErrorRequest[i]);

            }
        }

        if(instance.RequestOverTime != null) {
            for(let i = 0; i < instance.RequestOverTime.length; i++) {
                instance.RequestOverTime[i] = RequestOverTime_HIstogramBucketViewModel._lightCast(instance.RequestOverTime[i]);

            }
        }

        if(instance.RequestLatency != null) {
            for(let i = 0; i < instance.RequestLatency.length; i++) {
                instance.RequestLatency[i] = RequestLatency_HIstogramBucketViewModel._lightCast(instance.RequestLatency[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: AnalyticsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): AnalyticsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        AnalyticsViewModel = new AnalyticsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAnalyticsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAnalyticsViewModel(original: AnalyticsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.TotalRequest !== undefined) this.TotalRequest = original.TotalRequest;

        if(original.Logs != null) {
            for(let i = 0; i < original.Logs.length; i++) {
                this.Logs.push(Logs_RequestLogViewModel._initializeFrom(original.Logs[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.MaxElapseMsecs !== undefined) this.MaxElapseMsecs = original.MaxElapseMsecs;
        if(original.MinElapseMsecs !== undefined) this.MinElapseMsecs = original.MinElapseMsecs;
        if(original.AvgElapseMsecs !== undefined) this.AvgElapseMsecs = original.AvgElapseMsecs;

        if(original.Top5Service != null) {
            for(let i = 0; i < original.Top5Service.length; i++) {
                this.Top5Service.push(Top5Service_BucketsViewModel._initializeFrom(original.Top5Service[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Top5Operation != null) {
            for(let i = 0; i < original.Top5Operation.length; i++) {
                this.Top5Operation.push(Top5Operation_BucketsViewModel._initializeFrom(original.Top5Operation[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Top5Consumer != null) {
            for(let i = 0; i < original.Top5Consumer.length; i++) {
                this.Top5Consumer.push(Top5Consumer_BucketsViewModel._initializeFrom(original.Top5Consumer[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.ErrorRequest != null) {
            for(let i = 0; i < original.ErrorRequest.length; i++) {
                this.ErrorRequest.push(ErrorRequest_BucketsViewModel._initializeFrom(original.ErrorRequest[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.RequestOverTime != null) {
            for(let i = 0; i < original.RequestOverTime.length; i++) {
                this.RequestOverTime.push(RequestOverTime_HIstogramBucketViewModel._initializeFrom(original.RequestOverTime[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.TimeRange !== undefined) this.TimeRange = original.TimeRange;

        if(original.RequestLatency != null) {
            for(let i = 0; i < original.RequestLatency.length; i++) {
                this.RequestLatency.push(RequestLatency_HIstogramBucketViewModel._initializeFrom(original.RequestLatency[i], ignoreReadOnlyProperties, context));
            }
        }
        this.Chart13SelectedItemKeys = original.Chart13SelectedItemKeys;
        this.Chart131SelectedItemKeys = original.Chart131SelectedItemKeys;
        this.Chart1SelectedItemKeys = original.Chart1SelectedItemKeys;
        this.Chart11SelectedItemKeys = original.Chart11SelectedItemKeys;
        this.Chart12SelectedItemKeys = original.Chart12SelectedItemKeys;
        this.Chart121SelectedItemKeys = original.Chart121SelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = AnalyticsViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            AnalyticsViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): AnalyticsViewModel {
        var reduced = AnalyticsViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        AnalyticsViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: AnalyticsViewModel) {
        if (reduced == null) return;


        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public TotalRequest:
    any;
public Logs:
    Array<any>;
public MaxElapseMsecs:
    any;
public MinElapseMsecs:
    any;
public AvgElapseMsecs:
    any;
public Top5Service:
    Array<any>;
public Top5Operation:
    Array<any>;
public Top5Consumer:
    Array<any>;
public ErrorRequest:
    Array<any>;
public RequestOverTime:
    Array<any>;
public TimeRange:
    any;
public RequestLatency:
    Array<any>;
public Chart13SelectedItemKeys:
    any[];
public Chart131SelectedItemKeys:
    any[];
public Chart1SelectedItemKeys:
    any[];
public Chart11SelectedItemKeys:
    any[];
public Chart12SelectedItemKeys:
    any[];
public Chart121SelectedItemKeys:
    any[];
}

export class Logs_RequestLogViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
ClientId:
true,ClientName:
true,ElapsedMsecs:
true,IP:
true,Message:
true,Operation:
true,ProductName:
true,RequestId:
true,RequestMethod:
true,RequestPath:
true,RequestUri:
true,Service:
true,StatusCode:
true,Timestamp:
true,Username:
                true
            }
        } else {
            this._members["ClientId"] = true;
            this._members["ClientName"] = true;
            this._members["ElapsedMsecs"] = true;
            this._members["IP"] = true;
            this._members["Message"] = true;
            this._members["Operation"] = true;
            this._members["ProductName"] = true;
            this._members["RequestId"] = true;
            this._members["RequestMethod"] = true;
            this._members["RequestPath"] = true;
            this._members["RequestUri"] = true;
            this._members["Service"] = true;
            this._members["StatusCode"] = true;
            this._members["Timestamp"] = true;
            this._members["Username"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Logs_RequestLogViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Logs_RequestLogViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Logs_RequestLogViewModel = new Logs_RequestLogViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateLogs_RequestLogViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateLogs_RequestLogViewModel(original: Logs_RequestLogViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.ClientId !== undefined) this.ClientId = original.ClientId;
        if(original.ClientName !== undefined) this.ClientName = original.ClientName;
        if(original.ElapsedMsecs !== undefined) this.ElapsedMsecs = original.ElapsedMsecs;
        if(original.IP !== undefined) this.IP = original.IP;
        if(original.Message !== undefined) this.Message = original.Message;
        if(original.Operation !== undefined) this.Operation = original.Operation;
        if(original.ProductName !== undefined) this.ProductName = original.ProductName;
        if(original.RequestId !== undefined) this.RequestId = original.RequestId;
        if(original.RequestMethod !== undefined) this.RequestMethod = original.RequestMethod;
        if(original.RequestPath !== undefined) this.RequestPath = original.RequestPath;
        if(original.RequestUri !== undefined) this.RequestUri = original.RequestUri;
        if(original.Service !== undefined) this.Service = original.Service;
        if(original.StatusCode !== undefined) this.StatusCode = original.StatusCode;
        if(original.Timestamp !== undefined) this.Timestamp = original.Timestamp;
        if(original.Username !== undefined) this.Username = original.Username;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Logs_RequestLogViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Logs_RequestLogViewModel {
        var reduced = Logs_RequestLogViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public ClientId:
    any;
public ClientName:
    any;
public ElapsedMsecs:
    any;
public IP:
    any;
public Message:
    any;
public Operation:
    any;
public ProductName:
    any;
public RequestId:
    any;
public RequestMethod:
    any;
public RequestPath:
    any;
public RequestUri:
    any;
public Service:
    any;
public StatusCode:
    any;
public Timestamp:
    any;
public Username:
    any;
}

export class Top5Service_BucketsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
doc_count:
true,key:
                true
            }
        } else {
            this._members["doc_count"] = true;
            this._members["key"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Top5Service_BucketsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Top5Service_BucketsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Top5Service_BucketsViewModel = new Top5Service_BucketsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTop5Service_BucketsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTop5Service_BucketsViewModel(original: Top5Service_BucketsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.key !== undefined) this.key = original.key;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Top5Service_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Top5Service_BucketsViewModel {
        var reduced = Top5Service_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public doc_count:
    any;
public key:
    any;
}

export class Top5Operation_BucketsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
doc_count:
true,key:
                true
            }
        } else {
            this._members["doc_count"] = true;
            this._members["key"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Top5Operation_BucketsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Top5Operation_BucketsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Top5Operation_BucketsViewModel = new Top5Operation_BucketsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTop5Operation_BucketsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTop5Operation_BucketsViewModel(original: Top5Operation_BucketsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.key !== undefined) this.key = original.key;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Top5Operation_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Top5Operation_BucketsViewModel {
        var reduced = Top5Operation_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public doc_count:
    any;
public key:
    any;
}

export class Top5Consumer_BucketsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
doc_count:
true,key:
                true
            }
        } else {
            this._members["doc_count"] = true;
            this._members["key"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Top5Consumer_BucketsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Top5Consumer_BucketsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Top5Consumer_BucketsViewModel = new Top5Consumer_BucketsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTop5Consumer_BucketsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTop5Consumer_BucketsViewModel(original: Top5Consumer_BucketsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.key !== undefined) this.key = original.key;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Top5Consumer_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Top5Consumer_BucketsViewModel {
        var reduced = Top5Consumer_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public doc_count:
    any;
public key:
    any;
}

export class ErrorRequest_BucketsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
doc_count:
true,key:
                true
            }
        } else {
            this._members["doc_count"] = true;
            this._members["key"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ErrorRequest_BucketsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ErrorRequest_BucketsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ErrorRequest_BucketsViewModel = new ErrorRequest_BucketsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateErrorRequest_BucketsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateErrorRequest_BucketsViewModel(original: ErrorRequest_BucketsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.key !== undefined) this.key = original.key;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ErrorRequest_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ErrorRequest_BucketsViewModel {
        var reduced = ErrorRequest_BucketsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public doc_count:
    any;
public key:
    any;
}

export class RequestOverTime_HIstogramBucketViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
avg:
true,doc_count:
true,error_rate:
true,failure:
true,key:
true,keyAsString:
true,max:
true,min:
true,success:
true,sum:
                true
            }
        } else {
            this._members["avg"] = true;
            this._members["doc_count"] = true;
            this._members["error_rate"] = true;
            this._members["failure"] = true;
            this._members["key"] = true;
            this._members["keyAsString"] = true;
            this._members["max"] = true;
            this._members["min"] = true;
            this._members["success"] = true;
            this._members["sum"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: RequestOverTime_HIstogramBucketViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): RequestOverTime_HIstogramBucketViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        RequestOverTime_HIstogramBucketViewModel = new RequestOverTime_HIstogramBucketViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRequestOverTime_HIstogramBucketViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRequestOverTime_HIstogramBucketViewModel(original: RequestOverTime_HIstogramBucketViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.avg !== undefined) this.avg = original.avg;
        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.error_rate !== undefined) this.error_rate = original.error_rate;
        if(original.failure !== undefined) this.failure = original.failure;
        if(original.key !== undefined) this.key = original.key;
        if(original.keyAsString !== undefined) this.keyAsString = original.keyAsString;
        if(original.max !== undefined) this.max = original.max;
        if(original.min !== undefined) this.min = original.min;
        if(original.success !== undefined) this.success = original.success;
        if(original.sum !== undefined) this.sum = original.sum;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = RequestOverTime_HIstogramBucketViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): RequestOverTime_HIstogramBucketViewModel {
        var reduced = RequestOverTime_HIstogramBucketViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public avg:
    any;
public doc_count:
    any;
public error_rate:
    any;
public failure:
    any;
public key:
    any;
public keyAsString:
    any;
public max:
    any;
public min:
    any;
public success:
    any;
public sum:
    any;
}

export class RequestLatency_HIstogramBucketViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
avg:
true,doc_count:
true,error_rate:
true,failure:
true,key:
true,keyAsString:
true,max:
true,min:
true,success:
true,sum:
                true
            }
        } else {
            this._members["avg"] = true;
            this._members["doc_count"] = true;
            this._members["error_rate"] = true;
            this._members["failure"] = true;
            this._members["key"] = true;
            this._members["keyAsString"] = true;
            this._members["max"] = true;
            this._members["min"] = true;
            this._members["success"] = true;
            this._members["sum"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: RequestLatency_HIstogramBucketViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): RequestLatency_HIstogramBucketViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        RequestLatency_HIstogramBucketViewModel = new RequestLatency_HIstogramBucketViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRequestLatency_HIstogramBucketViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRequestLatency_HIstogramBucketViewModel(original: RequestLatency_HIstogramBucketViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.avg !== undefined) this.avg = original.avg;
        if(original.doc_count !== undefined) this.doc_count = original.doc_count;
        if(original.error_rate !== undefined) this.error_rate = original.error_rate;
        if(original.failure !== undefined) this.failure = original.failure;
        if(original.key !== undefined) this.key = original.key;
        if(original.keyAsString !== undefined) this.keyAsString = original.keyAsString;
        if(original.max !== undefined) this.max = original.max;
        if(original.min !== undefined) this.min = original.min;
        if(original.success !== undefined) this.success = original.success;
        if(original.sum !== undefined) this.sum = original.sum;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = RequestLatency_HIstogramBucketViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): RequestLatency_HIstogramBucketViewModel {
        var reduced = RequestLatency_HIstogramBucketViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public avg:
    any;
public doc_count:
    any;
public error_rate:
    any;
public failure:
    any;
public key:
    any;
public keyAsString:
    any;
public max:
    any;
public min:
    any;
public success:
    any;
public sum:
    any;
}

}
