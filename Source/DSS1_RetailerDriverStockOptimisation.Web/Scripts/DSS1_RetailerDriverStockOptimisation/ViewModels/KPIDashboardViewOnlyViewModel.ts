// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboardViewOnly {
export class KPIDashboardViewOnlyViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
SuppliersInSelectedForecast:
true,SelectedForecast:
true,ItemsInSelectedForecast:
true,ToDate:
true,FromDate:
true,SelectedSKUs:
true,SelectedSKU:
true,Supplier:
true,FlowType:
true,SelectedSuppliers:
true,SelectedWarehouses:
true,SelectedBUs:
true,SelectedCategories:
true,SelectedSubcategories:
true,SelectedBaseUnits:
true,SelectedItemSKUs:
                true
            }
        } else {
            this._members["SuppliersInSelectedForecast"] = true;
            this._members["SelectedForecast"] = true;
            this._members["ItemsInSelectedForecast"] = true;
            this._members["ToDate"] = true;
            this._members["FromDate"] = true;
            this._members["SelectedSKUs"] = true;
            this._members["SelectedSKU"] = true;
            this._members["Supplier"] = true;
            this._members["FlowType"] = true;
            this._members["SelectedSuppliers"] = true;
            this._members["SelectedWarehouses"] = true;
            this._members["SelectedBUs"] = true;
            this._members["SelectedCategories"] = true;
            this._members["SelectedSubcategories"] = true;
            this._members["SelectedBaseUnits"] = true;
            this._members["SelectedItemSKUs"] = true;
        }

        this.SuppliersInSelectedForecast = new Array<any>();
        this.ItemsInSelectedForecast = new Array<any>();
        this.SelectedSKUs = new Array<any>();
        this.SelectedSuppliers = new Array<any>();
        this.SelectedWarehouses = new Array<any>();
        this.SelectedBUs = new Array<any>();
        this.SelectedCategories = new Array<any>();
        this.SelectedSubcategories = new Array<any>();
        this.SelectedBaseUnits = new Array<any>();
        this.SelectedItemSKUs = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < instance.SuppliersInSelectedForecast.length; i++) {
                instance.SuppliersInSelectedForecast[i] = SuppliersInSelectedForecast_AgreementViewModel._lightCast(instance.SuppliersInSelectedForecast[i]);

            }
        }
        if(instance.SelectedForecast != null)
            instance.SelectedForecast = SelectedForecast_OrderForecastViewModel._lightCast(instance.SelectedForecast);

        if(instance.ItemsInSelectedForecast != null) {
            for(let i = 0; i < instance.ItemsInSelectedForecast.length; i++) {
                instance.ItemsInSelectedForecast[i] = ItemsInSelectedForecast_ItemViewModel._lightCast(instance.ItemsInSelectedForecast[i]);

            }
        }
        if(instance.ToDate != null) instance.ToDate = new Date(instance.ToDate);
        if(instance.FromDate != null) instance.FromDate = new Date(instance.FromDate);

        if(instance.SelectedSKUs != null) {
            for(let i = 0; i < instance.SelectedSKUs.length; i++) {
                instance.SelectedSKUs[i] = SelectedSKUs_ItemViewModel._lightCast(instance.SelectedSKUs[i]);

            }
        }
        if(instance.SelectedSKU != null)
            instance.SelectedSKU = SelectedSKU_ItemViewModel._lightCast(instance.SelectedSKU);
        if(instance.Supplier != null)
            instance.Supplier = Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: KPIDashboardViewOnlyViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): KPIDashboardViewOnlyViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        KPIDashboardViewOnlyViewModel = new KPIDashboardViewOnlyViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateKPIDashboardViewOnlyViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateKPIDashboardViewOnlyViewModel(original: KPIDashboardViewOnlyViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageForSlideViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < original.SuppliersInSelectedForecast.length; i++) {
                this.SuppliersInSelectedForecast.push(SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(original.SuppliersInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedForecast !== undefined) this.SelectedForecast = SelectedForecast_OrderForecastViewModel._initializeFrom(original.SelectedForecast, ignoreReadOnlyProperties, context);

        if(original.ItemsInSelectedForecast != null) {
            for(let i = 0; i < original.ItemsInSelectedForecast.length; i++) {
                this.ItemsInSelectedForecast.push(ItemsInSelectedForecast_ItemViewModel._initializeFrom(original.ItemsInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ToDate)) this.ToDate = new Date(original.ToDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.FromDate)) this.FromDate = new Date(original.FromDate);

        if(original.SelectedSKUs != null) {
            for(let i = 0; i < original.SelectedSKUs.length; i++) {
                this.SelectedSKUs.push(SelectedSKUs_ItemViewModel._initializeFrom(original.SelectedSKUs[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedSKU !== undefined) this.SelectedSKU = SelectedSKU_ItemViewModel._initializeFrom(original.SelectedSKU, ignoreReadOnlyProperties, context);

        if(original.Supplier !== undefined) this.Supplier = Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;

        if(original.SelectedSuppliers != null) {
            for(let i = 0; i < original.SelectedSuppliers.length; i++) {
                this.SelectedSuppliers.push(original.SelectedSuppliers[i]);
            }
        }

        if(original.SelectedWarehouses != null) {
            for(let i = 0; i < original.SelectedWarehouses.length; i++) {
                this.SelectedWarehouses.push(original.SelectedWarehouses[i]);
            }
        }

        if(original.SelectedBUs != null) {
            for(let i = 0; i < original.SelectedBUs.length; i++) {
                this.SelectedBUs.push(original.SelectedBUs[i]);
            }
        }

        if(original.SelectedCategories != null) {
            for(let i = 0; i < original.SelectedCategories.length; i++) {
                this.SelectedCategories.push(original.SelectedCategories[i]);
            }
        }

        if(original.SelectedSubcategories != null) {
            for(let i = 0; i < original.SelectedSubcategories.length; i++) {
                this.SelectedSubcategories.push(original.SelectedSubcategories[i]);
            }
        }

        if(original.SelectedBaseUnits != null) {
            for(let i = 0; i < original.SelectedBaseUnits.length; i++) {
                this.SelectedBaseUnits.push(original.SelectedBaseUnits[i]);
            }
        }

        if(original.SelectedItemSKUs != null) {
            for(let i = 0; i < original.SelectedItemSKUs.length; i++) {
                this.SelectedItemSKUs.push(original.SelectedItemSKUs[i]);
            }
        }
        this.chartStockLevelsInvDaysSelectedItemKeys = original.chartStockLevelsInvDaysSelectedItemKeys;
        this.chartStockLevelsUnitsSelectedItemKeys = original.chartStockLevelsUnitsSelectedItemKeys;
        this.chartSLALeadTimeSelectedItemKeys = original.chartSLALeadTimeSelectedItemKeys;
        this.chartSLADeliverySelectedItemKeys = original.chartSLADeliverySelectedItemKeys;
        this.chartWasteSelectedItemKeys = original.chartWasteSelectedItemKeys;
        this.chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = KPIDashboardViewOnlyViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            KPIDashboardViewOnlyViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): KPIDashboardViewOnlyViewModel {
        var reduced = KPIDashboardViewOnlyViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        KPIDashboardViewOnlyViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: KPIDashboardViewOnlyViewModel) {
        if (reduced == null) return;


        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public SuppliersInSelectedForecast:
    Array<any>;
public SelectedForecast:
    any;
public ItemsInSelectedForecast:
    Array<any>;
public ToDate:
    any;
public FromDate:
    any;
public SelectedSKUs:
    Array<any>;
public SelectedSKU:
    any;
public Supplier:
    any;
public FlowType:
    any;
public SelectedSuppliers:
    Array<any>;
public SelectedWarehouses:
    Array<any>;
public SelectedBUs:
    Array<any>;
public SelectedCategories:
    Array<any>;
public SelectedSubcategories:
    Array<any>;
public SelectedBaseUnits:
    Array<any>;
public SelectedItemSKUs:
    Array<any>;
public chartStockLevelsInvDaysSelectedItemKeys:
    any[];
public chartStockLevelsUnitsSelectedItemKeys:
    any[];
public chartSLALeadTimeSelectedItemKeys:
    any[];
public chartSLADeliverySelectedItemKeys:
    any[];
public chartWasteSelectedItemKeys:
    any[];
public chartOrderForecastSelectedItemKeys:
    any[];
}

export class SuppliersInSelectedForecast_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,TargetInventoryDays:
true,Supplier:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["Supplier"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Supplier != null)
            instance.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_AgreementViewModel = new SuppliersInSelectedForecast_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_AgreementViewModel(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;

        if(original.Supplier !== undefined) this.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_AgreementViewModel {
        var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public TargetInventoryDays:
    any;
public Supplier:
    any;
    public _versionTimestamp?: string;
}

export class SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Name:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel = new SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Name:
    any;
}

export class SelectedForecast_OrderForecastViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,CreatedOn:
true,EndDate:
true,Id:
true,StartDate:
true,State:
true,Status:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["CreatedOn"] = true;
            this._members["EndDate"] = true;
            this._members["Id"] = true;
            this._members["StartDate"] = true;
            this._members["State"] = true;
            this._members["Status"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.EndDate != null) instance.EndDate = new Date(instance.EndDate);
        if(instance.StartDate != null) instance.StartDate = new Date(instance.StartDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedForecast_OrderForecastViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedForecast_OrderForecastViewModel = new SelectedForecast_OrderForecastViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedForecast_OrderForecastViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedForecast_OrderForecastViewModel(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.EndDate)) this.EndDate = new Date(original.EndDate);
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StartDate)) this.StartDate = new Date(original.StartDate);
        if(original.State !== undefined) this.State = original.State;
        if(original.Status !== undefined) this.Status = original.Status;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedForecast_OrderForecastViewModel {
        var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public CreatedOn:
    any;
public EndDate:
    any;
public Id:
    any;
public StartDate:
    any;
public State:
    any;
public Status:
    any;
}

export class ItemsInSelectedForecast_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ItemsInSelectedForecast_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ItemsInSelectedForecast_ItemViewModel = new ItemsInSelectedForecast_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItemsInSelectedForecast_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItemsInSelectedForecast_ItemViewModel(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ItemsInSelectedForecast_ItemViewModel {
        var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
SKU:
true,Description:
true,UPC:
true,AvgDailyDemand:
true,CoverageDays:
true,PalletSize:
true,SupplierPackSize:
true,InnerPackSize:
true,PalletType:
true,PalTI:
true,PalHI:
true,UOM:
true,SupplierCapacities:
true,Supplier:
true,BusinessUnit:
true,Category:
true,SubCategory:
true,BaseUnit:
true,ItemsForecast:
true,StocksOnHand:
true,DeliverySchedules:
true,MinimumQuantity:
true,Agreements:
true,Notifications:
true,SLALeadTimes:
true,SLADeliveries:
true,PastOrders:
true,InventoryItems:
                true
            }
        } else {
            this._members["SKU"] = true;
            this._members["Description"] = true;
            this._members["UPC"] = true;
            this._members["AvgDailyDemand"] = true;
            this._members["CoverageDays"] = true;
            this._members["PalletSize"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["PalHI"] = true;
            this._members["UOM"] = true;
            this._members["SupplierCapacities"] = true;
            this._members["Supplier"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Category"] = true;
            this._members["SubCategory"] = true;
            this._members["BaseUnit"] = true;
            this._members["ItemsForecast"] = true;
            this._members["StocksOnHand"] = true;
            this._members["DeliverySchedules"] = true;
            this._members["MinimumQuantity"] = true;
            this._members["Agreements"] = true;
            this._members["Notifications"] = true;
            this._members["SLALeadTimes"] = true;
            this._members["SLADeliveries"] = true;
            this._members["PastOrders"] = true;
            this._members["InventoryItems"] = true;
        }

        this.SupplierCapacities = new Array<any>();
        this.ItemsForecast = new Array<any>();
        this.StocksOnHand = new Array<any>();
        this.DeliverySchedules = new Array<any>();
        this.Agreements = new Array<any>();
        this.Notifications = new Array<any>();
        this.SLALeadTimes = new Array<any>();
        this.SLADeliveries = new Array<any>();
        this.PastOrders = new Array<any>();
        this.InventoryItems = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.SupplierCapacities != null) {
            for(let i = 0; i < instance.SupplierCapacities.length; i++) {
                instance.SupplierCapacities[i] = SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel._lightCast(instance.SupplierCapacities[i]);

            }
        }
        if(instance.Supplier != null)
            instance.Supplier = SelectedSKUs_Item_Supplier_SupplierViewModel._lightCast(instance.Supplier);
        if(instance.BusinessUnit != null)
            instance.BusinessUnit = SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);
        if(instance.Category != null)
            instance.Category = SelectedSKUs_Item_Category_CategoryViewModel._lightCast(instance.Category);
        if(instance.SubCategory != null)
            instance.SubCategory = SelectedSKUs_Item_SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory);
        if(instance.BaseUnit != null)
            instance.BaseUnit = SelectedSKUs_Item_BaseUnit_BaseUnitViewModel._lightCast(instance.BaseUnit);

        if(instance.ItemsForecast != null) {
            for(let i = 0; i < instance.ItemsForecast.length; i++) {
                instance.ItemsForecast[i] = SelectedSKUs_Item_ItemsForecast_SalesViewModel._lightCast(instance.ItemsForecast[i]);

            }
        }

        if(instance.StocksOnHand != null) {
            for(let i = 0; i < instance.StocksOnHand.length; i++) {
                instance.StocksOnHand[i] = SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel._lightCast(instance.StocksOnHand[i]);

            }
        }

        if(instance.DeliverySchedules != null) {
            for(let i = 0; i < instance.DeliverySchedules.length; i++) {
                instance.DeliverySchedules[i] = SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel._lightCast(instance.DeliverySchedules[i]);

            }
        }
        if(instance.MinimumQuantity != null)
            instance.MinimumQuantity = SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel._lightCast(instance.MinimumQuantity);

        if(instance.Agreements != null) {
            for(let i = 0; i < instance.Agreements.length; i++) {
                instance.Agreements[i] = SelectedSKUs_Item_Agreements_AgreementViewModel._lightCast(instance.Agreements[i]);

            }
        }

        if(instance.Notifications != null) {
            for(let i = 0; i < instance.Notifications.length; i++) {
                instance.Notifications[i] = SelectedSKUs_Item_Notifications_NotificationViewModel._lightCast(instance.Notifications[i]);

            }
        }

        if(instance.SLALeadTimes != null) {
            for(let i = 0; i < instance.SLALeadTimes.length; i++) {
                instance.SLALeadTimes[i] = SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel._lightCast(instance.SLALeadTimes[i]);

            }
        }

        if(instance.SLADeliveries != null) {
            for(let i = 0; i < instance.SLADeliveries.length; i++) {
                instance.SLADeliveries[i] = SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel._lightCast(instance.SLADeliveries[i]);

            }
        }

        if(instance.PastOrders != null) {
            for(let i = 0; i < instance.PastOrders.length; i++) {
                instance.PastOrders[i] = SelectedSKUs_Item_PastOrders_PastOrderViewModel._lightCast(instance.PastOrders[i]);

            }
        }

        if(instance.InventoryItems != null) {
            for(let i = 0; i < instance.InventoryItems.length; i++) {
                instance.InventoryItems[i] = SelectedSKUs_Item_InventoryItems_InventoryItemViewModel._lightCast(instance.InventoryItems[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_ItemViewModel = new SelectedSKUs_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_ItemViewModel(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.UPC !== undefined) this.UPC = original.UPC;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        if(original.SupplierCapacities != null) {
            for(let i = 0; i < original.SupplierCapacities.length; i++) {
                this.SupplierCapacities.push(SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel._initializeFrom(original.SupplierCapacities[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Supplier !== undefined) this.Supplier = SelectedSKUs_Item_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.BusinessUnit !== undefined) this.BusinessUnit = SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Category !== undefined) this.Category = SelectedSKUs_Item_Category_CategoryViewModel._initializeFrom(original.Category, ignoreReadOnlyProperties, context);

        if(original.SubCategory !== undefined) this.SubCategory = SelectedSKUs_Item_SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory, ignoreReadOnlyProperties, context);

        if(original.BaseUnit !== undefined) this.BaseUnit = SelectedSKUs_Item_BaseUnit_BaseUnitViewModel._initializeFrom(original.BaseUnit, ignoreReadOnlyProperties, context);

        if(original.ItemsForecast != null) {
            for(let i = 0; i < original.ItemsForecast.length; i++) {
                this.ItemsForecast.push(SelectedSKUs_Item_ItemsForecast_SalesViewModel._initializeFrom(original.ItemsForecast[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.StocksOnHand != null) {
            for(let i = 0; i < original.StocksOnHand.length; i++) {
                this.StocksOnHand.push(SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel._initializeFrom(original.StocksOnHand[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.DeliverySchedules != null) {
            for(let i = 0; i < original.DeliverySchedules.length; i++) {
                this.DeliverySchedules.push(SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(original.DeliverySchedules[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.MinimumQuantity !== undefined) this.MinimumQuantity = SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel._initializeFrom(original.MinimumQuantity, ignoreReadOnlyProperties, context);

        if(original.Agreements != null) {
            for(let i = 0; i < original.Agreements.length; i++) {
                this.Agreements.push(SelectedSKUs_Item_Agreements_AgreementViewModel._initializeFrom(original.Agreements[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Notifications != null) {
            for(let i = 0; i < original.Notifications.length; i++) {
                this.Notifications.push(SelectedSKUs_Item_Notifications_NotificationViewModel._initializeFrom(original.Notifications[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SLALeadTimes != null) {
            for(let i = 0; i < original.SLALeadTimes.length; i++) {
                this.SLALeadTimes.push(SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel._initializeFrom(original.SLALeadTimes[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SLADeliveries != null) {
            for(let i = 0; i < original.SLADeliveries.length; i++) {
                this.SLADeliveries.push(SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel._initializeFrom(original.SLADeliveries[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.PastOrders != null) {
            for(let i = 0; i < original.PastOrders.length; i++) {
                this.PastOrders.push(SelectedSKUs_Item_PastOrders_PastOrderViewModel._initializeFrom(original.PastOrders[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.InventoryItems != null) {
            for(let i = 0; i < original.InventoryItems.length; i++) {
                this.InventoryItems.push(SelectedSKUs_Item_InventoryItems_InventoryItemViewModel._initializeFrom(original.InventoryItems[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_ItemViewModel {
        var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public SKU:
    any;
public Description:
    any;
public UPC:
    any;
public AvgDailyDemand:
    any;
public CoverageDays:
    any;
public PalletSize:
    any;
public SupplierPackSize:
    any;
public InnerPackSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public PalHI:
    any;
public UOM:
    any;
public SupplierCapacities:
    Array<any>;
public Supplier:
    any;
public BusinessUnit:
    any;
public Category:
    any;
public SubCategory:
    any;
public BaseUnit:
    any;
public ItemsForecast:
    Array<any>;
public StocksOnHand:
    Array<any>;
public DeliverySchedules:
    Array<any>;
public MinimumQuantity:
    any;
public Agreements:
    Array<any>;
public Notifications:
    Array<any>;
public SLALeadTimes:
    Array<any>;
public SLADeliveries:
    Array<any>;
public PastOrders:
    Array<any>;
public InventoryItems:
    Array<any>;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,DateOfStockUpdate:
true,DailyProduction:
true,Stock:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["DateOfStockUpdate"] = true;
            this._members["DailyProduction"] = true;
            this._members["Stock"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateOfStockUpdate != null) instance.DateOfStockUpdate = new Date(instance.DateOfStockUpdate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel = new SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel(original: SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateOfStockUpdate)) this.DateOfStockUpdate = new Date(original.DateOfStockUpdate);
        if(original.DailyProduction !== undefined) this.DailyProduction = original.DailyProduction;
        if(original.Stock !== undefined) this.Stock = original.Stock;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel {
        var reduced = SelectedSKUs_Item_SupplierCapacities_SupplierCapacityViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public DateOfStockUpdate:
    any;
public DailyProduction:
    any;
public Stock:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Code:
true,Name:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Code"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_Supplier_SupplierViewModel = new SelectedSKUs_Item_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_Supplier_SupplierViewModel(original: SelectedSKUs_Item_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_Supplier_SupplierViewModel {
        var reduced = SelectedSKUs_Item_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Code:
    any;
public Name:
    any;
}

export class SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel = new SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel(original: SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel {
        var reduced = SelectedSKUs_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_Category_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_Category_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_Category_CategoryViewModel = new SelectedSKUs_Item_Category_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_Category_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_Category_CategoryViewModel(original: SelectedSKUs_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_Category_CategoryViewModel {
        var reduced = SelectedSKUs_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_SubCategory_SubCategoryViewModel = new SelectedSKUs_Item_SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_SubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_SubCategory_SubCategoryViewModel(original: SelectedSKUs_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_SubCategory_SubCategoryViewModel {
        var reduced = SelectedSKUs_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_BaseUnit_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_BaseUnit_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_BaseUnit_BaseUnitViewModel = new SelectedSKUs_Item_BaseUnit_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_BaseUnit_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_BaseUnit_BaseUnitViewModel(original: SelectedSKUs_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_BaseUnit_BaseUnitViewModel {
        var reduced = SelectedSKUs_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_ItemsForecast_SalesViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,ForecastDate:
true,Units:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["ForecastDate"] = true;
            this._members["Units"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.ForecastDate != null) instance.ForecastDate = new Date(instance.ForecastDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_ItemsForecast_SalesViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_ItemsForecast_SalesViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_ItemsForecast_SalesViewModel = new SelectedSKUs_Item_ItemsForecast_SalesViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_ItemsForecast_SalesViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_ItemsForecast_SalesViewModel(original: SelectedSKUs_Item_ItemsForecast_SalesViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ForecastDate)) this.ForecastDate = new Date(original.ForecastDate);
        if(original.Units !== undefined) this.Units = original.Units;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_ItemsForecast_SalesViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_ItemsForecast_SalesViewModel {
        var reduced = SelectedSKUs_Item_ItemsForecast_SalesViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public ForecastDate:
    any;
public Units:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Units:
true,CurrentInventoryDays:
true,StockOnHandDate:
true,LeadTime:
true,TargetInventoryDays:
true,FullTrackLoad:
true,WDDays:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Units"] = true;
            this._members["CurrentInventoryDays"] = true;
            this._members["StockOnHandDate"] = true;
            this._members["LeadTime"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["FullTrackLoad"] = true;
            this._members["WDDays"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.StockOnHandDate != null) instance.StockOnHandDate = new Date(instance.StockOnHandDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel = new SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_StocksOnHand_StockOnHandViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_StocksOnHand_StockOnHandViewModel(original: SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Units !== undefined) this.Units = original.Units;
        if(original.CurrentInventoryDays !== undefined) this.CurrentInventoryDays = original.CurrentInventoryDays;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StockOnHandDate)) this.StockOnHandDate = new Date(original.StockOnHandDate);
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;
        if(original.FullTrackLoad !== undefined) this.FullTrackLoad = original.FullTrackLoad;
        if(original.WDDays !== undefined) this.WDDays = original.WDDays;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel {
        var reduced = SelectedSKUs_Item_StocksOnHand_StockOnHandViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Units:
    any;
public CurrentInventoryDays:
    any;
public StockOnHandDate:
    any;
public LeadTime:
    any;
public TargetInventoryDays:
    any;
public FullTrackLoad:
    any;
public WDDays:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,LeadTime:
true,Weekday:
true,NameOfDay:
true,DBWeekday:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["LeadTime"] = true;
            this._members["Weekday"] = true;
            this._members["NameOfDay"] = true;
            this._members["DBWeekday"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel = new SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel(original: SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(original.Weekday !== undefined) this.Weekday = original.Weekday;
        if(original.NameOfDay !== undefined) this.NameOfDay = original.NameOfDay;
        if(original.DBWeekday !== undefined) this.DBWeekday = original.DBWeekday;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel {
        var reduced = SelectedSKUs_Item_DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public LeadTime:
    any;
public Weekday:
    any;
public NameOfDay:
    any;
public DBWeekday:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Country:
true,Quantity:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Country"] = true;
            this._members["Quantity"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel = new SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel(original: SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Country !== undefined) this.Country = original.Country;
        if(original.Quantity !== undefined) this.Quantity = original.Quantity;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel {
        var reduced = SelectedSKUs_Item_MinimumQuantity_MinimumQuantityViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Country:
    any;
public Quantity:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_Agreements_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,FullTruckLoad:
true,AgreementDocument:
true,LeadTime:
true,DateCreated:
true,WDDeliveries:
true,TargetInventoryDays:
true,Profile:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["FullTruckLoad"] = true;
            this._members["AgreementDocument"] = true;
            this._members["LeadTime"] = true;
            this._members["DateCreated"] = true;
            this._members["WDDeliveries"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["Profile"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateCreated != null) instance.DateCreated = new Date(instance.DateCreated);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_Agreements_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_Agreements_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_Agreements_AgreementViewModel = new SelectedSKUs_Item_Agreements_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_Agreements_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_Agreements_AgreementViewModel(original: SelectedSKUs_Item_Agreements_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.FullTruckLoad !== undefined) this.FullTruckLoad = original.FullTruckLoad;
        if(original.AgreementDocument !== undefined) this.AgreementDocument = original.AgreementDocument;
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateCreated)) this.DateCreated = new Date(original.DateCreated);
        if(original.WDDeliveries !== undefined) this.WDDeliveries = original.WDDeliveries;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;
        if(original.Profile !== undefined) this.Profile = original.Profile;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_Agreements_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_Agreements_AgreementViewModel {
        var reduced = SelectedSKUs_Item_Agreements_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public FullTruckLoad:
    any;
public AgreementDocument:
    any;
public LeadTime:
    any;
public DateCreated:
    any;
public WDDeliveries:
    any;
public TargetInventoryDays:
    any;
public Profile:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_Notifications_NotificationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Message:
true,TotalSupplierStock:
true,OrderForecastQuantity:
true,Diff:
true,SalesForecastDate:
true,CreatedBy:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Message"] = true;
            this._members["TotalSupplierStock"] = true;
            this._members["OrderForecastQuantity"] = true;
            this._members["Diff"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["CreatedBy"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_Notifications_NotificationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_Notifications_NotificationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_Notifications_NotificationViewModel = new SelectedSKUs_Item_Notifications_NotificationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_Notifications_NotificationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_Notifications_NotificationViewModel(original: SelectedSKUs_Item_Notifications_NotificationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Message !== undefined) this.Message = original.Message;
        if(original.TotalSupplierStock !== undefined) this.TotalSupplierStock = original.TotalSupplierStock;
        if(original.OrderForecastQuantity !== undefined) this.OrderForecastQuantity = original.OrderForecastQuantity;
        if(original.Diff !== undefined) this.Diff = original.Diff;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_Notifications_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_Notifications_NotificationViewModel {
        var reduced = SelectedSKUs_Item_Notifications_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Message:
    any;
public TotalSupplierStock:
    any;
public OrderForecastQuantity:
    any;
public Diff:
    any;
public SalesForecastDate:
    any;
public CreatedBy:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,AgreedLeadTime:
true,RealLeadTime:
true,Percentage:
true,ItemDescription:
true,DateFormatted:
true,Threshold:
true,SLALeadDate:
true,Month:
true,MonthlyDelayed:
true,MontlhyOrders:
true,MonthlyPercentage:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["AgreedLeadTime"] = true;
            this._members["RealLeadTime"] = true;
            this._members["Percentage"] = true;
            this._members["ItemDescription"] = true;
            this._members["DateFormatted"] = true;
            this._members["Threshold"] = true;
            this._members["SLALeadDate"] = true;
            this._members["Month"] = true;
            this._members["MonthlyDelayed"] = true;
            this._members["MontlhyOrders"] = true;
            this._members["MonthlyPercentage"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SLALeadDate != null) instance.SLALeadDate = new Date(instance.SLALeadDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel = new SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel(original: SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.AgreedLeadTime !== undefined) this.AgreedLeadTime = original.AgreedLeadTime;
        if(original.RealLeadTime !== undefined) this.RealLeadTime = original.RealLeadTime;
        if(original.Percentage !== undefined) this.Percentage = original.Percentage;
        if(original.ItemDescription !== undefined) this.ItemDescription = original.ItemDescription;
        if(original.DateFormatted !== undefined) this.DateFormatted = original.DateFormatted;
        if(original.Threshold !== undefined) this.Threshold = original.Threshold;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SLALeadDate)) this.SLALeadDate = new Date(original.SLALeadDate);
        if(original.Month !== undefined) this.Month = original.Month;
        if(original.MonthlyDelayed !== undefined) this.MonthlyDelayed = original.MonthlyDelayed;
        if(original.MontlhyOrders !== undefined) this.MontlhyOrders = original.MontlhyOrders;
        if(original.MonthlyPercentage !== undefined) this.MonthlyPercentage = original.MonthlyPercentage;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel {
        var reduced = SelectedSKUs_Item_SLALeadTimes_SLALeadTimeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public AgreedLeadTime:
    any;
public RealLeadTime:
    any;
public Percentage:
    any;
public ItemDescription:
    any;
public DateFormatted:
    any;
public Threshold:
    any;
public SLALeadDate:
    any;
public Month:
    any;
public MonthlyDelayed:
    any;
public MontlhyOrders:
    any;
public MonthlyPercentage:
    any;
}

export class SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,OrderedQuantities:
true,DeliveredQuantities:
true,Percentage:
true,ItemDescription:
true,Threshold:
true,SLADate:
true,DateFormatted:
true,Month:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["OrderedQuantities"] = true;
            this._members["DeliveredQuantities"] = true;
            this._members["Percentage"] = true;
            this._members["ItemDescription"] = true;
            this._members["Threshold"] = true;
            this._members["SLADate"] = true;
            this._members["DateFormatted"] = true;
            this._members["Month"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SLADate != null) instance.SLADate = new Date(instance.SLADate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel = new SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel(original: SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.OrderedQuantities !== undefined) this.OrderedQuantities = original.OrderedQuantities;
        if(original.DeliveredQuantities !== undefined) this.DeliveredQuantities = original.DeliveredQuantities;
        if(original.Percentage !== undefined) this.Percentage = original.Percentage;
        if(original.ItemDescription !== undefined) this.ItemDescription = original.ItemDescription;
        if(original.Threshold !== undefined) this.Threshold = original.Threshold;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SLADate)) this.SLADate = new Date(original.SLADate);
        if(original.DateFormatted !== undefined) this.DateFormatted = original.DateFormatted;
        if(original.Month !== undefined) this.Month = original.Month;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel {
        var reduced = SelectedSKUs_Item_SLADeliveries_SLADeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public OrderedQuantities:
    any;
public DeliveredQuantities:
    any;
public Percentage:
    any;
public ItemDescription:
    any;
public Threshold:
    any;
public SLADate:
    any;
public DateFormatted:
    any;
public Month:
    any;
}

export class SelectedSKUs_Item_PastOrders_PastOrderViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,OrderNumber:
true,WrittenDate:
true,NotBeforeDate:
true,QuantityOrdered:
true,ReceiveDate:
true,QuantityReceived:
true,Caller:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["OrderNumber"] = true;
            this._members["WrittenDate"] = true;
            this._members["NotBeforeDate"] = true;
            this._members["QuantityOrdered"] = true;
            this._members["ReceiveDate"] = true;
            this._members["QuantityReceived"] = true;
            this._members["Caller"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.WrittenDate != null) instance.WrittenDate = new Date(instance.WrittenDate);
        if(instance.NotBeforeDate != null) instance.NotBeforeDate = new Date(instance.NotBeforeDate);
        if(instance.ReceiveDate != null) instance.ReceiveDate = new Date(instance.ReceiveDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_PastOrders_PastOrderViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_PastOrders_PastOrderViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_PastOrders_PastOrderViewModel = new SelectedSKUs_Item_PastOrders_PastOrderViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_PastOrders_PastOrderViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_PastOrders_PastOrderViewModel(original: SelectedSKUs_Item_PastOrders_PastOrderViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.OrderNumber !== undefined) this.OrderNumber = original.OrderNumber;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.WrittenDate)) this.WrittenDate = new Date(original.WrittenDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.NotBeforeDate)) this.NotBeforeDate = new Date(original.NotBeforeDate);
        if(original.QuantityOrdered !== undefined) this.QuantityOrdered = original.QuantityOrdered;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ReceiveDate)) this.ReceiveDate = new Date(original.ReceiveDate);
        if(original.QuantityReceived !== undefined) this.QuantityReceived = original.QuantityReceived;
        if(original.Caller !== undefined) this.Caller = original.Caller;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_PastOrders_PastOrderViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_PastOrders_PastOrderViewModel {
        var reduced = SelectedSKUs_Item_PastOrders_PastOrderViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public OrderNumber:
    any;
public WrittenDate:
    any;
public NotBeforeDate:
    any;
public QuantityOrdered:
    any;
public ReceiveDate:
    any;
public QuantityReceived:
    any;
public Caller:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_Item_InventoryItems_InventoryItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,CoverageDays:
true,SafetyStock:
true,Status:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["CoverageDays"] = true;
            this._members["SafetyStock"] = true;
            this._members["Status"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_Item_InventoryItems_InventoryItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_Item_InventoryItems_InventoryItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_Item_InventoryItems_InventoryItemViewModel = new SelectedSKUs_Item_InventoryItems_InventoryItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_Item_InventoryItems_InventoryItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_Item_InventoryItems_InventoryItemViewModel(original: SelectedSKUs_Item_InventoryItems_InventoryItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.SafetyStock !== undefined) this.SafetyStock = original.SafetyStock;
        if(original.Status !== undefined) this.Status = original.Status;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_Item_InventoryItems_InventoryItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_Item_InventoryItems_InventoryItemViewModel {
        var reduced = SelectedSKUs_Item_InventoryItems_InventoryItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public CoverageDays:
    any;
public SafetyStock:
    any;
public Status:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKU_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKU_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKU_ItemViewModel = new SelectedSKU_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKU_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKU_ItemViewModel(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKU_ItemViewModel {
        var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
true,BusinessUnit:
true,Contacts:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Contacts"] = true;
        }

        this.Contacts = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.BusinessUnit != null)
            instance.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);

        if(instance.Contacts != null) {
            for(let i = 0; i < instance.Contacts.length; i++) {
                instance.Contacts[i] = Supplier_Supplier_Contacts_ContactViewModel._lightCast(instance.Contacts[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_SupplierViewModel = new Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_SupplierViewModel(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        if(original.BusinessUnit !== undefined) this.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Contacts != null) {
            for(let i = 0; i < original.Contacts.length; i++) {
                this.Contacts.push(Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(original.Contacts[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_SupplierViewModel {
        var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
public BusinessUnit:
    any;
public Contacts:
    Array<any>;
}

export class Supplier_Supplier_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_BusinessUnit_BusinessUnitViewModel = new Supplier_Supplier_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_Supplier_Contacts_ContactViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AccessFailedCount:
true,Email:
true,EmailConfirmed:
true,Id:
true,LockoutEnabled:
true,LockoutEndDate:
true,Name:
true,PhoneNumber:
true,PhoneNumberConfirmed:
true,TwoFactorEnabled:
true,UserName:
                true
            }
        } else {
            this._members["AccessFailedCount"] = true;
            this._members["Email"] = true;
            this._members["EmailConfirmed"] = true;
            this._members["Id"] = true;
            this._members["LockoutEnabled"] = true;
            this._members["LockoutEndDate"] = true;
            this._members["Name"] = true;
            this._members["PhoneNumber"] = true;
            this._members["PhoneNumberConfirmed"] = true;
            this._members["TwoFactorEnabled"] = true;
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.LockoutEndDate != null) instance.LockoutEndDate = new Date(instance.LockoutEndDate);
        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_Contacts_ContactViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_Contacts_ContactViewModel = new Supplier_Supplier_Contacts_ContactViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_Contacts_ContactViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_Contacts_ContactViewModel(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AccessFailedCount !== undefined) this.AccessFailedCount = original.AccessFailedCount;
        if(original.Email !== undefined) this.Email = original.Email;
        if(original.EmailConfirmed !== undefined) this.EmailConfirmed = original.EmailConfirmed;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LockoutEnabled !== undefined) this.LockoutEnabled = original.LockoutEnabled;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.LockoutEndDate)) this.LockoutEndDate = new Date(original.LockoutEndDate);
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.PhoneNumber !== undefined) this.PhoneNumber = original.PhoneNumber;
        if(original.PhoneNumberConfirmed !== undefined) this.PhoneNumberConfirmed = original.PhoneNumberConfirmed;
        if(original.TwoFactorEnabled !== undefined) this.TwoFactorEnabled = original.TwoFactorEnabled;
        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_Contacts_ContactViewModel {
        var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AccessFailedCount:
    any;
public Email:
    any;
public EmailConfirmed:
    any;
public Id:
    any;
public LockoutEnabled:
    any;
public LockoutEndDate:
    any;
public Name:
    any;
public PhoneNumber:
    any;
public PhoneNumberConfirmed:
    any;
public TwoFactorEnabled:
    any;
public UserName:
    any;
}

}
