// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.NewDashboard {
export class NewDashboardViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Warehouse:
true,SKU:
true,LocId:
true,ItemDesc:
true,warehouseid:
true,Notifications:
true,FromDate:
true,ToDate:
true,Category:
true,SubCategory:
true,BaseUnit:
true,BusinessUnit:
true,Item:
true,Supplier:
                true
            }
        } else {
            this._members["Warehouse"] = true;
            this._members["SKU"] = true;
            this._members["LocId"] = true;
            this._members["ItemDesc"] = true;
            this._members["warehouseid"] = true;
            this._members["Notifications"] = true;
            this._members["FromDate"] = true;
            this._members["ToDate"] = true;
            this._members["Category"] = true;
            this._members["SubCategory"] = true;
            this._members["BaseUnit"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Item"] = true;
            this._members["Supplier"] = true;
        }

        this.Notifications = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Warehouse != null)
            instance.Warehouse = Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);

        if(instance.Notifications != null) {
            for(let i = 0; i < instance.Notifications.length; i++) {
                instance.Notifications[i] = Notifications_NotificationViewModel._lightCast(instance.Notifications[i]);

            }
        }
        if(instance.FromDate != null) instance.FromDate = new Date(instance.FromDate);
        if(instance.ToDate != null) instance.ToDate = new Date(instance.ToDate);
        if(instance.Category != null)
            instance.Category = Category_CategoryViewModel._lightCast(instance.Category);
        if(instance.SubCategory != null)
            instance.SubCategory = SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory);
        if(instance.BaseUnit != null)
            instance.BaseUnit = BaseUnit_BaseUnitViewModel._lightCast(instance.BaseUnit);
        if(instance.BusinessUnit != null)
            instance.BusinessUnit = BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);
        if(instance.Item != null)
            instance.Item = Item_ItemViewModel._lightCast(instance.Item);
        if(instance.Supplier != null)
            instance.Supplier = Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: NewDashboardViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): NewDashboardViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        NewDashboardViewModel = new NewDashboardViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNewDashboardViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNewDashboardViewModel(original: NewDashboardViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Warehouse !== undefined) this.Warehouse = Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.LocId !== undefined) this.LocId = original.LocId;
        if(original.ItemDesc !== undefined) this.ItemDesc = original.ItemDesc;
        if(original.warehouseid !== undefined) this.warehouseid = original.warehouseid;

        if(original.Notifications != null) {
            for(let i = 0; i < original.Notifications.length; i++) {
                this.Notifications.push(Notifications_NotificationViewModel._initializeFrom(original.Notifications[i], ignoreReadOnlyProperties, context));
            }
        }
        if(!CLMS.Framework.String.IsNullOrEmpty(original.FromDate)) this.FromDate = new Date(original.FromDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ToDate)) this.ToDate = new Date(original.ToDate);

        if(original.Category !== undefined) this.Category = Category_CategoryViewModel._initializeFrom(original.Category, ignoreReadOnlyProperties, context);

        if(original.SubCategory !== undefined) this.SubCategory = SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory, ignoreReadOnlyProperties, context);

        if(original.BaseUnit !== undefined) this.BaseUnit = BaseUnit_BaseUnitViewModel._initializeFrom(original.BaseUnit, ignoreReadOnlyProperties, context);

        if(original.BusinessUnit !== undefined) this.BusinessUnit = BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Item !== undefined) this.Item = Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.Supplier !== undefined) this.Supplier = Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);
        if (original.ddlBusinessUnit__InitialSelection !== undefined) this.ddlBusinessUnit__InitialSelection = original.ddlBusinessUnit__InitialSelection;
        if (original.ddlCategory__InitialSelection !== undefined) this.ddlCategory__InitialSelection = original.ddlCategory__InitialSelection;
        if (original.ddlSubcategory__InitialSelection !== undefined) this.ddlSubcategory__InitialSelection = original.ddlSubcategory__InitialSelection;
        if (original.ddlBaseunit__InitialSelection !== undefined) this.ddlBaseunit__InitialSelection = original.ddlBaseunit__InitialSelection;
        if (original.ddlSKU__InitialSelection !== undefined) this.ddlSKU__InitialSelection = original.ddlSKU__InitialSelection;
        if (original.ddlSupplier__InitialSelection !== undefined) this.ddlSupplier__InitialSelection = original.ddlSupplier__InitialSelection;
        this.ddlBusinessUnitSelectedItemKeys = original.ddlBusinessUnitSelectedItemKeys;
        this.ddlCategorySelectedItemKeys = original.ddlCategorySelectedItemKeys;
        this.ddlSubcategorySelectedItemKeys = original.ddlSubcategorySelectedItemKeys;
        this.ddlBaseunitSelectedItemKeys = original.ddlBaseunitSelectedItemKeys;
        this.ddlSKUSelectedItemKeys = original.ddlSKUSelectedItemKeys;
        this.ddlSupplierSelectedItemKeys = original.ddlSupplierSelectedItemKeys;
        this.ddlWarehouseSelectedItemKeys = original.ddlWarehouseSelectedItemKeys;
        this.Chart1SelectedItemKeys = original.Chart1SelectedItemKeys;
        this.Chart3SelectedItemKeys = original.Chart3SelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = NewDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            NewDashboardViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): NewDashboardViewModel {
        var reduced = NewDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        NewDashboardViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: NewDashboardViewModel) {
        if (reduced == null) return;

        delete reduced.ddlBusinessUnit__InitialSelection;
        delete reduced.ddlCategory__InitialSelection;
        delete reduced.ddlSubcategory__InitialSelection;
        delete reduced.ddlBaseunit__InitialSelection;
        delete reduced.ddlSKU__InitialSelection;
        delete reduced.ddlSupplier__InitialSelection;

        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Warehouse:
    any;
public SKU:
    any;
public LocId:
    any;
public ItemDesc:
    any;
public warehouseid:
    any;
public Notifications:
    Array<any>;
public FromDate:
    any;
public ToDate:
    any;
public Category:
    any;
public SubCategory:
    any;
public BaseUnit:
    any;
public BusinessUnit:
    any;
public Item:
    any;
public Supplier:
    any;
public ddlBusinessUnit__InitialSelection:
    any;
public ddlCategory__InitialSelection:
    any;
public ddlSubcategory__InitialSelection:
    any;
public ddlBaseunit__InitialSelection:
    any;
public ddlSKU__InitialSelection:
    any;
public ddlSupplier__InitialSelection:
    any;
public ddlBusinessUnitSelectedItemKeys:
    any[];
public ddlCategorySelectedItemKeys:
    any[];
public ddlSubcategorySelectedItemKeys:
    any[];
public ddlBaseunitSelectedItemKeys:
    any[];
public ddlSKUSelectedItemKeys:
    any[];
public ddlSupplierSelectedItemKeys:
    any[];
public ddlWarehouseSelectedItemKeys:
    any[];
public Chart1SelectedItemKeys:
    any[];
public Chart3SelectedItemKeys:
    any[];
}

export class Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Warehouse_WarehouseViewModel = new Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateWarehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateWarehouse_WarehouseViewModel(original: Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Warehouse_WarehouseViewModel {
        var reduced = Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Notifications_NotificationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Diff:
true,Id:
true,OrderForecastQuantity:
true,SalesForecastDate:
true,TotalSupplierStock:
true,Item:
true,Warehouse:
                true
            }
        } else {
            this._members["Diff"] = true;
            this._members["Id"] = true;
            this._members["OrderForecastQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["TotalSupplierStock"] = true;
            this._members["Item"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        if(instance.Item != null)
            instance.Item = Notifications_Notification_Item_ItemViewModel._lightCast(instance.Item);
        if(instance.Warehouse != null)
            instance.Warehouse = Notifications_Notification_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: Notifications_NotificationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Notifications_NotificationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Notifications_NotificationViewModel = new Notifications_NotificationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNotifications_NotificationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNotifications_NotificationViewModel(original: Notifications_NotificationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Diff !== undefined) this.Diff = original.Diff;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.OrderForecastQuantity !== undefined) this.OrderForecastQuantity = original.OrderForecastQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.TotalSupplierStock !== undefined) this.TotalSupplierStock = original.TotalSupplierStock;

        if(original.Item !== undefined) this.Item = Notifications_Notification_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.Warehouse !== undefined) this.Warehouse = Notifications_Notification_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Notifications_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Notifications_NotificationViewModel {
        var reduced = Notifications_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Diff:
    any;
public Id:
    any;
public OrderForecastQuantity:
    any;
public SalesForecastDate:
    any;
public TotalSupplierStock:
    any;
public Item:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class Notifications_Notification_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Notifications_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Notifications_Notification_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Notifications_Notification_Item_ItemViewModel = new Notifications_Notification_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNotifications_Notification_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNotifications_Notification_Item_ItemViewModel(original: Notifications_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Notifications_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Notifications_Notification_Item_ItemViewModel {
        var reduced = Notifications_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class Notifications_Notification_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Notifications_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Notifications_Notification_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Notifications_Notification_Warehouse_WarehouseViewModel = new Notifications_Notification_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNotifications_Notification_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNotifications_Notification_Warehouse_WarehouseViewModel(original: Notifications_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Notifications_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Notifications_Notification_Warehouse_WarehouseViewModel {
        var reduced = Notifications_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Category_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,SubCategory:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["SubCategory"] = true;
        }

        this.SubCategory = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.SubCategory != null) {
            for(let i = 0; i < instance.SubCategory.length; i++) {
                instance.SubCategory[i] = Category_Category_SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Category_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Category_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Category_CategoryViewModel = new Category_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateCategory_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateCategory_CategoryViewModel(original: Category_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        if(original.SubCategory != null) {
            for(let i = 0; i < original.SubCategory.length; i++) {
                this.SubCategory.push(Category_Category_SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Category_CategoryViewModel {
        var reduced = Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public SubCategory:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Category_Category_SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Category_Category_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Category_Category_SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Category_Category_SubCategory_SubCategoryViewModel = new Category_Category_SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateCategory_Category_SubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateCategory_Category_SubCategory_SubCategoryViewModel(original: Category_Category_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Category_Category_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Category_Category_SubCategory_SubCategoryViewModel {
        var reduced = Category_Category_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,BaseUnits:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["BaseUnits"] = true;
        }

        this.BaseUnits = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.BaseUnits != null) {
            for(let i = 0; i < instance.BaseUnits.length; i++) {
                instance.BaseUnits[i] = SubCategory_SubCategory_BaseUnits_BaseUnitViewModel._lightCast(instance.BaseUnits[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SubCategory_SubCategoryViewModel = new SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSubCategory_SubCategoryViewModel(original: SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        if(original.BaseUnits != null) {
            for(let i = 0; i < original.BaseUnits.length; i++) {
                this.BaseUnits.push(SubCategory_SubCategory_BaseUnits_BaseUnitViewModel._initializeFrom(original.BaseUnits[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SubCategory_SubCategoryViewModel {
        var reduced = SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public BaseUnits:
    Array<any>;
    public _versionTimestamp?: string;
}

export class SubCategory_SubCategory_BaseUnits_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SubCategory_SubCategory_BaseUnits_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SubCategory_SubCategory_BaseUnits_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SubCategory_SubCategory_BaseUnits_BaseUnitViewModel = new SubCategory_SubCategory_BaseUnits_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSubCategory_SubCategory_BaseUnits_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSubCategory_SubCategory_BaseUnits_BaseUnitViewModel(original: SubCategory_SubCategory_BaseUnits_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SubCategory_SubCategory_BaseUnits_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SubCategory_SubCategory_BaseUnits_BaseUnitViewModel {
        var reduced = SubCategory_SubCategory_BaseUnits_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class BaseUnit_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): BaseUnit_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        BaseUnit_BaseUnitViewModel = new BaseUnit_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateBaseUnit_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateBaseUnit_BaseUnitViewModel(original: BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): BaseUnit_BaseUnitViewModel {
        var reduced = BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Categories:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Categories"] = true;
        }

        this.Categories = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Categories != null) {
            for(let i = 0; i < instance.Categories.length; i++) {
                instance.Categories[i] = BusinessUnit_BusinessUnit_Categories_CategoryViewModel._lightCast(instance.Categories[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        BusinessUnit_BusinessUnitViewModel = new BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateBusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateBusinessUnit_BusinessUnitViewModel(original: BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        if(original.Categories != null) {
            for(let i = 0; i < original.Categories.length; i++) {
                this.Categories.push(BusinessUnit_BusinessUnit_Categories_CategoryViewModel._initializeFrom(original.Categories[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): BusinessUnit_BusinessUnitViewModel {
        var reduced = BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Categories:
    Array<any>;
    public _versionTimestamp?: string;
}

export class BusinessUnit_BusinessUnit_Categories_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: BusinessUnit_BusinessUnit_Categories_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): BusinessUnit_BusinessUnit_Categories_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        BusinessUnit_BusinessUnit_Categories_CategoryViewModel = new BusinessUnit_BusinessUnit_Categories_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateBusinessUnit_BusinessUnit_Categories_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateBusinessUnit_BusinessUnit_Categories_CategoryViewModel(original: BusinessUnit_BusinessUnit_Categories_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = BusinessUnit_BusinessUnit_Categories_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): BusinessUnit_BusinessUnit_Categories_CategoryViewModel {
        var reduced = BusinessUnit_BusinessUnit_Categories_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
true,Supplier:
true,BusinessUnit:
true,Category:
true,SubCategory:
true,BaseUnit:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
            this._members["Supplier"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Category"] = true;
            this._members["SubCategory"] = true;
            this._members["BaseUnit"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Supplier != null)
            instance.Supplier = Item_Item_Supplier_SupplierViewModel._lightCast(instance.Supplier);
        if(instance.BusinessUnit != null)
            instance.BusinessUnit = Item_Item_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);
        if(instance.Category != null)
            instance.Category = Item_Item_Category_CategoryViewModel._lightCast(instance.Category);
        if(instance.SubCategory != null)
            instance.SubCategory = Item_Item_SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory);
        if(instance.BaseUnit != null)
            instance.BaseUnit = Item_Item_BaseUnit_BaseUnitViewModel._lightCast(instance.BaseUnit);
        return instance;
    }

    public static _initializeFrom(original: Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_ItemViewModel = new Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_ItemViewModel(original: Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        if(original.Supplier !== undefined) this.Supplier = Item_Item_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.BusinessUnit !== undefined) this.BusinessUnit = Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Category !== undefined) this.Category = Item_Item_Category_CategoryViewModel._initializeFrom(original.Category, ignoreReadOnlyProperties, context);

        if(original.SubCategory !== undefined) this.SubCategory = Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory, ignoreReadOnlyProperties, context);

        if(original.BaseUnit !== undefined) this.BaseUnit = Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(original.BaseUnit, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_ItemViewModel {
        var reduced = Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
public Supplier:
    any;
public BusinessUnit:
    any;
public Category:
    any;
public SubCategory:
    any;
public BaseUnit:
    any;
    public _versionTimestamp?: string;
}

export class Item_Item_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Item_Item_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_Item_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_Item_Supplier_SupplierViewModel = new Item_Item_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_Item_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_Item_Supplier_SupplierViewModel(original: Item_Item_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_Item_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_Item_Supplier_SupplierViewModel {
        var reduced = Item_Item_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
}

export class Item_Item_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Item_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_Item_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_Item_BusinessUnit_BusinessUnitViewModel = new Item_Item_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_Item_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_Item_BusinessUnit_BusinessUnitViewModel(original: Item_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_Item_BusinessUnit_BusinessUnitViewModel {
        var reduced = Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Item_Item_Category_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Item_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_Item_Category_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_Item_Category_CategoryViewModel = new Item_Item_Category_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_Item_Category_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_Item_Category_CategoryViewModel(original: Item_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_Item_Category_CategoryViewModel {
        var reduced = Item_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Item_Item_SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Item_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_Item_SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_Item_SubCategory_SubCategoryViewModel = new Item_Item_SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_Item_SubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_Item_SubCategory_SubCategoryViewModel(original: Item_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_Item_SubCategory_SubCategoryViewModel {
        var reduced = Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Item_Item_BaseUnit_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Item_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Item_Item_BaseUnit_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Item_Item_BaseUnit_BaseUnitViewModel = new Item_Item_BaseUnit_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItem_Item_BaseUnit_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItem_Item_BaseUnit_BaseUnitViewModel(original: Item_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Item_Item_BaseUnit_BaseUnitViewModel {
        var reduced = Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_SupplierViewModel = new Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_SupplierViewModel(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_SupplierViewModel {
        var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
}

}
