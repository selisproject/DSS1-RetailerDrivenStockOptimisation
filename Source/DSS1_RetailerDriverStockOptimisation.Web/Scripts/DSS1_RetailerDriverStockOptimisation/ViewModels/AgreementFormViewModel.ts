// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.AgreementForm {
export class AgreementFormViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Agreement:
true,DeliverySchedules:
true,Items:
true,InventoryItems:
                true
            }
        } else {
            this._members["Agreement"] = true;
            this._members["DeliverySchedules"] = true;
            this._members["Items"] = true;
            this._members["InventoryItems"] = true;
        }

        this.DeliverySchedules = new Array<any>();
        this.Items = new Array<any>();
        this.InventoryItems = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Agreement != null)
            instance.Agreement = Agreement_AgreementViewModel._lightCast(instance.Agreement);

        if(instance.DeliverySchedules != null) {
            for(let i = 0; i < instance.DeliverySchedules.length; i++) {
                instance.DeliverySchedules[i] = DeliverySchedules_DeliveryScheduleViewModel._lightCast(instance.DeliverySchedules[i]);

            }
        }

        if(instance.Items != null) {
            for(let i = 0; i < instance.Items.length; i++) {
                instance.Items[i] = Items_ItemViewModel._lightCast(instance.Items[i]);

            }
        }

        if(instance.InventoryItems != null) {
            for(let i = 0; i < instance.InventoryItems.length; i++) {
                instance.InventoryItems[i] = InventoryItems_InventoryItemViewModel._lightCast(instance.InventoryItems[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: AgreementFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): AgreementFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        AgreementFormViewModel = new AgreementFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreementFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreementFormViewModel(original: AgreementFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Agreement !== undefined) this.Agreement = Agreement_AgreementViewModel._initializeFrom(original.Agreement, ignoreReadOnlyProperties, context);

        if(original.DeliverySchedules != null) {
            for(let i = 0; i < original.DeliverySchedules.length; i++) {
                this.DeliverySchedules.push(DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(original.DeliverySchedules[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Items != null) {
            for(let i = 0; i < original.Items.length; i++) {
                this.Items.push(Items_ItemViewModel._initializeFrom(original.Items[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.InventoryItems != null) {
            for(let i = 0; i < original.InventoryItems.length; i++) {
                this.InventoryItems.push(InventoryItems_InventoryItemViewModel._initializeFrom(original.InventoryItems[i], ignoreReadOnlyProperties, context));
            }
        }
        this.txtStatusSelectedItemKeys = original.txtStatusSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = AgreementFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            AgreementFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): AgreementFormViewModel {
        var reduced = AgreementFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        AgreementFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: AgreementFormViewModel) {
        if (reduced == null) return;


        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Agreement:
    any;
public DeliverySchedules:
    Array<any>;
public Items:
    Array<any>;
public InventoryItems:
    Array<any>;
public txtStatusSelectedItemKeys:
    any[];
}

export class Agreement_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AgreementDocument:
true,DateCreated:
true,Id:
true,Profile:
true,TargetInventoryDays:
true,Supplier:
true,TransportUnCaps:
                true
            }
        } else {
            this._members["AgreementDocument"] = true;
            this._members["DateCreated"] = true;
            this._members["Id"] = true;
            this._members["Profile"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["Supplier"] = true;
            this._members["TransportUnCaps"] = true;
        }

        this.TransportUnCaps = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateCreated != null) instance.DateCreated = new Date(instance.DateCreated);
        if(instance.Supplier != null)
            instance.Supplier = Agreement_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);

        if(instance.TransportUnCaps != null) {
            for(let i = 0; i < instance.TransportUnCaps.length; i++) {
                instance.TransportUnCaps[i] = Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel._lightCast(instance.TransportUnCaps[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_AgreementViewModel = new Agreement_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_AgreementViewModel(original: Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AgreementDocument !== undefined) this.AgreementDocument = original.AgreementDocument;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateCreated)) this.DateCreated = new Date(original.DateCreated);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Profile !== undefined) this.Profile = original.Profile;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;

        if(original.Supplier !== undefined) this.Supplier = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.TransportUnCaps != null) {
            for(let i = 0; i < original.TransportUnCaps.length; i++) {
                this.TransportUnCaps.push(Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel._initializeFrom(original.TransportUnCaps[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_AgreementViewModel {
        var reduced = Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AgreementDocument:
    any;
public DateCreated:
    any;
public Id:
    any;
public Profile:
    any;
public TargetInventoryDays:
    any;
public Supplier:
    any;
public TransportUnCaps:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Agreement_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_Supplier_SupplierViewModel = new Agreement_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_Supplier_SupplierViewModel(original: Agreement_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_Supplier_SupplierViewModel {
        var reduced = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
}

export class Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,PercRound:
true,Status:
true,Tuc1:
true,UOP:
true,Warehouse:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["PercRound"] = true;
            this._members["Status"] = true;
            this._members["Tuc1"] = true;
            this._members["UOP"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Warehouse != null)
            instance.Warehouse = Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel = new Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_TransportUnCaps_TransportUnCapViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_TransportUnCaps_TransportUnCapViewModel(original: Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PercRound !== undefined) this.PercRound = original.PercRound;
        if(original.Status !== undefined) this.Status = original.Status;
        if(original.Tuc1 !== undefined) this.Tuc1 = original.Tuc1;
        if(original.UOP !== undefined) this.UOP = original.UOP;

        if(original.Warehouse !== undefined) this.Warehouse = Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel {
        var reduced = Agreement_Agreement_TransportUnCaps_TransportUnCapViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public PercRound:
    any;
public Status:
    any;
public Tuc1:
    any;
public UOP:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel = new Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel(original: Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel {
        var reduced = Agreement_Agreement_TransportUnCaps_TransportUnCap_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class DeliverySchedules_DeliveryScheduleViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,LeadTime:
true,NameOfDay:
true,Warehouse:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["LeadTime"] = true;
            this._members["NameOfDay"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Warehouse != null)
            instance.Warehouse = DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: DeliverySchedules_DeliveryScheduleViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): DeliverySchedules_DeliveryScheduleViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        DeliverySchedules_DeliveryScheduleViewModel = new DeliverySchedules_DeliveryScheduleViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateDeliverySchedules_DeliveryScheduleViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateDeliverySchedules_DeliveryScheduleViewModel(original: DeliverySchedules_DeliveryScheduleViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(original.NameOfDay !== undefined) this.NameOfDay = original.NameOfDay;

        if(original.Warehouse !== undefined) this.Warehouse = DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): DeliverySchedules_DeliveryScheduleViewModel {
        var reduced = DeliverySchedules_DeliveryScheduleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public LeadTime:
    any;
public NameOfDay:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel = new DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateDeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateDeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel(original: DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel {
        var reduced = DeliverySchedules_DeliverySchedule_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Items_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CoverageDays:
true,Description:
true,SKU:
true,BusinessUnit:
true,Category:
true,SubCategory:
true,BaseUnit:
                true
            }
        } else {
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["SKU"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Category"] = true;
            this._members["SubCategory"] = true;
            this._members["BaseUnit"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.BusinessUnit != null)
            instance.BusinessUnit = Items_Item_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);
        if(instance.Category != null)
            instance.Category = Items_Item_Category_CategoryViewModel._lightCast(instance.Category);
        if(instance.SubCategory != null)
            instance.SubCategory = Items_Item_SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory);
        if(instance.BaseUnit != null)
            instance.BaseUnit = Items_Item_BaseUnit_BaseUnitViewModel._lightCast(instance.BaseUnit);
        return instance;
    }

    public static _initializeFrom(original: Items_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Items_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Items_ItemViewModel = new Items_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItems_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItems_ItemViewModel(original: Items_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.SKU !== undefined) this.SKU = original.SKU;

        if(original.BusinessUnit !== undefined) this.BusinessUnit = Items_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Category !== undefined) this.Category = Items_Item_Category_CategoryViewModel._initializeFrom(original.Category, ignoreReadOnlyProperties, context);

        if(original.SubCategory !== undefined) this.SubCategory = Items_Item_SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory, ignoreReadOnlyProperties, context);

        if(original.BaseUnit !== undefined) this.BaseUnit = Items_Item_BaseUnit_BaseUnitViewModel._initializeFrom(original.BaseUnit, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Items_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Items_ItemViewModel {
        var reduced = Items_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CoverageDays:
    any;
public Description:
    any;
public SKU:
    any;
public BusinessUnit:
    any;
public Category:
    any;
public SubCategory:
    any;
public BaseUnit:
    any;
    public _versionTimestamp?: string;
}

export class Items_Item_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Items_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Items_Item_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Items_Item_BusinessUnit_BusinessUnitViewModel = new Items_Item_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItems_Item_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItems_Item_BusinessUnit_BusinessUnitViewModel(original: Items_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Items_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Items_Item_BusinessUnit_BusinessUnitViewModel {
        var reduced = Items_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Items_Item_Category_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Items_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Items_Item_Category_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Items_Item_Category_CategoryViewModel = new Items_Item_Category_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItems_Item_Category_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItems_Item_Category_CategoryViewModel(original: Items_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Items_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Items_Item_Category_CategoryViewModel {
        var reduced = Items_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Items_Item_SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Items_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Items_Item_SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Items_Item_SubCategory_SubCategoryViewModel = new Items_Item_SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItems_Item_SubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItems_Item_SubCategory_SubCategoryViewModel(original: Items_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Items_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Items_Item_SubCategory_SubCategoryViewModel {
        var reduced = Items_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Items_Item_BaseUnit_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Items_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Items_Item_BaseUnit_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Items_Item_BaseUnit_BaseUnitViewModel = new Items_Item_BaseUnit_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItems_Item_BaseUnit_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItems_Item_BaseUnit_BaseUnitViewModel(original: Items_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Items_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Items_Item_BaseUnit_BaseUnitViewModel {
        var reduced = Items_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,CoverageDays:
true,SafetyStock:
true,Status:
true,Item:
true,Warehouse:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["CoverageDays"] = true;
            this._members["SafetyStock"] = true;
            this._members["Status"] = true;
            this._members["Item"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Item != null)
            instance.Item = InventoryItems_InventoryItem_Item_ItemViewModel._lightCast(instance.Item);
        if(instance.Warehouse != null)
            instance.Warehouse = InventoryItems_InventoryItem_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItemViewModel = new InventoryItems_InventoryItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItemViewModel(original: InventoryItems_InventoryItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.SafetyStock !== undefined) this.SafetyStock = original.SafetyStock;
        if(original.Status !== undefined) this.Status = original.Status;

        if(original.Item !== undefined) this.Item = InventoryItems_InventoryItem_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.Warehouse !== undefined) this.Warehouse = InventoryItems_InventoryItem_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItemViewModel {
        var reduced = InventoryItems_InventoryItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public CoverageDays:
    any;
public SafetyStock:
    any;
public Status:
    any;
public Item:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
SKU:
true,Description:
true,UPC:
true,AvgDailyDemand:
true,CoverageDays:
true,PalletSize:
true,SupplierPackSize:
true,InnerPackSize:
true,PalletType:
true,PalTI:
true,PalHI:
true,UOM:
true,BusinessUnit:
true,Category:
true,SubCategory:
true,BaseUnit:
                true
            }
        } else {
            this._members["SKU"] = true;
            this._members["Description"] = true;
            this._members["UPC"] = true;
            this._members["AvgDailyDemand"] = true;
            this._members["CoverageDays"] = true;
            this._members["PalletSize"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["PalHI"] = true;
            this._members["UOM"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Category"] = true;
            this._members["SubCategory"] = true;
            this._members["BaseUnit"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.BusinessUnit != null)
            instance.BusinessUnit = InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);
        if(instance.Category != null)
            instance.Category = InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel._lightCast(instance.Category);
        if(instance.SubCategory != null)
            instance.SubCategory = InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel._lightCast(instance.SubCategory);
        if(instance.BaseUnit != null)
            instance.BaseUnit = InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel._lightCast(instance.BaseUnit);
        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Item_ItemViewModel = new InventoryItems_InventoryItem_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Item_ItemViewModel(original: InventoryItems_InventoryItem_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.UPC !== undefined) this.UPC = original.UPC;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        if(original.BusinessUnit !== undefined) this.BusinessUnit = InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Category !== undefined) this.Category = InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel._initializeFrom(original.Category, ignoreReadOnlyProperties, context);

        if(original.SubCategory !== undefined) this.SubCategory = InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(original.SubCategory, ignoreReadOnlyProperties, context);

        if(original.BaseUnit !== undefined) this.BaseUnit = InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(original.BaseUnit, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Item_ItemViewModel {
        var reduced = InventoryItems_InventoryItem_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public SKU:
    any;
public Description:
    any;
public UPC:
    any;
public AvgDailyDemand:
    any;
public CoverageDays:
    any;
public PalletSize:
    any;
public SupplierPackSize:
    any;
public InnerPackSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public PalHI:
    any;
public UOM:
    any;
public BusinessUnit:
    any;
public Category:
    any;
public SubCategory:
    any;
public BaseUnit:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel = new InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel(original: InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel {
        var reduced = InventoryItems_InventoryItem_Item_Item_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel = new InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel(original: InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel {
        var reduced = InventoryItems_InventoryItem_Item_Item_Category_CategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel = new InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel(original: InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel {
        var reduced = InventoryItems_InventoryItem_Item_Item_SubCategory_SubCategoryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Number:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Number"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel = new InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel(original: InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel {
        var reduced = InventoryItems_InventoryItem_Item_Item_BaseUnit_BaseUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Number:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

export class InventoryItems_InventoryItem_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Code:
true,Description:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Code"] = true;
            this._members["Description"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: InventoryItems_InventoryItem_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): InventoryItems_InventoryItem_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        InventoryItems_InventoryItem_Warehouse_WarehouseViewModel = new InventoryItems_InventoryItem_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateInventoryItems_InventoryItem_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateInventoryItems_InventoryItem_Warehouse_WarehouseViewModel(original: InventoryItems_InventoryItem_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = InventoryItems_InventoryItem_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): InventoryItems_InventoryItem_Warehouse_WarehouseViewModel {
        var reduced = InventoryItems_InventoryItem_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Code:
    any;
public Description:
    any;
    public _versionTimestamp?: string;
}

}
