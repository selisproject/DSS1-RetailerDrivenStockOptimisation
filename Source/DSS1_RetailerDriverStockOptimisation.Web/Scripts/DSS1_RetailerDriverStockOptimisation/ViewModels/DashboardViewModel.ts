// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.Dashboard {
export class DashboardViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
TotalUsers:
true,TotalOperations:
true,TotalPermissions:
true,dateNow:
true,ActiveUsername:
true,Locale:
                true
            }
        } else {
            this._members["TotalUsers"] = true;
            this._members["TotalOperations"] = true;
            this._members["TotalPermissions"] = true;
            this._members["dateNow"] = true;
            this._members["ActiveUsername"] = true;
            this._members["Locale"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.dateNow != null) instance.dateNow = new Date(instance.dateNow);
        return instance;
    }

    public static _initializeFrom(original: DashboardViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): DashboardViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        DashboardViewModel = new DashboardViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateDashboardViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateDashboardViewModel(original: DashboardViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.TotalUsers !== undefined) this.TotalUsers = original.TotalUsers;
        if(original.TotalOperations !== undefined) this.TotalOperations = original.TotalOperations;
        if(original.TotalPermissions !== undefined) this.TotalPermissions = original.TotalPermissions;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.dateNow)) this.dateNow = new Date(original.dateNow);
        if(original.ActiveUsername !== undefined) this.ActiveUsername = original.ActiveUsername;
        if(original.Locale !== undefined) this.Locale = original.Locale;
        this.ChartSelectedItemKeys = original.ChartSelectedItemKeys;
        this.Chart1SelectedItemKeys = original.Chart1SelectedItemKeys;
        this.Chart11SelectedItemKeys = original.Chart11SelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = DashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            DashboardViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): DashboardViewModel {
        var reduced = DashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        DashboardViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: DashboardViewModel) {
        if (reduced == null) return;


        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public TotalUsers:
    any;
public TotalOperations:
    any;
public TotalPermissions:
    any;
public dateNow:
    any;
public ActiveUsername:
    any;
public Locale:
    any;
public ChartSelectedItemKeys:
    any[];
public Chart1SelectedItemKeys:
    any[];
public Chart11SelectedItemKeys:
    any[];
}

}
