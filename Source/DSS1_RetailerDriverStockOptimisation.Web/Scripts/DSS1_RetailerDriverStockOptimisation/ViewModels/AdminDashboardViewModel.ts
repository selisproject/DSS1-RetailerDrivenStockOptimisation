// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.AdminDashboard {
export class AdminDashboardViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Agreements:
true,OrderForecasts:
                true
            }
        } else {
            this._members["Agreements"] = true;
            this._members["OrderForecasts"] = true;
        }

        this.Agreements = new Array<any>();
        this.OrderForecasts = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Agreements != null) {
            for(let i = 0; i < instance.Agreements.length; i++) {
                instance.Agreements[i] = Agreements_AgreementViewModel._lightCast(instance.Agreements[i]);

            }
        }

        if(instance.OrderForecasts != null) {
            for(let i = 0; i < instance.OrderForecasts.length; i++) {
                instance.OrderForecasts[i] = OrderForecasts_OrderForecastDetailsViewModel._lightCast(instance.OrderForecasts[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: AdminDashboardViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): AdminDashboardViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        AdminDashboardViewModel = new AdminDashboardViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAdminDashboardViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAdminDashboardViewModel(original: AdminDashboardViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Agreements != null) {
            for(let i = 0; i < original.Agreements.length; i++) {
                this.Agreements.push(Agreements_AgreementViewModel._initializeFrom(original.Agreements[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.OrderForecasts != null) {
            for(let i = 0; i < original.OrderForecasts.length; i++) {
                this.OrderForecasts.push(OrderForecasts_OrderForecastDetailsViewModel._initializeFrom(original.OrderForecasts[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = AdminDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            AdminDashboardViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): AdminDashboardViewModel {
        var reduced = AdminDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        AdminDashboardViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: AdminDashboardViewModel) {
        if (reduced == null) return;


        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Agreements:
    Array<any>;
public OrderForecasts:
    Array<any>;
}

export class Agreements_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AgreementDocument:
true,DateCreated:
true,FullTruckLoad:
true,Id:
true,LeadTime:
true,Profile:
true,TargetInventoryDays:
true,WDDeliveries:
true,AgreementStatuses:
true,Items:
true,Supplier:
true,Warehouses:
                true
            }
        } else {
            this._members["AgreementDocument"] = true;
            this._members["DateCreated"] = true;
            this._members["FullTruckLoad"] = true;
            this._members["Id"] = true;
            this._members["LeadTime"] = true;
            this._members["Profile"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["WDDeliveries"] = true;
            this._members["AgreementStatuses"] = true;
            this._members["Items"] = true;
            this._members["Supplier"] = true;
            this._members["Warehouses"] = true;
        }

        this.AgreementStatuses = new Array<any>();
        this.Items = new Array<any>();
        this.Warehouses = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateCreated != null) instance.DateCreated = new Date(instance.DateCreated);

        if(instance.AgreementStatuses != null) {
            for(let i = 0; i < instance.AgreementStatuses.length; i++) {
                instance.AgreementStatuses[i] = Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel._lightCast(instance.AgreementStatuses[i]);

            }
        }

        if(instance.Items != null) {
            for(let i = 0; i < instance.Items.length; i++) {
                instance.Items[i] = Agreements_Agreement_Items_ItemViewModel._lightCast(instance.Items[i]);

            }
        }
        if(instance.Supplier != null)
            instance.Supplier = Agreements_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);

        if(instance.Warehouses != null) {
            for(let i = 0; i < instance.Warehouses.length; i++) {
                instance.Warehouses[i] = Agreements_Agreement_Warehouses_WarehouseViewModel._lightCast(instance.Warehouses[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Agreements_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreements_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreements_AgreementViewModel = new Agreements_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreements_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreements_AgreementViewModel(original: Agreements_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AgreementDocument !== undefined) this.AgreementDocument = original.AgreementDocument;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateCreated)) this.DateCreated = new Date(original.DateCreated);
        if(original.FullTruckLoad !== undefined) this.FullTruckLoad = original.FullTruckLoad;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(original.Profile !== undefined) this.Profile = original.Profile;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;
        if(original.WDDeliveries !== undefined) this.WDDeliveries = original.WDDeliveries;

        if(original.AgreementStatuses != null) {
            for(let i = 0; i < original.AgreementStatuses.length; i++) {
                this.AgreementStatuses.push(Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel._initializeFrom(original.AgreementStatuses[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Items != null) {
            for(let i = 0; i < original.Items.length; i++) {
                this.Items.push(Agreements_Agreement_Items_ItemViewModel._initializeFrom(original.Items[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Supplier !== undefined) this.Supplier = Agreements_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.Warehouses != null) {
            for(let i = 0; i < original.Warehouses.length; i++) {
                this.Warehouses.push(Agreements_Agreement_Warehouses_WarehouseViewModel._initializeFrom(original.Warehouses[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreements_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreements_AgreementViewModel {
        var reduced = Agreements_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AgreementDocument:
    any;
public DateCreated:
    any;
public FullTruckLoad:
    any;
public Id:
    any;
public LeadTime:
    any;
public Profile:
    any;
public TargetInventoryDays:
    any;
public WDDeliveries:
    any;
public AgreementStatuses:
    Array<any>;
public Items:
    Array<any>;
public Supplier:
    any;
public Warehouses:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Active:
true,ApprovedBySonae:
true,ApprovedBySupplier:
true,DateIssued:
true,Id:
true,InProgress:
true,IssuedBy:
true,Status:
true,UnderRevision:
                true
            }
        } else {
            this._members["Active"] = true;
            this._members["ApprovedBySonae"] = true;
            this._members["ApprovedBySupplier"] = true;
            this._members["DateIssued"] = true;
            this._members["Id"] = true;
            this._members["InProgress"] = true;
            this._members["IssuedBy"] = true;
            this._members["Status"] = true;
            this._members["UnderRevision"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel = new Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreements_Agreement_AgreementStatuses_AgreementStatusViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreements_Agreement_AgreementStatuses_AgreementStatusViewModel(original: Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Active !== undefined) this.Active = original.Active;
        if(original.ApprovedBySonae !== undefined) this.ApprovedBySonae = original.ApprovedBySonae;
        if(original.ApprovedBySupplier !== undefined) this.ApprovedBySupplier = original.ApprovedBySupplier;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InProgress !== undefined) this.InProgress = original.InProgress;
        if(original.IssuedBy !== undefined) this.IssuedBy = original.IssuedBy;
        if(original.Status !== undefined) this.Status = original.Status;
        if(original.UnderRevision !== undefined) this.UnderRevision = original.UnderRevision;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel {
        var reduced = Agreements_Agreement_AgreementStatuses_AgreementStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Active:
    any;
public ApprovedBySonae:
    any;
public ApprovedBySupplier:
    any;
public DateIssued:
    any;
public Id:
    any;
public InProgress:
    any;
public IssuedBy:
    any;
public Status:
    any;
public UnderRevision:
    any;
    public _versionTimestamp?: string;
}

export class Agreements_Agreement_Items_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AvgDailyDemand:
true,Description:
true,SKU:
true,UPC:
                true
            }
        } else {
            this._members["AvgDailyDemand"] = true;
            this._members["Description"] = true;
            this._members["SKU"] = true;
            this._members["UPC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreements_Agreement_Items_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreements_Agreement_Items_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreements_Agreement_Items_ItemViewModel = new Agreements_Agreement_Items_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreements_Agreement_Items_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreements_Agreement_Items_ItemViewModel(original: Agreements_Agreement_Items_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.UPC !== undefined) this.UPC = original.UPC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreements_Agreement_Items_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreements_Agreement_Items_ItemViewModel {
        var reduced = Agreements_Agreement_Items_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AvgDailyDemand:
    any;
public Description:
    any;
public SKU:
    any;
public UPC:
    any;
    public _versionTimestamp?: string;
}

export class Agreements_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreements_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreements_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreements_Agreement_Supplier_SupplierViewModel = new Agreements_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreements_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreements_Agreement_Supplier_SupplierViewModel(original: Agreements_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreements_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreements_Agreement_Supplier_SupplierViewModel {
        var reduced = Agreements_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
}

export class Agreements_Agreement_Warehouses_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Description:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreements_Agreement_Warehouses_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreements_Agreement_Warehouses_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreements_Agreement_Warehouses_WarehouseViewModel = new Agreements_Agreement_Warehouses_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreements_Agreement_Warehouses_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreements_Agreement_Warehouses_WarehouseViewModel(original: Agreements_Agreement_Warehouses_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreements_Agreement_Warehouses_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreements_Agreement_Warehouses_WarehouseViewModel {
        var reduced = Agreements_Agreement_Warehouses_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class OrderForecasts_OrderForecastDetailsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AutomatedForecast:
true,Id:
true,OrderInventoryDays:
true,Quantity:
true,RecommendedOrderDate:
true,ReplenishmentCycle:
true,RoundQuantity:
true,SalesForecastDate:
true,SupplierCanDeliver:
true,SupplierMaxQuantity:
true,Warehouse:
true,Item:
                true
            }
        } else {
            this._members["AutomatedForecast"] = true;
            this._members["Id"] = true;
            this._members["OrderInventoryDays"] = true;
            this._members["Quantity"] = true;
            this._members["RecommendedOrderDate"] = true;
            this._members["ReplenishmentCycle"] = true;
            this._members["RoundQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["SupplierCanDeliver"] = true;
            this._members["SupplierMaxQuantity"] = true;
            this._members["Warehouse"] = true;
            this._members["Item"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.RecommendedOrderDate != null) instance.RecommendedOrderDate = new Date(instance.RecommendedOrderDate);
        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        if(instance.Warehouse != null)
            instance.Warehouse = OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        if(instance.Item != null)
            instance.Item = OrderForecasts_OrderForecastDetails_Item_ItemViewModel._lightCast(instance.Item);
        return instance;
    }

    public static _initializeFrom(original: OrderForecasts_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): OrderForecasts_OrderForecastDetailsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        OrderForecasts_OrderForecastDetailsViewModel = new OrderForecasts_OrderForecastDetailsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateOrderForecasts_OrderForecastDetailsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateOrderForecasts_OrderForecastDetailsViewModel(original: OrderForecasts_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AutomatedForecast !== undefined) this.AutomatedForecast = original.AutomatedForecast;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.OrderInventoryDays !== undefined) this.OrderInventoryDays = original.OrderInventoryDays;
        if(original.Quantity !== undefined) this.Quantity = original.Quantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.RecommendedOrderDate)) this.RecommendedOrderDate = new Date(original.RecommendedOrderDate);
        if(original.ReplenishmentCycle !== undefined) this.ReplenishmentCycle = original.ReplenishmentCycle;
        if(original.RoundQuantity !== undefined) this.RoundQuantity = original.RoundQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.SupplierCanDeliver !== undefined) this.SupplierCanDeliver = original.SupplierCanDeliver;
        if(original.SupplierMaxQuantity !== undefined) this.SupplierMaxQuantity = original.SupplierMaxQuantity;

        if(original.Warehouse !== undefined) this.Warehouse = OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        if(original.Item !== undefined) this.Item = OrderForecasts_OrderForecastDetails_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = OrderForecasts_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): OrderForecasts_OrderForecastDetailsViewModel {
        var reduced = OrderForecasts_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AutomatedForecast:
    any;
public Id:
    any;
public OrderInventoryDays:
    any;
public Quantity:
    any;
public RecommendedOrderDate:
    any;
public ReplenishmentCycle:
    any;
public RoundQuantity:
    any;
public SalesForecastDate:
    any;
public SupplierCanDeliver:
    any;
public SupplierMaxQuantity:
    any;
public Warehouse:
    any;
public Item:
    any;
}

export class OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Description:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Description"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel = new OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateOrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateOrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel(original: OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel {
        var reduced = OrderForecasts_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Description:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class OrderForecasts_OrderForecastDetails_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AvgDailyDemand:
true,Description:
true,SKU:
true,UPC:
                true
            }
        } else {
            this._members["AvgDailyDemand"] = true;
            this._members["Description"] = true;
            this._members["SKU"] = true;
            this._members["UPC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: OrderForecasts_OrderForecastDetails_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): OrderForecasts_OrderForecastDetails_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        OrderForecasts_OrderForecastDetails_Item_ItemViewModel = new OrderForecasts_OrderForecastDetails_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateOrderForecasts_OrderForecastDetails_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateOrderForecasts_OrderForecastDetails_Item_ItemViewModel(original: OrderForecasts_OrderForecastDetails_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.UPC !== undefined) this.UPC = original.UPC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = OrderForecasts_OrderForecastDetails_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): OrderForecasts_OrderForecastDetails_Item_ItemViewModel {
        var reduced = OrderForecasts_OrderForecastDetails_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AvgDailyDemand:
    any;
public Description:
    any;
public SKU:
    any;
public UPC:
    any;
    public _versionTimestamp?: string;
}

}
