// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard {
export class KPIDashboardViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
SuppliersInSelectedForecast:
true,SelectedForecast:
true,ItemsInSelectedForecast:
true,ToDate:
true,FromDate:
true,SelectedSKUs:
true,SelectedSKU:
true,Supplier:
true,FlowType:
                true
            }
        } else {
            this._members["SuppliersInSelectedForecast"] = true;
            this._members["SelectedForecast"] = true;
            this._members["ItemsInSelectedForecast"] = true;
            this._members["ToDate"] = true;
            this._members["FromDate"] = true;
            this._members["SelectedSKUs"] = true;
            this._members["SelectedSKU"] = true;
            this._members["Supplier"] = true;
            this._members["FlowType"] = true;
        }

        this.SuppliersInSelectedForecast = new Array<any>();
        this.ItemsInSelectedForecast = new Array<any>();
        this.SelectedSKUs = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < instance.SuppliersInSelectedForecast.length; i++) {
                instance.SuppliersInSelectedForecast[i] = SuppliersInSelectedForecast_AgreementViewModel._lightCast(instance.SuppliersInSelectedForecast[i]);

            }
        }
        if(instance.SelectedForecast != null)
            instance.SelectedForecast = SelectedForecast_OrderForecastViewModel._lightCast(instance.SelectedForecast);

        if(instance.ItemsInSelectedForecast != null) {
            for(let i = 0; i < instance.ItemsInSelectedForecast.length; i++) {
                instance.ItemsInSelectedForecast[i] = ItemsInSelectedForecast_ItemViewModel._lightCast(instance.ItemsInSelectedForecast[i]);

            }
        }
        if(instance.ToDate != null) instance.ToDate = new Date(instance.ToDate);
        if(instance.FromDate != null) instance.FromDate = new Date(instance.FromDate);

        if(instance.SelectedSKUs != null) {
            for(let i = 0; i < instance.SelectedSKUs.length; i++) {
                instance.SelectedSKUs[i] = SelectedSKUs_ItemViewModel._lightCast(instance.SelectedSKUs[i]);

            }
        }
        if(instance.SelectedSKU != null)
            instance.SelectedSKU = SelectedSKU_ItemViewModel._lightCast(instance.SelectedSKU);
        if(instance.Supplier != null)
            instance.Supplier = Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: KPIDashboardViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): KPIDashboardViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        KPIDashboardViewModel = new KPIDashboardViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateKPIDashboardViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateKPIDashboardViewModel(original: KPIDashboardViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < original.SuppliersInSelectedForecast.length; i++) {
                this.SuppliersInSelectedForecast.push(SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(original.SuppliersInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedForecast !== undefined) this.SelectedForecast = SelectedForecast_OrderForecastViewModel._initializeFrom(original.SelectedForecast, ignoreReadOnlyProperties, context);

        if(original.ItemsInSelectedForecast != null) {
            for(let i = 0; i < original.ItemsInSelectedForecast.length; i++) {
                this.ItemsInSelectedForecast.push(ItemsInSelectedForecast_ItemViewModel._initializeFrom(original.ItemsInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ToDate)) this.ToDate = new Date(original.ToDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.FromDate)) this.FromDate = new Date(original.FromDate);

        if(original.SelectedSKUs != null) {
            for(let i = 0; i < original.SelectedSKUs.length; i++) {
                this.SelectedSKUs.push(SelectedSKUs_ItemViewModel._initializeFrom(original.SelectedSKUs[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedSKU !== undefined) this.SelectedSKU = SelectedSKU_ItemViewModel._initializeFrom(original.SelectedSKU, ignoreReadOnlyProperties, context);

        if(original.Supplier !== undefined) this.Supplier = Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;
        if (original.ddlSKUs__InitialSelection !== undefined) this.ddlSKUs__InitialSelection = original.ddlSKUs__InitialSelection;
        this.listSuppliersSelectedItemKeys = original.listSuppliersSelectedItemKeys;
        this.listWarehousesSelectedItemKeys = original.listWarehousesSelectedItemKeys;
        this.listBusinessUnitsSelectedItemKeys = original.listBusinessUnitsSelectedItemKeys;
        this.listCategoriesSelectedItemKeys = original.listCategoriesSelectedItemKeys;
        this.listSubcategoriesSelectedItemKeys = original.listSubcategoriesSelectedItemKeys;
        this.ddlSubcategorySelectedItemKeys = original.ddlSubcategorySelectedItemKeys;
        this.listBaseUnitsSelectedItemKeys = original.listBaseUnitsSelectedItemKeys;
        this.listSKUsSelectedItemKeys = original.listSKUsSelectedItemKeys;
        this.ddlSKUsSelectedItemKeys = original.ddlSKUsSelectedItemKeys;
        this.chartStockLevelsInvDaysSelectedItemKeys = original.chartStockLevelsInvDaysSelectedItemKeys;
        this.chartStockLevelsUnitsSelectedItemKeys = original.chartStockLevelsUnitsSelectedItemKeys;
        this.chartSLALeadTimeSelectedItemKeys = original.chartSLALeadTimeSelectedItemKeys;
        this.chartSLADeliverySelectedItemKeys = original.chartSLADeliverySelectedItemKeys;
        this.chartWasteSelectedItemKeys = original.chartWasteSelectedItemKeys;
        this.chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = KPIDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            KPIDashboardViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): KPIDashboardViewModel {
        var reduced = KPIDashboardViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        KPIDashboardViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: KPIDashboardViewModel) {
        if (reduced == null) return;

        delete reduced.ddlSKUs__InitialSelection;

        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public SuppliersInSelectedForecast:
    Array<any>;
public SelectedForecast:
    any;
public ItemsInSelectedForecast:
    Array<any>;
public ToDate:
    any;
public FromDate:
    any;
public SelectedSKUs:
    Array<any>;
public SelectedSKU:
    any;
public Supplier:
    any;
public FlowType:
    any;
public ddlSKUs__InitialSelection:
    any;
public listSuppliersSelectedItemKeys:
    any[];
public listWarehousesSelectedItemKeys:
    any[];
public listBusinessUnitsSelectedItemKeys:
    any[];
public listCategoriesSelectedItemKeys:
    any[];
public listSubcategoriesSelectedItemKeys:
    any[];
public ddlSubcategorySelectedItemKeys:
    any[];
public listBaseUnitsSelectedItemKeys:
    any[];
public listSKUsSelectedItemKeys:
    any[];
public ddlSKUsSelectedItemKeys:
    any[];
public chartStockLevelsInvDaysSelectedItemKeys:
    any[];
public chartStockLevelsUnitsSelectedItemKeys:
    any[];
public chartSLALeadTimeSelectedItemKeys:
    any[];
public chartSLADeliverySelectedItemKeys:
    any[];
public chartWasteSelectedItemKeys:
    any[];
public chartOrderForecastSelectedItemKeys:
    any[];
}

export class SuppliersInSelectedForecast_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,TargetInventoryDays:
true,Supplier:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["Supplier"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Supplier != null)
            instance.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_AgreementViewModel = new SuppliersInSelectedForecast_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_AgreementViewModel(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;

        if(original.Supplier !== undefined) this.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_AgreementViewModel {
        var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public TargetInventoryDays:
    any;
public Supplier:
    any;
    public _versionTimestamp?: string;
}

export class SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Name:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel = new SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Name:
    any;
}

export class SelectedForecast_OrderForecastViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,CreatedOn:
true,EndDate:
true,Id:
true,StartDate:
true,State:
true,Status:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["CreatedOn"] = true;
            this._members["EndDate"] = true;
            this._members["Id"] = true;
            this._members["StartDate"] = true;
            this._members["State"] = true;
            this._members["Status"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.EndDate != null) instance.EndDate = new Date(instance.EndDate);
        if(instance.StartDate != null) instance.StartDate = new Date(instance.StartDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedForecast_OrderForecastViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedForecast_OrderForecastViewModel = new SelectedForecast_OrderForecastViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedForecast_OrderForecastViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedForecast_OrderForecastViewModel(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.EndDate)) this.EndDate = new Date(original.EndDate);
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StartDate)) this.StartDate = new Date(original.StartDate);
        if(original.State !== undefined) this.State = original.State;
        if(original.Status !== undefined) this.Status = original.Status;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedForecast_OrderForecastViewModel {
        var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public CreatedOn:
    any;
public EndDate:
    any;
public Id:
    any;
public StartDate:
    any;
public State:
    any;
public Status:
    any;
}

export class ItemsInSelectedForecast_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ItemsInSelectedForecast_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ItemsInSelectedForecast_ItemViewModel = new ItemsInSelectedForecast_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItemsInSelectedForecast_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItemsInSelectedForecast_ItemViewModel(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ItemsInSelectedForecast_ItemViewModel {
        var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_ItemViewModel = new SelectedSKUs_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_ItemViewModel(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_ItemViewModel {
        var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKU_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKU_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKU_ItemViewModel = new SelectedSKU_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKU_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKU_ItemViewModel(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKU_ItemViewModel {
        var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
true,BusinessUnit:
true,Contacts:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Contacts"] = true;
        }

        this.Contacts = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.BusinessUnit != null)
            instance.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);

        if(instance.Contacts != null) {
            for(let i = 0; i < instance.Contacts.length; i++) {
                instance.Contacts[i] = Supplier_Supplier_Contacts_ContactViewModel._lightCast(instance.Contacts[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_SupplierViewModel = new Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_SupplierViewModel(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        if(original.BusinessUnit !== undefined) this.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Contacts != null) {
            for(let i = 0; i < original.Contacts.length; i++) {
                this.Contacts.push(Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(original.Contacts[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_SupplierViewModel {
        var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
public BusinessUnit:
    any;
public Contacts:
    Array<any>;
}

export class Supplier_Supplier_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_BusinessUnit_BusinessUnitViewModel = new Supplier_Supplier_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_Supplier_Contacts_ContactViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AccessFailedCount:
true,Email:
true,EmailConfirmed:
true,Id:
true,LockoutEnabled:
true,LockoutEndDate:
true,Name:
true,PhoneNumber:
true,PhoneNumberConfirmed:
true,TwoFactorEnabled:
true,UserName:
                true
            }
        } else {
            this._members["AccessFailedCount"] = true;
            this._members["Email"] = true;
            this._members["EmailConfirmed"] = true;
            this._members["Id"] = true;
            this._members["LockoutEnabled"] = true;
            this._members["LockoutEndDate"] = true;
            this._members["Name"] = true;
            this._members["PhoneNumber"] = true;
            this._members["PhoneNumberConfirmed"] = true;
            this._members["TwoFactorEnabled"] = true;
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.LockoutEndDate != null) instance.LockoutEndDate = new Date(instance.LockoutEndDate);
        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_Contacts_ContactViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_Contacts_ContactViewModel = new Supplier_Supplier_Contacts_ContactViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_Contacts_ContactViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_Contacts_ContactViewModel(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AccessFailedCount !== undefined) this.AccessFailedCount = original.AccessFailedCount;
        if(original.Email !== undefined) this.Email = original.Email;
        if(original.EmailConfirmed !== undefined) this.EmailConfirmed = original.EmailConfirmed;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LockoutEnabled !== undefined) this.LockoutEnabled = original.LockoutEnabled;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.LockoutEndDate)) this.LockoutEndDate = new Date(original.LockoutEndDate);
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.PhoneNumber !== undefined) this.PhoneNumber = original.PhoneNumber;
        if(original.PhoneNumberConfirmed !== undefined) this.PhoneNumberConfirmed = original.PhoneNumberConfirmed;
        if(original.TwoFactorEnabled !== undefined) this.TwoFactorEnabled = original.TwoFactorEnabled;
        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_Contacts_ContactViewModel {
        var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AccessFailedCount:
    any;
public Email:
    any;
public EmailConfirmed:
    any;
public Id:
    any;
public LockoutEnabled:
    any;
public LockoutEndDate:
    any;
public Name:
    any;
public PhoneNumber:
    any;
public PhoneNumberConfirmed:
    any;
public TwoFactorEnabled:
    any;
public UserName:
    any;
}

}
