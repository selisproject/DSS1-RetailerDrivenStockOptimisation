// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.ViewModels.SupplierView {
export class SupplierViewViewModel extends DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
SuppliersInSelectedForecast:
true,SelectedForecast:
true,ItemsInSelectedForecast:
true,ToDate:
true,FromDate:
true,SelectedSKUs:
true,SelectedSKU:
true,CollapseLeftColumn:
true,CollapseRightColumn:
true,Supplier:
true,SelectedOrderFDetails:
true,Recommendations:
true,ShowAlerts:
true,ShowRecommendations:
true,FilterList:
true,Alerts:
true,AlertsCount:
true,SupplierParameters:
true,SupplierReplied:
true,RecommendationsCount:
true,FlowType:
                true
            }
        } else {
            this._members["SuppliersInSelectedForecast"] = true;
            this._members["SelectedForecast"] = true;
            this._members["ItemsInSelectedForecast"] = true;
            this._members["ToDate"] = true;
            this._members["FromDate"] = true;
            this._members["SelectedSKUs"] = true;
            this._members["SelectedSKU"] = true;
            this._members["CollapseLeftColumn"] = true;
            this._members["CollapseRightColumn"] = true;
            this._members["Supplier"] = true;
            this._members["SelectedOrderFDetails"] = true;
            this._members["Recommendations"] = true;
            this._members["ShowAlerts"] = true;
            this._members["ShowRecommendations"] = true;
            this._members["FilterList"] = true;
            this._members["Alerts"] = true;
            this._members["AlertsCount"] = true;
            this._members["SupplierParameters"] = true;
            this._members["SupplierReplied"] = true;
            this._members["RecommendationsCount"] = true;
            this._members["FlowType"] = true;
        }

        this.SuppliersInSelectedForecast = new Array<any>();
        this.ItemsInSelectedForecast = new Array<any>();
        this.SelectedSKUs = new Array<any>();
        this.SelectedOrderFDetails = new Array<any>();
        this.Recommendations = new Array<any>();
        this.Alerts = new Array<any>();
        this.SupplierParameters = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < instance.SuppliersInSelectedForecast.length; i++) {
                instance.SuppliersInSelectedForecast[i] = SuppliersInSelectedForecast_AgreementViewModel._lightCast(instance.SuppliersInSelectedForecast[i]);

            }
        }
        if(instance.SelectedForecast != null)
            instance.SelectedForecast = SelectedForecast_OrderForecastViewModel._lightCast(instance.SelectedForecast);

        if(instance.ItemsInSelectedForecast != null) {
            for(let i = 0; i < instance.ItemsInSelectedForecast.length; i++) {
                instance.ItemsInSelectedForecast[i] = ItemsInSelectedForecast_ItemViewModel._lightCast(instance.ItemsInSelectedForecast[i]);

            }
        }
        if(instance.ToDate != null) instance.ToDate = new Date(instance.ToDate);
        if(instance.FromDate != null) instance.FromDate = new Date(instance.FromDate);

        if(instance.SelectedSKUs != null) {
            for(let i = 0; i < instance.SelectedSKUs.length; i++) {
                instance.SelectedSKUs[i] = SelectedSKUs_ItemViewModel._lightCast(instance.SelectedSKUs[i]);

            }
        }
        if(instance.SelectedSKU != null)
            instance.SelectedSKU = SelectedSKU_ItemViewModel._lightCast(instance.SelectedSKU);
        if(instance.Supplier != null)
            instance.Supplier = Supplier_SupplierViewModel._lightCast(instance.Supplier);

        if(instance.SelectedOrderFDetails != null) {
            for(let i = 0; i < instance.SelectedOrderFDetails.length; i++) {
                instance.SelectedOrderFDetails[i] = SelectedOrderFDetails_OrderForecastDetailsViewModel._lightCast(instance.SelectedOrderFDetails[i]);

            }
        }

        if(instance.Recommendations != null) {
            for(let i = 0; i < instance.Recommendations.length; i++) {
                instance.Recommendations[i] = Recommendations_NotificationViewModel._lightCast(instance.Recommendations[i]);

            }
        }

        if(instance.Alerts != null) {
            for(let i = 0; i < instance.Alerts.length; i++) {
                instance.Alerts[i] = Alerts_NotificationViewModel._lightCast(instance.Alerts[i]);

            }
        }

        if(instance.SupplierParameters != null) {
            for(let i = 0; i < instance.SupplierParameters.length; i++) {
                instance.SupplierParameters[i] = SupplierParameters_SupplierParameterViewModel._lightCast(instance.SupplierParameters[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: SupplierViewViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SupplierViewViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SupplierViewViewModel = new SupplierViewViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplierViewViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplierViewViewModel(original: SupplierViewViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.SuppliersInSelectedForecast != null) {
            for(let i = 0; i < original.SuppliersInSelectedForecast.length; i++) {
                this.SuppliersInSelectedForecast.push(SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(original.SuppliersInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedForecast !== undefined) this.SelectedForecast = SelectedForecast_OrderForecastViewModel._initializeFrom(original.SelectedForecast, ignoreReadOnlyProperties, context);

        if(original.ItemsInSelectedForecast != null) {
            for(let i = 0; i < original.ItemsInSelectedForecast.length; i++) {
                this.ItemsInSelectedForecast.push(ItemsInSelectedForecast_ItemViewModel._initializeFrom(original.ItemsInSelectedForecast[i], ignoreReadOnlyProperties, context));
            }
        }
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ToDate)) this.ToDate = new Date(original.ToDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.FromDate)) this.FromDate = new Date(original.FromDate);

        if(original.SelectedSKUs != null) {
            for(let i = 0; i < original.SelectedSKUs.length; i++) {
                this.SelectedSKUs.push(SelectedSKUs_ItemViewModel._initializeFrom(original.SelectedSKUs[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.SelectedSKU !== undefined) this.SelectedSKU = SelectedSKU_ItemViewModel._initializeFrom(original.SelectedSKU, ignoreReadOnlyProperties, context);
        if(original.CollapseLeftColumn !== undefined) this.CollapseLeftColumn = original.CollapseLeftColumn;
        if(original.CollapseRightColumn !== undefined) this.CollapseRightColumn = original.CollapseRightColumn;

        if(original.Supplier !== undefined) this.Supplier = Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.SelectedOrderFDetails != null) {
            for(let i = 0; i < original.SelectedOrderFDetails.length; i++) {
                this.SelectedOrderFDetails.push(SelectedOrderFDetails_OrderForecastDetailsViewModel._initializeFrom(original.SelectedOrderFDetails[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Recommendations != null) {
            for(let i = 0; i < original.Recommendations.length; i++) {
                this.Recommendations.push(Recommendations_NotificationViewModel._initializeFrom(original.Recommendations[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.ShowAlerts !== undefined) this.ShowAlerts = original.ShowAlerts;
        if(original.ShowRecommendations !== undefined) this.ShowRecommendations = original.ShowRecommendations;
        if(original.FilterList !== undefined) this.FilterList = original.FilterList;

        if(original.Alerts != null) {
            for(let i = 0; i < original.Alerts.length; i++) {
                this.Alerts.push(Alerts_NotificationViewModel._initializeFrom(original.Alerts[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.AlertsCount !== undefined) this.AlertsCount = original.AlertsCount;

        if(original.SupplierParameters != null) {
            for(let i = 0; i < original.SupplierParameters.length; i++) {
                this.SupplierParameters.push(SupplierParameters_SupplierParameterViewModel._initializeFrom(original.SupplierParameters[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.SupplierReplied !== undefined) this.SupplierReplied = original.SupplierReplied;
        if(original.RecommendationsCount !== undefined) this.RecommendationsCount = original.RecommendationsCount;
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;
        if (original.ddlSKUs__InitialSelection !== undefined) this.ddlSKUs__InitialSelection = original.ddlSKUs__InitialSelection;
        this.listWarehousesSelectedItemKeys = original.listWarehousesSelectedItemKeys;
        this.listSKUsSelectedItemKeys = original.listSKUsSelectedItemKeys;
        this.ddlSKUsSelectedItemKeys = original.ddlSKUsSelectedItemKeys;
        this.DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItemKeys;
        this.lstOrderForecastsSelectedItemKeys = original.lstOrderForecastsSelectedItemKeys;
        this.chartOrderForecastSelectedItemKeys = original.chartOrderForecastSelectedItemKeys;
        this.chartStockLevelsSelectedItemKeys = original.chartStockLevelsSelectedItemKeys;
        this.OptionButtonSelectedItemKeys = original.OptionButtonSelectedItemKeys;
        this.listOrderForecastDetailsSelectedItemKeys = original.listOrderForecastDetailsSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SupplierViewViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            SupplierViewViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SupplierViewViewModel {
        var reduced = SupplierViewViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        SupplierViewViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: SupplierViewViewModel) {
        if (reduced == null) return;

        delete reduced.ddlSKUs__InitialSelection;

        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public SuppliersInSelectedForecast:
    Array<any>;
public SelectedForecast:
    any;
public ItemsInSelectedForecast:
    Array<any>;
public ToDate:
    any;
public FromDate:
    any;
public SelectedSKUs:
    Array<any>;
public SelectedSKU:
    any;
public CollapseLeftColumn:
    any;
public CollapseRightColumn:
    any;
public Supplier:
    any;
public SelectedOrderFDetails:
    Array<any>;
public Recommendations:
    Array<any>;
public ShowAlerts:
    any;
public ShowRecommendations:
    any;
public FilterList:
    any;
public Alerts:
    Array<any>;
public AlertsCount:
    any;
public SupplierParameters:
    Array<any>;
public SupplierReplied:
    any;
public RecommendationsCount:
    any;
public FlowType:
    any;
public ddlSKUs__InitialSelection:
    any;
public listWarehousesSelectedItemKeys:
    any[];
public listSKUsSelectedItemKeys:
    any[];
public ddlSKUsSelectedItemKeys:
    any[];
public DropdownBoxSelectedItemKeys:
    any[];
public lstOrderForecastsSelectedItemKeys:
    any[];
public chartOrderForecastSelectedItemKeys:
    any[];
public chartStockLevelsSelectedItemKeys:
    any[];
public OptionButtonSelectedItemKeys:
    any[];
public listOrderForecastDetailsSelectedItemKeys:
    any[];
}

export class SuppliersInSelectedForecast_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,TargetInventoryDays:
true,Supplier:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["Supplier"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Supplier != null)
            instance.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);
        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_AgreementViewModel = new SuppliersInSelectedForecast_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_AgreementViewModel(original: SuppliersInSelectedForecast_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;

        if(original.Supplier !== undefined) this.Supplier = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_AgreementViewModel {
        var reduced = SuppliersInSelectedForecast_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public TargetInventoryDays:
    any;
public Supplier:
    any;
    public _versionTimestamp?: string;
}

export class SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Name:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Name"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel = new SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel(original: SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel {
        var reduced = SuppliersInSelectedForecast_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Name:
    any;
}

export class SelectedForecast_OrderForecastViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,CreatedOn:
true,EndDate:
true,Id:
true,StartDate:
true,State:
true,Status:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["CreatedOn"] = true;
            this._members["EndDate"] = true;
            this._members["Id"] = true;
            this._members["StartDate"] = true;
            this._members["State"] = true;
            this._members["Status"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.EndDate != null) instance.EndDate = new Date(instance.EndDate);
        if(instance.StartDate != null) instance.StartDate = new Date(instance.StartDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedForecast_OrderForecastViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedForecast_OrderForecastViewModel = new SelectedForecast_OrderForecastViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedForecast_OrderForecastViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedForecast_OrderForecastViewModel(original: SelectedForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.EndDate)) this.EndDate = new Date(original.EndDate);
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StartDate)) this.StartDate = new Date(original.StartDate);
        if(original.State !== undefined) this.State = original.State;
        if(original.Status !== undefined) this.Status = original.Status;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedForecast_OrderForecastViewModel {
        var reduced = SelectedForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public CreatedOn:
    any;
public EndDate:
    any;
public Id:
    any;
public StartDate:
    any;
public State:
    any;
public Status:
    any;
}

export class ItemsInSelectedForecast_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ItemsInSelectedForecast_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ItemsInSelectedForecast_ItemViewModel = new ItemsInSelectedForecast_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateItemsInSelectedForecast_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateItemsInSelectedForecast_ItemViewModel(original: ItemsInSelectedForecast_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ItemsInSelectedForecast_ItemViewModel {
        var reduced = ItemsInSelectedForecast_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKUs_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKUs_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKUs_ItemViewModel = new SelectedSKUs_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKUs_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKUs_ItemViewModel(original: SelectedSKUs_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKUs_ItemViewModel {
        var reduced = SelectedSKUs_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class SelectedSKU_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
                true
            }
        } else {
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedSKU_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedSKU_ItemViewModel = new SelectedSKU_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedSKU_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedSKU_ItemViewModel(original: SelectedSKU_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedSKU_ItemViewModel {
        var reduced = SelectedSKU_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Id:
true,Name:
true,BusinessUnit:
true,Contacts:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Id"] = true;
            this._members["Name"] = true;
            this._members["BusinessUnit"] = true;
            this._members["Contacts"] = true;
        }

        this.Contacts = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.BusinessUnit != null)
            instance.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._lightCast(instance.BusinessUnit);

        if(instance.Contacts != null) {
            for(let i = 0; i < instance.Contacts.length; i++) {
                instance.Contacts[i] = Supplier_Supplier_Contacts_ContactViewModel._lightCast(instance.Contacts[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_SupplierViewModel = new Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_SupplierViewModel(original: Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        if(original.BusinessUnit !== undefined) this.BusinessUnit = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(original.BusinessUnit, ignoreReadOnlyProperties, context);

        if(original.Contacts != null) {
            for(let i = 0; i < original.Contacts.length; i++) {
                this.Contacts.push(Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(original.Contacts[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_SupplierViewModel {
        var reduced = Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Id:
    any;
public Name:
    any;
public BusinessUnit:
    any;
public Contacts:
    Array<any>;
}

export class Supplier_Supplier_BusinessUnit_BusinessUnitViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Description:
true,Id:
true,Number:
                true
            }
        } else {
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["Number"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_BusinessUnit_BusinessUnitViewModel = new Supplier_Supplier_BusinessUnit_BusinessUnitViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_BusinessUnit_BusinessUnitViewModel(original: Supplier_Supplier_BusinessUnit_BusinessUnitViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Number !== undefined) this.Number = original.Number;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_BusinessUnit_BusinessUnitViewModel {
        var reduced = Supplier_Supplier_BusinessUnit_BusinessUnitViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Description:
    any;
public Id:
    any;
public Number:
    any;
    public _versionTimestamp?: string;
}

export class Supplier_Supplier_Contacts_ContactViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AccessFailedCount:
true,Email:
true,EmailConfirmed:
true,Id:
true,LockoutEnabled:
true,LockoutEndDate:
true,Name:
true,PhoneNumber:
true,PhoneNumberConfirmed:
true,TwoFactorEnabled:
true,UserName:
                true
            }
        } else {
            this._members["AccessFailedCount"] = true;
            this._members["Email"] = true;
            this._members["EmailConfirmed"] = true;
            this._members["Id"] = true;
            this._members["LockoutEnabled"] = true;
            this._members["LockoutEndDate"] = true;
            this._members["Name"] = true;
            this._members["PhoneNumber"] = true;
            this._members["PhoneNumberConfirmed"] = true;
            this._members["TwoFactorEnabled"] = true;
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.LockoutEndDate != null) instance.LockoutEndDate = new Date(instance.LockoutEndDate);
        return instance;
    }

    public static _initializeFrom(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Supplier_Supplier_Contacts_ContactViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Supplier_Supplier_Contacts_ContactViewModel = new Supplier_Supplier_Contacts_ContactViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplier_Supplier_Contacts_ContactViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplier_Supplier_Contacts_ContactViewModel(original: Supplier_Supplier_Contacts_ContactViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AccessFailedCount !== undefined) this.AccessFailedCount = original.AccessFailedCount;
        if(original.Email !== undefined) this.Email = original.Email;
        if(original.EmailConfirmed !== undefined) this.EmailConfirmed = original.EmailConfirmed;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LockoutEnabled !== undefined) this.LockoutEnabled = original.LockoutEnabled;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.LockoutEndDate)) this.LockoutEndDate = new Date(original.LockoutEndDate);
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.PhoneNumber !== undefined) this.PhoneNumber = original.PhoneNumber;
        if(original.PhoneNumberConfirmed !== undefined) this.PhoneNumberConfirmed = original.PhoneNumberConfirmed;
        if(original.TwoFactorEnabled !== undefined) this.TwoFactorEnabled = original.TwoFactorEnabled;
        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Supplier_Supplier_Contacts_ContactViewModel {
        var reduced = Supplier_Supplier_Contacts_ContactViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AccessFailedCount:
    any;
public Email:
    any;
public EmailConfirmed:
    any;
public Id:
    any;
public LockoutEnabled:
    any;
public LockoutEndDate:
    any;
public Name:
    any;
public PhoneNumber:
    any;
public PhoneNumberConfirmed:
    any;
public TwoFactorEnabled:
    any;
public UserName:
    any;
}

export class SelectedOrderFDetails_OrderForecastDetailsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AutomatedForecast:
true,CreatedOn:
true,Id:
true,InitialStockLevel:
true,ItemCoverageDays:
true,OrderInventoryDays:
true,Quantity:
true,RecommendedOrderDate:
true,ReplenishmentCycle:
true,RoundQuantity:
true,SalesForecastDate:
true,Status:
true,SupplierAvailableQuantity:
true,SupplierCanDeliver:
true,SupplierCoverageDays:
true,SupplierMaxQuantity:
true,SupplierSharesStock:
true,Warehouse:
true,Item:
true,OrderForecast:
true,Notification:
                true
            }
        } else {
            this._members["AutomatedForecast"] = true;
            this._members["CreatedOn"] = true;
            this._members["Id"] = true;
            this._members["InitialStockLevel"] = true;
            this._members["ItemCoverageDays"] = true;
            this._members["OrderInventoryDays"] = true;
            this._members["Quantity"] = true;
            this._members["RecommendedOrderDate"] = true;
            this._members["ReplenishmentCycle"] = true;
            this._members["RoundQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["Status"] = true;
            this._members["SupplierAvailableQuantity"] = true;
            this._members["SupplierCanDeliver"] = true;
            this._members["SupplierCoverageDays"] = true;
            this._members["SupplierMaxQuantity"] = true;
            this._members["SupplierSharesStock"] = true;
            this._members["Warehouse"] = true;
            this._members["Item"] = true;
            this._members["OrderForecast"] = true;
            this._members["Notification"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.RecommendedOrderDate != null) instance.RecommendedOrderDate = new Date(instance.RecommendedOrderDate);
        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        if(instance.Warehouse != null)
            instance.Warehouse = SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        if(instance.Item != null)
            instance.Item = SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel._lightCast(instance.Item);
        if(instance.OrderForecast != null)
            instance.OrderForecast = SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel._lightCast(instance.OrderForecast);
        if(instance.Notification != null)
            instance.Notification = SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel._lightCast(instance.Notification);
        return instance;
    }

    public static _initializeFrom(original: SelectedOrderFDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedOrderFDetails_OrderForecastDetailsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedOrderFDetails_OrderForecastDetailsViewModel = new SelectedOrderFDetails_OrderForecastDetailsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedOrderFDetails_OrderForecastDetailsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedOrderFDetails_OrderForecastDetailsViewModel(original: SelectedOrderFDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AutomatedForecast !== undefined) this.AutomatedForecast = original.AutomatedForecast;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InitialStockLevel !== undefined) this.InitialStockLevel = original.InitialStockLevel;
        if(original.ItemCoverageDays !== undefined) this.ItemCoverageDays = original.ItemCoverageDays;
        if(original.OrderInventoryDays !== undefined) this.OrderInventoryDays = original.OrderInventoryDays;
        if(original.Quantity !== undefined) this.Quantity = original.Quantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.RecommendedOrderDate)) this.RecommendedOrderDate = new Date(original.RecommendedOrderDate);
        if(original.ReplenishmentCycle !== undefined) this.ReplenishmentCycle = original.ReplenishmentCycle;
        if(original.RoundQuantity !== undefined) this.RoundQuantity = original.RoundQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.Status !== undefined) this.Status = original.Status;
        if(original.SupplierAvailableQuantity !== undefined) this.SupplierAvailableQuantity = original.SupplierAvailableQuantity;
        if(original.SupplierCanDeliver !== undefined) this.SupplierCanDeliver = original.SupplierCanDeliver;
        if(original.SupplierCoverageDays !== undefined) this.SupplierCoverageDays = original.SupplierCoverageDays;
        if(original.SupplierMaxQuantity !== undefined) this.SupplierMaxQuantity = original.SupplierMaxQuantity;
        if(original.SupplierSharesStock !== undefined) this.SupplierSharesStock = original.SupplierSharesStock;

        if(original.Warehouse !== undefined) this.Warehouse = SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        if(original.Item !== undefined) this.Item = SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.OrderForecast !== undefined) this.OrderForecast = SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel._initializeFrom(original.OrderForecast, ignoreReadOnlyProperties, context);

        if(original.Notification !== undefined) this.Notification = SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel._initializeFrom(original.Notification, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedOrderFDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedOrderFDetails_OrderForecastDetailsViewModel {
        var reduced = SelectedOrderFDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AutomatedForecast:
    any;
public CreatedOn:
    any;
public Id:
    any;
public InitialStockLevel:
    any;
public ItemCoverageDays:
    any;
public OrderInventoryDays:
    any;
public Quantity:
    any;
public RecommendedOrderDate:
    any;
public ReplenishmentCycle:
    any;
public RoundQuantity:
    any;
public SalesForecastDate:
    any;
public Status:
    any;
public SupplierAvailableQuantity:
    any;
public SupplierCanDeliver:
    any;
public SupplierCoverageDays:
    any;
public SupplierMaxQuantity:
    any;
public SupplierSharesStock:
    any;
public Warehouse:
    any;
public Item:
    any;
public OrderForecast:
    any;
public Notification:
    any;
}

export class SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Description:
true,FlowType:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Description"] = true;
            this._members["FlowType"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel = new SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel(original: SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel {
        var reduced = SelectedOrderFDetails_OrderForecastDetails_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Description:
    any;
public FlowType:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AvgDailyDemand:
true,CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
true,UPC:
                true
            }
        } else {
            this._members["AvgDailyDemand"] = true;
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
            this._members["UPC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel = new SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel(original: SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;
        if(original.UPC !== undefined) this.UPC = original.UPC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel {
        var reduced = SelectedOrderFDetails_OrderForecastDetails_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AvgDailyDemand:
    any;
public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
public UPC:
    any;
    public _versionTimestamp?: string;
}

export class SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,CreatedOn:
true,EndDate:
true,Id:
true,ImportId:
true,StartDate:
true,State:
true,Status:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["CreatedOn"] = true;
            this._members["EndDate"] = true;
            this._members["Id"] = true;
            this._members["ImportId"] = true;
            this._members["StartDate"] = true;
            this._members["State"] = true;
            this._members["Status"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.EndDate != null) instance.EndDate = new Date(instance.EndDate);
        if(instance.StartDate != null) instance.StartDate = new Date(instance.StartDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel = new SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel(original: SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.EndDate)) this.EndDate = new Date(original.EndDate);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.ImportId !== undefined) this.ImportId = original.ImportId;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StartDate)) this.StartDate = new Date(original.StartDate);
        if(original.State !== undefined) this.State = original.State;
        if(original.Status !== undefined) this.Status = original.Status;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel {
        var reduced = SelectedOrderFDetails_OrderForecastDetails_OrderForecast_OrderForecastViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public CreatedOn:
    any;
public EndDate:
    any;
public Id:
    any;
public ImportId:
    any;
public StartDate:
    any;
public State:
    any;
public Status:
    any;
}

export class SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,Diff:
true,Id:
true,Message:
true,OrderForecastQuantity:
true,SalesForecastDate:
true,TotalSupplierStock:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["Diff"] = true;
            this._members["Id"] = true;
            this._members["Message"] = true;
            this._members["OrderForecastQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["TotalSupplierStock"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        return instance;
    }

    public static _initializeFrom(original: SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel = new SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel(original: SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(original.Diff !== undefined) this.Diff = original.Diff;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Message !== undefined) this.Message = original.Message;
        if(original.OrderForecastQuantity !== undefined) this.OrderForecastQuantity = original.OrderForecastQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.TotalSupplierStock !== undefined) this.TotalSupplierStock = original.TotalSupplierStock;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel {
        var reduced = SelectedOrderFDetails_OrderForecastDetails_Notification_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public Diff:
    any;
public Id:
    any;
public Message:
    any;
public OrderForecastQuantity:
    any;
public SalesForecastDate:
    any;
public TotalSupplierStock:
    any;
    public _versionTimestamp?: string;
}

export class Recommendations_NotificationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,Diff:
true,Id:
true,Message:
true,OrderForecastQuantity:
true,SalesForecastDate:
true,TotalSupplierStock:
true,OrderForecastDetails:
true,Item:
true,Warehouse:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["Diff"] = true;
            this._members["Id"] = true;
            this._members["Message"] = true;
            this._members["OrderForecastQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["TotalSupplierStock"] = true;
            this._members["OrderForecastDetails"] = true;
            this._members["Item"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        if(instance.OrderForecastDetails != null)
            instance.OrderForecastDetails = Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._lightCast(instance.OrderForecastDetails);
        if(instance.Item != null)
            instance.Item = Recommendations_Notification_Item_ItemViewModel._lightCast(instance.Item);
        if(instance.Warehouse != null)
            instance.Warehouse = Recommendations_Notification_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: Recommendations_NotificationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Recommendations_NotificationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Recommendations_NotificationViewModel = new Recommendations_NotificationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRecommendations_NotificationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRecommendations_NotificationViewModel(original: Recommendations_NotificationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(original.Diff !== undefined) this.Diff = original.Diff;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Message !== undefined) this.Message = original.Message;
        if(original.OrderForecastQuantity !== undefined) this.OrderForecastQuantity = original.OrderForecastQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.TotalSupplierStock !== undefined) this.TotalSupplierStock = original.TotalSupplierStock;

        if(original.OrderForecastDetails !== undefined) this.OrderForecastDetails = Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(original.OrderForecastDetails, ignoreReadOnlyProperties, context);

        if(original.Item !== undefined) this.Item = Recommendations_Notification_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.Warehouse !== undefined) this.Warehouse = Recommendations_Notification_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Recommendations_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Recommendations_NotificationViewModel {
        var reduced = Recommendations_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public Diff:
    any;
public Id:
    any;
public Message:
    any;
public OrderForecastQuantity:
    any;
public SalesForecastDate:
    any;
public TotalSupplierStock:
    any;
public OrderForecastDetails:
    any;
public Item:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AutomatedForecast:
true,CreatedOn:
true,Id:
true,InitialStockLevel:
true,ItemCoverageDays:
true,OrderInventoryDays:
true,Quantity:
true,RecommendedOrderDate:
true,ReplenishmentCycle:
true,RoundQuantity:
true,SalesForecastDate:
true,Status:
true,SupplierAvailableQuantity:
true,SupplierCanDeliver:
true,SupplierCoverageDays:
true,SupplierMaxQuantity:
true,SupplierSharesStock:
                true
            }
        } else {
            this._members["AutomatedForecast"] = true;
            this._members["CreatedOn"] = true;
            this._members["Id"] = true;
            this._members["InitialStockLevel"] = true;
            this._members["ItemCoverageDays"] = true;
            this._members["OrderInventoryDays"] = true;
            this._members["Quantity"] = true;
            this._members["RecommendedOrderDate"] = true;
            this._members["ReplenishmentCycle"] = true;
            this._members["RoundQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["Status"] = true;
            this._members["SupplierAvailableQuantity"] = true;
            this._members["SupplierCanDeliver"] = true;
            this._members["SupplierCoverageDays"] = true;
            this._members["SupplierMaxQuantity"] = true;
            this._members["SupplierSharesStock"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.RecommendedOrderDate != null) instance.RecommendedOrderDate = new Date(instance.RecommendedOrderDate);
        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        return instance;
    }

    public static _initializeFrom(original: Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel = new Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRecommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRecommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel(original: Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AutomatedForecast !== undefined) this.AutomatedForecast = original.AutomatedForecast;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InitialStockLevel !== undefined) this.InitialStockLevel = original.InitialStockLevel;
        if(original.ItemCoverageDays !== undefined) this.ItemCoverageDays = original.ItemCoverageDays;
        if(original.OrderInventoryDays !== undefined) this.OrderInventoryDays = original.OrderInventoryDays;
        if(original.Quantity !== undefined) this.Quantity = original.Quantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.RecommendedOrderDate)) this.RecommendedOrderDate = new Date(original.RecommendedOrderDate);
        if(original.ReplenishmentCycle !== undefined) this.ReplenishmentCycle = original.ReplenishmentCycle;
        if(original.RoundQuantity !== undefined) this.RoundQuantity = original.RoundQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.Status !== undefined) this.Status = original.Status;
        if(original.SupplierAvailableQuantity !== undefined) this.SupplierAvailableQuantity = original.SupplierAvailableQuantity;
        if(original.SupplierCanDeliver !== undefined) this.SupplierCanDeliver = original.SupplierCanDeliver;
        if(original.SupplierCoverageDays !== undefined) this.SupplierCoverageDays = original.SupplierCoverageDays;
        if(original.SupplierMaxQuantity !== undefined) this.SupplierMaxQuantity = original.SupplierMaxQuantity;
        if(original.SupplierSharesStock !== undefined) this.SupplierSharesStock = original.SupplierSharesStock;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel {
        var reduced = Recommendations_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AutomatedForecast:
    any;
public CreatedOn:
    any;
public Id:
    any;
public InitialStockLevel:
    any;
public ItemCoverageDays:
    any;
public OrderInventoryDays:
    any;
public Quantity:
    any;
public RecommendedOrderDate:
    any;
public ReplenishmentCycle:
    any;
public RoundQuantity:
    any;
public SalesForecastDate:
    any;
public Status:
    any;
public SupplierAvailableQuantity:
    any;
public SupplierCanDeliver:
    any;
public SupplierCoverageDays:
    any;
public SupplierMaxQuantity:
    any;
public SupplierSharesStock:
    any;
}

export class Recommendations_Notification_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AvgDailyDemand:
true,CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
true,UPC:
                true
            }
        } else {
            this._members["AvgDailyDemand"] = true;
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
            this._members["UPC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Recommendations_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Recommendations_Notification_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Recommendations_Notification_Item_ItemViewModel = new Recommendations_Notification_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRecommendations_Notification_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRecommendations_Notification_Item_ItemViewModel(original: Recommendations_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;
        if(original.UPC !== undefined) this.UPC = original.UPC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Recommendations_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Recommendations_Notification_Item_ItemViewModel {
        var reduced = Recommendations_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AvgDailyDemand:
    any;
public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
public UPC:
    any;
    public _versionTimestamp?: string;
}

export class Recommendations_Notification_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Description:
true,FlowType:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Description"] = true;
            this._members["FlowType"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Recommendations_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Recommendations_Notification_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Recommendations_Notification_Warehouse_WarehouseViewModel = new Recommendations_Notification_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateRecommendations_Notification_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateRecommendations_Notification_Warehouse_WarehouseViewModel(original: Recommendations_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Recommendations_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Recommendations_Notification_Warehouse_WarehouseViewModel {
        var reduced = Recommendations_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Description:
    any;
public FlowType:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Alerts_NotificationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreatedBy:
true,Diff:
true,Id:
true,Message:
true,OrderForecastQuantity:
true,SalesForecastDate:
true,TotalSupplierStock:
true,OrderForecastDetails:
true,Item:
true,Warehouse:
                true
            }
        } else {
            this._members["CreatedBy"] = true;
            this._members["Diff"] = true;
            this._members["Id"] = true;
            this._members["Message"] = true;
            this._members["OrderForecastQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["TotalSupplierStock"] = true;
            this._members["OrderForecastDetails"] = true;
            this._members["Item"] = true;
            this._members["Warehouse"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        if(instance.OrderForecastDetails != null)
            instance.OrderForecastDetails = Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._lightCast(instance.OrderForecastDetails);
        if(instance.Item != null)
            instance.Item = Alerts_Notification_Item_ItemViewModel._lightCast(instance.Item);
        if(instance.Warehouse != null)
            instance.Warehouse = Alerts_Notification_Warehouse_WarehouseViewModel._lightCast(instance.Warehouse);
        return instance;
    }

    public static _initializeFrom(original: Alerts_NotificationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Alerts_NotificationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Alerts_NotificationViewModel = new Alerts_NotificationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAlerts_NotificationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAlerts_NotificationViewModel(original: Alerts_NotificationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CreatedBy !== undefined) this.CreatedBy = original.CreatedBy;
        if(original.Diff !== undefined) this.Diff = original.Diff;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Message !== undefined) this.Message = original.Message;
        if(original.OrderForecastQuantity !== undefined) this.OrderForecastQuantity = original.OrderForecastQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.TotalSupplierStock !== undefined) this.TotalSupplierStock = original.TotalSupplierStock;

        if(original.OrderForecastDetails !== undefined) this.OrderForecastDetails = Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(original.OrderForecastDetails, ignoreReadOnlyProperties, context);

        if(original.Item !== undefined) this.Item = Alerts_Notification_Item_ItemViewModel._initializeFrom(original.Item, ignoreReadOnlyProperties, context);

        if(original.Warehouse !== undefined) this.Warehouse = Alerts_Notification_Warehouse_WarehouseViewModel._initializeFrom(original.Warehouse, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Alerts_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Alerts_NotificationViewModel {
        var reduced = Alerts_NotificationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreatedBy:
    any;
public Diff:
    any;
public Id:
    any;
public Message:
    any;
public OrderForecastQuantity:
    any;
public SalesForecastDate:
    any;
public TotalSupplierStock:
    any;
public OrderForecastDetails:
    any;
public Item:
    any;
public Warehouse:
    any;
    public _versionTimestamp?: string;
}

export class Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AutomatedForecast:
true,CreatedOn:
true,Id:
true,InitialStockLevel:
true,ItemCoverageDays:
true,OrderInventoryDays:
true,Quantity:
true,RecommendedOrderDate:
true,ReplenishmentCycle:
true,RoundQuantity:
true,SalesForecastDate:
true,Status:
true,SupplierAvailableQuantity:
true,SupplierCanDeliver:
true,SupplierCoverageDays:
true,SupplierMaxQuantity:
true,SupplierSharesStock:
                true
            }
        } else {
            this._members["AutomatedForecast"] = true;
            this._members["CreatedOn"] = true;
            this._members["Id"] = true;
            this._members["InitialStockLevel"] = true;
            this._members["ItemCoverageDays"] = true;
            this._members["OrderInventoryDays"] = true;
            this._members["Quantity"] = true;
            this._members["RecommendedOrderDate"] = true;
            this._members["ReplenishmentCycle"] = true;
            this._members["RoundQuantity"] = true;
            this._members["SalesForecastDate"] = true;
            this._members["Status"] = true;
            this._members["SupplierAvailableQuantity"] = true;
            this._members["SupplierCanDeliver"] = true;
            this._members["SupplierCoverageDays"] = true;
            this._members["SupplierMaxQuantity"] = true;
            this._members["SupplierSharesStock"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CreatedOn != null) instance.CreatedOn = new Date(instance.CreatedOn);
        if(instance.RecommendedOrderDate != null) instance.RecommendedOrderDate = new Date(instance.RecommendedOrderDate);
        if(instance.SalesForecastDate != null) instance.SalesForecastDate = new Date(instance.SalesForecastDate);
        return instance;
    }

    public static _initializeFrom(original: Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel = new Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAlerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAlerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel(original: Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.AutomatedForecast !== undefined) this.AutomatedForecast = original.AutomatedForecast;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CreatedOn)) this.CreatedOn = new Date(original.CreatedOn);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InitialStockLevel !== undefined) this.InitialStockLevel = original.InitialStockLevel;
        if(original.ItemCoverageDays !== undefined) this.ItemCoverageDays = original.ItemCoverageDays;
        if(original.OrderInventoryDays !== undefined) this.OrderInventoryDays = original.OrderInventoryDays;
        if(original.Quantity !== undefined) this.Quantity = original.Quantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.RecommendedOrderDate)) this.RecommendedOrderDate = new Date(original.RecommendedOrderDate);
        if(original.ReplenishmentCycle !== undefined) this.ReplenishmentCycle = original.ReplenishmentCycle;
        if(original.RoundQuantity !== undefined) this.RoundQuantity = original.RoundQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.SalesForecastDate)) this.SalesForecastDate = new Date(original.SalesForecastDate);
        if(original.Status !== undefined) this.Status = original.Status;
        if(original.SupplierAvailableQuantity !== undefined) this.SupplierAvailableQuantity = original.SupplierAvailableQuantity;
        if(original.SupplierCanDeliver !== undefined) this.SupplierCanDeliver = original.SupplierCanDeliver;
        if(original.SupplierCoverageDays !== undefined) this.SupplierCoverageDays = original.SupplierCoverageDays;
        if(original.SupplierMaxQuantity !== undefined) this.SupplierMaxQuantity = original.SupplierMaxQuantity;
        if(original.SupplierSharesStock !== undefined) this.SupplierSharesStock = original.SupplierSharesStock;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel {
        var reduced = Alerts_Notification_OrderForecastDetails_OrderForecastDetailsViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AutomatedForecast:
    any;
public CreatedOn:
    any;
public Id:
    any;
public InitialStockLevel:
    any;
public ItemCoverageDays:
    any;
public OrderInventoryDays:
    any;
public Quantity:
    any;
public RecommendedOrderDate:
    any;
public ReplenishmentCycle:
    any;
public RoundQuantity:
    any;
public SalesForecastDate:
    any;
public Status:
    any;
public SupplierAvailableQuantity:
    any;
public SupplierCanDeliver:
    any;
public SupplierCoverageDays:
    any;
public SupplierMaxQuantity:
    any;
public SupplierSharesStock:
    any;
}

export class Alerts_Notification_Item_ItemViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AvgDailyDemand:
true,CoverageDays:
true,Description:
true,InnerPackSize:
true,PalHI:
true,PalletSize:
true,PalletType:
true,PalTI:
true,SKU:
true,SupplierPackSize:
true,UOM:
true,UPC:
                true
            }
        } else {
            this._members["AvgDailyDemand"] = true;
            this._members["CoverageDays"] = true;
            this._members["Description"] = true;
            this._members["InnerPackSize"] = true;
            this._members["PalHI"] = true;
            this._members["PalletSize"] = true;
            this._members["PalletType"] = true;
            this._members["PalTI"] = true;
            this._members["SKU"] = true;
            this._members["SupplierPackSize"] = true;
            this._members["UOM"] = true;
            this._members["UPC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Alerts_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Alerts_Notification_Item_ItemViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Alerts_Notification_Item_ItemViewModel = new Alerts_Notification_Item_ItemViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAlerts_Notification_Item_ItemViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAlerts_Notification_Item_ItemViewModel(original: Alerts_Notification_Item_ItemViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AvgDailyDemand !== undefined) this.AvgDailyDemand = original.AvgDailyDemand;
        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.InnerPackSize !== undefined) this.InnerPackSize = original.InnerPackSize;
        if(original.PalHI !== undefined) this.PalHI = original.PalHI;
        if(original.PalletSize !== undefined) this.PalletSize = original.PalletSize;
        if(original.PalletType !== undefined) this.PalletType = original.PalletType;
        if(original.PalTI !== undefined) this.PalTI = original.PalTI;
        if(original.SKU !== undefined) this.SKU = original.SKU;
        if(original.SupplierPackSize !== undefined) this.SupplierPackSize = original.SupplierPackSize;
        if(original.UOM !== undefined) this.UOM = original.UOM;
        if(original.UPC !== undefined) this.UPC = original.UPC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Alerts_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Alerts_Notification_Item_ItemViewModel {
        var reduced = Alerts_Notification_Item_ItemViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AvgDailyDemand:
    any;
public CoverageDays:
    any;
public Description:
    any;
public InnerPackSize:
    any;
public PalHI:
    any;
public PalletSize:
    any;
public PalletType:
    any;
public PalTI:
    any;
public SKU:
    any;
public SupplierPackSize:
    any;
public UOM:
    any;
public UPC:
    any;
    public _versionTimestamp?: string;
}

export class Alerts_Notification_Warehouse_WarehouseViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Description:
true,FlowType:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Description"] = true;
            this._members["FlowType"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Alerts_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Alerts_Notification_Warehouse_WarehouseViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Alerts_Notification_Warehouse_WarehouseViewModel = new Alerts_Notification_Warehouse_WarehouseViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAlerts_Notification_Warehouse_WarehouseViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAlerts_Notification_Warehouse_WarehouseViewModel(original: Alerts_Notification_Warehouse_WarehouseViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.FlowType !== undefined) this.FlowType = original.FlowType;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Alerts_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Alerts_Notification_Warehouse_WarehouseViewModel {
        var reduced = Alerts_Notification_Warehouse_WarehouseViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Description:
    any;
public FlowType:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class SupplierParameters_SupplierParameterViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CoverageDays:
true,HasReplied:
true,Id:
true,SharesExcessStock:
true,SupplierCanDeliverWholeForecast:
true,SupplierComments:
true,Agreement:
                true
            }
        } else {
            this._members["CoverageDays"] = true;
            this._members["HasReplied"] = true;
            this._members["Id"] = true;
            this._members["SharesExcessStock"] = true;
            this._members["SupplierCanDeliverWholeForecast"] = true;
            this._members["SupplierComments"] = true;
            this._members["Agreement"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Agreement != null)
            instance.Agreement = SupplierParameters_SupplierParameter_Agreement_AgreementViewModel._lightCast(instance.Agreement);
        return instance;
    }

    public static _initializeFrom(original: SupplierParameters_SupplierParameterViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SupplierParameters_SupplierParameterViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SupplierParameters_SupplierParameterViewModel = new SupplierParameters_SupplierParameterViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplierParameters_SupplierParameterViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplierParameters_SupplierParameterViewModel(original: SupplierParameters_SupplierParameterViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.CoverageDays !== undefined) this.CoverageDays = original.CoverageDays;
        if(original.HasReplied !== undefined) this.HasReplied = original.HasReplied;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.SharesExcessStock !== undefined) this.SharesExcessStock = original.SharesExcessStock;
        if(original.SupplierCanDeliverWholeForecast !== undefined) this.SupplierCanDeliverWholeForecast = original.SupplierCanDeliverWholeForecast;
        if(original.SupplierComments !== undefined) this.SupplierComments = original.SupplierComments;

        if(original.Agreement !== undefined) this.Agreement = SupplierParameters_SupplierParameter_Agreement_AgreementViewModel._initializeFrom(original.Agreement, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SupplierParameters_SupplierParameterViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SupplierParameters_SupplierParameterViewModel {
        var reduced = SupplierParameters_SupplierParameterViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CoverageDays:
    any;
public HasReplied:
    any;
public Id:
    any;
public SharesExcessStock:
    any;
public SupplierCanDeliverWholeForecast:
    any;
public SupplierComments:
    any;
public Agreement:
    any;
}

export class SupplierParameters_SupplierParameter_Agreement_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
AgreementDocument:
true,DateCreated:
true,FullTruckLoad:
true,Id:
true,LeadTime:
true,Profile:
true,TargetInventoryDays:
true,WDDeliveries:
                true
            }
        } else {
            this._members["AgreementDocument"] = true;
            this._members["DateCreated"] = true;
            this._members["FullTruckLoad"] = true;
            this._members["Id"] = true;
            this._members["LeadTime"] = true;
            this._members["Profile"] = true;
            this._members["TargetInventoryDays"] = true;
            this._members["WDDeliveries"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateCreated != null) instance.DateCreated = new Date(instance.DateCreated);
        return instance;
    }

    public static _initializeFrom(original: SupplierParameters_SupplierParameter_Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SupplierParameters_SupplierParameter_Agreement_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SupplierParameters_SupplierParameter_Agreement_AgreementViewModel = new SupplierParameters_SupplierParameter_Agreement_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSupplierParameters_SupplierParameter_Agreement_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSupplierParameters_SupplierParameter_Agreement_AgreementViewModel(original: SupplierParameters_SupplierParameter_Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.AgreementDocument !== undefined) this.AgreementDocument = original.AgreementDocument;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateCreated)) this.DateCreated = new Date(original.DateCreated);
        if(original.FullTruckLoad !== undefined) this.FullTruckLoad = original.FullTruckLoad;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.LeadTime !== undefined) this.LeadTime = original.LeadTime;
        if(original.Profile !== undefined) this.Profile = original.Profile;
        if(original.TargetInventoryDays !== undefined) this.TargetInventoryDays = original.TargetInventoryDays;
        if(original.WDDeliveries !== undefined) this.WDDeliveries = original.WDDeliveries;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SupplierParameters_SupplierParameter_Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SupplierParameters_SupplierParameter_Agreement_AgreementViewModel {
        var reduced = SupplierParameters_SupplierParameter_Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public AgreementDocument:
    any;
public DateCreated:
    any;
public FullTruckLoad:
    any;
public Id:
    any;
public LeadTime:
    any;
public Profile:
    any;
public TargetInventoryDays:
    any;
public WDDeliveries:
    any;
    public _versionTimestamp?: string;
}

export class listOrderForecastDetails_Root_DatasetDto {
public Id:
    any;
public Item:
    any;
public Warehouse:
    any;
public RecommendedOrderDate:
    any;
public ItemCoverageDays:
    any;
public Quantity:
    any;
public Notification:
    any;
public SupplierAvailableQuantity:
    any;
public SupplierCanDeliver:
    any;
public Status:
    any;
    public constructor(original: any) {
        if (original == null) return null;
        this.Id = original.Id;
        this.Item = new listOrderForecastDetails_Root_Item_DatasetDto(original.Item);
        this.Warehouse = new listOrderForecastDetails_Root_Warehouse_DatasetDto(original.Warehouse);
        this.RecommendedOrderDate = original.RecommendedOrderDate;
        this.ItemCoverageDays = original.ItemCoverageDays;
        this.Quantity = original.Quantity;
        this.Notification = new listOrderForecastDetails_Root_Notification_DatasetDto(original.Notification);
        this.SupplierAvailableQuantity = original.SupplierAvailableQuantity;
        this.SupplierCanDeliver = original.SupplierCanDeliver;
        this.Status = original.Status;
    }
}
export class listOrderForecastDetails_Root_Item_DatasetDto {
public SKU:
    any;
public Description:
    any;
    public constructor(original: any) {
        if (original == null) return null;
        this.SKU = original.SKU;
        this.Description = original.Description;
    }
}
export class listOrderForecastDetails_Root_Warehouse_DatasetDto {
public Id:
    any;
public Description:
    any;
    public constructor(original: any) {
        if (original == null) return null;
        this.Id = original.Id;
        this.Description = original.Description;
    }
}
export class listOrderForecastDetails_Root_Notification_DatasetDto {
public Id:
    any;
public Diff:
    any;
    public constructor(original: any) {
        if (original == null) return null;
        this.Id = original.Id;
        this.Diff = original.Diff;
    }
}
}
