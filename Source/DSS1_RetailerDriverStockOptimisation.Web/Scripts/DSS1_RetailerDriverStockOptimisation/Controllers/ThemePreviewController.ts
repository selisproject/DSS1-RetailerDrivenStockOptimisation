// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
new Joove.ThemeRPC().enable();
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_ThemePreview: DSS1_RetailerDriverStockOptimisation.Controllers.IThemePreviewScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const ThemePreviewConditionalFormattings = [
        ];
const ThemePreviewDataValidations = [
                                    ];
const ThemePreviewCalculatedExpressions = [
        ];
// Manual Data for OptionButton
window["dataForOptionButton"] = [ {
    _key: 0,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '0', false , null),
_default: false
}, {
    _key: 1,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '1', false , null),
_default: false
}, {
    _key: 2,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '2', false , null),
_default: false
}, {
    _key: 3,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '3', false , null),
_default: false
}, {
    _key: 4,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '4', false , null),
_default: false
}, {
    _key: 5,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '5', false , null),
_default: false
}, {
    _key: 6,
_text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '6', false , null),
_default: false
} ]

// Datasets Column Info
export var ApplicationOperationDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
           new Joove.ColumnInfo("ParentControllerName", "string", null, false),
           new Joove.ColumnInfo("IsAvailableToAnonymous", "bool", null, false),
           new Joove.ColumnInfo("IsAvailableToAllAuthorizedUsers", "bool", null, false),
           new Joove.ColumnInfo("Id", "int", null, false),
           new Joove.ColumnInfo("original", "ApplicationOperation", null, false),
           new Joove.ColumnInfo("Type", "string", null, false)];
window["ApplicationOperationDataSet_ColumnInfo"] = ApplicationOperationDataSet_ColumnInfo;
export var Days_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["Days_ColumnInfo"] = Days_ColumnInfo;
var List_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("List", "Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ParentControllerName",
caption: window._resourcesManager.getDataListColumnCaption("List", "ParentControllerName", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "IsAvailableToAnonymous",
caption: window._resourcesManager.getDataListColumnCaption("List", "IsAvailableToAnonymous", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "IsAvailableToAllAuthorizedUsers",
caption: window._resourcesManager.getDataListColumnCaption("List", "IsAvailableToAllAuthorizedUsers", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "Id",
caption: window._resourcesManager.getDataListColumnCaption("List", "Id", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Type",
caption: window._resourcesManager.getDataListColumnCaption("List", "Type", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["List_ColumnInfo"] = List_ColumnInfo;
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Name", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ParentControllerName",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "ParentControllerName", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "IsAvailableToAnonymous",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "IsAvailableToAnonymous", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "IsAvailableToAllAuthorizedUsers",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "IsAvailableToAllAuthorizedUsers", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Type",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Type", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;

export class ThemePreviewCalendarSetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Users;
    }


}



// Datasets Projection Shemas
window["DropdownBox_ProjectionScema"] = {};
window["DropdownBox1_ProjectionScema"] = {};

window["Chart_ProjectionScema"] = {};
window["NewMap_ProjectionScema"] = {};
window["Table2_ProjectionScema"] = {};
window["List_ProjectionScema"] = {};
window["PickList_ProjectionScema"] = {};
window["FileUpload_ProjectionScema"] = {JustString:
                                        {}
                                       };


export interface IThemePreviewScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class ThemePreviewController {
private timeoutDelayLockMenuHeaderMenuItemPressed:
    any;
private timeoutDelayLockMenuItemMenuItemPressed:
    any;
private timeoutDelayLockMenuItem2MenuItemPressed:
    any;
private timeoutDelayLockMenuItem4MenuItemPressed:
    any;
private timeoutDelayLockMenuItem5MenuItemPressed:
    any;
private timeoutDelayLockMenuItem7MenuItemPressed:
    any;
private timeoutDelayLockMenuItem9MenuItemPressed:
    any;
private timeoutDelayLockIcon11Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLocklblName1Clicked:
    any;
private timeoutDelayLocklblParentControllerName1Clicked:
    any;
private timeoutDelayLocklblIsAvailableToAnonymous1Clicked:
    any;
private timeoutDelayLocklblIsAvailableToAllAuthorizedUsersClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_ThemePreview.model = window.scope_ThemePreview.dehydrate();
        //window.scope_MasterPage.model = window.scope_ThemePreview.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._lightCast(window.scope_ThemePreview.model);
        // Joove.Common.applyScope(window.scope_ThemePreview);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IThemePreviewScope, $timeout: ng.ITimeoutService) {
        window.scope_ThemePreview = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IThemePreviewScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {

CalendarSet:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ThemePreviewCalendarSetViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ThemePreview", "Render", "GET", [], {}, _modalOptions);
            },
        };
// Events
        $scope.eventCallbacks = {
MenuHeaderMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuHeaderMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuHeaderMenuItemPressed);
                }

                this.timeoutDelayLockMenuHeaderMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItemMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItem2MenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItem2MenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItem2MenuItemPressed);
                }

                this.timeoutDelayLockMenuItem2MenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItem4MenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItem4MenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItem4MenuItemPressed);
                }

                this.timeoutDelayLockMenuItem4MenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItem5MenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItem5MenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItem5MenuItemPressed);
                }

                this.timeoutDelayLockMenuItem5MenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItem7MenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItem7MenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItem7MenuItemPressed);
                }

                this.timeoutDelayLockMenuItem7MenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItem9MenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItem9MenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItem9MenuItemPressed);
                }

                this.timeoutDelayLockMenuItem9MenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon11Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'Modal');
            },

ButtonClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'Modal');
            },

lblName1Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
            },

lblParentControllerName1Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
            },

lblIsAvailableToAnonymous1Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
            },

lblIsAvailableToAllAuthorizedUsersClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
            },

Button1Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.showModal(name + 'Modal');
            },

        };

// Rules
        window._ruleEngine.addDataValidations(ThemePreviewDataValidations);
        window._ruleEngine.addConditionalFormattings(ThemePreviewConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(ThemePreviewCalculatedExpressions);

        $scope.onRichTextBlur = (e, editor) => {
            Joove.Core.onChange(e.target, $(e.target).val());
        }


        $scope.SetReadOnIfNeeded = (e, editor) => {
            var isReadonly = e.currentTarget.classList.contains('jb-readonly');
            if (isReadonly === true) {
                e.currentTarget.contentEditable = false;
            }
        }
        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("ThemePreviewController", ["$scope", "$timeout", ThemePreviewController] as Array<string>);
}
