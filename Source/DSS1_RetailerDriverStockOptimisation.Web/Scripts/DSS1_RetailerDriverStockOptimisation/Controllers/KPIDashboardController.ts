// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_KPIDashboard: DSS1_RetailerDriverStockOptimisation.Controllers.IKPIDashboardScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const KPIDashboardConditionalFormattings = [
        ];
const KPIDashboardDataValidations = [
                                    ];
const KPIDashboardCalculatedExpressions = [
        ];

// Datasets Column Info
var listSuppliers_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("listSuppliers", "Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSuppliers_ColumnInfo"] = listSuppliers_ColumnInfo;
var listWarehouses_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listWarehouses", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listWarehouses_ColumnInfo"] = listWarehouses_ColumnInfo;
var listBusinessUnits_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listBusinessUnits", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listBusinessUnits_ColumnInfo"] = listBusinessUnits_ColumnInfo;
var listCategories_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listCategories", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listCategories_ColumnInfo"] = listCategories_ColumnInfo;
var listSubcategories_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listSubcategories", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSubcategories_ColumnInfo"] = listSubcategories_ColumnInfo;
export var AllSubcategoriesDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
           new Joove.ColumnInfo("original", "SubCategory", null, false)];
window["AllSubcategoriesDS_ColumnInfo"] = AllSubcategoriesDS_ColumnInfo;
var listBaseUnits_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listBaseUnits", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listBaseUnits_ColumnInfo"] = listBaseUnits_ColumnInfo;
var listSKUs_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listSKUs", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSKUs_ColumnInfo"] = listSKUs_ColumnInfo;
export var ItemsDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
                                 new Joove.ColumnInfo("original", "Item", null, false)];
window["ItemsDS_ColumnInfo"] = ItemsDS_ColumnInfo;
export var InventoryDaysKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
           new Joove.ColumnInfo("InventoryDays", "decimal", null, false)];
window["InventoryDaysKPIDataSet_ColumnInfo"] = InventoryDaysKPIDataSet_ColumnInfo;
export var UnitsKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
           new Joove.ColumnInfo("Units", "int", null, false)];
window["UnitsKPIDataSet_ColumnInfo"] = UnitsKPIDataSet_ColumnInfo;
export var SLALeadMonthly_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
                                        new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["SLALeadMonthly_ColumnInfo"] = SLALeadMonthly_ColumnInfo;
export var SLADelivery_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
                                     new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["SLADelivery_ColumnInfo"] = SLADelivery_ColumnInfo;
export var WasteDataSet_ColumnInfo = [new Joove.ColumnInfo("DateFormatted", "string", null, false),
                                      new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["WasteDataSet_ColumnInfo"] = WasteDataSet_ColumnInfo;
export var PlatformDataSet_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
           new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["PlatformDataSet_ColumnInfo"] = PlatformDataSet_ColumnInfo;

export class KPIDashboardItemsVMDSViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.SelectedSKUs;
    }


}



// Datasets Projection Shemas
window["listSuppliers_ProjectionScema"] = {};
window["listWarehouses_ProjectionScema"] = {};
window["listBusinessUnits_ProjectionScema"] = {};


window["ddlSubcategory_ProjectionScema"] = {};







window["chartWaste_ProjectionScema"] = {};



export interface IKPIDashboardScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class KPIDashboardController {
private timeoutDelayLocktxtFromDateOnChange:
    any;
private timeoutDelayLocktxtToDateOnChange:
    any;
private timeoutDelayLocklistSuppliersOnChange:
    any;
private timeoutDelayLocklistWarehousesOnChange:
    any;
private timeoutDelayLocklistBusinessUnitsOnChange:
    any;
private timeoutDelayLocklistCategoriesOnChange:
    any;
private timeoutDelayLocklistSubcategoriesOnChange:
    any;
private timeoutDelayLockddlSubcategoryOnChange:
    any;
private timeoutDelayLocklistBaseUnitsOnChange:
    any;
private timeoutDelayLocklistSKUsOnChange:
    any;
private timeoutDelayLockddlSKUsOnChange:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_KPIDashboard.model = window.scope_KPIDashboard.dehydrate();
        //window.scope_MasterPage.model = window.scope_KPIDashboard.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._lightCast(window.scope_KPIDashboard.model);
        // Joove.Common.applyScope(window.scope_KPIDashboard);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IKPIDashboardScope, $timeout: ng.ITimeoutService) {
        window.scope_KPIDashboard = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IKPIDashboardScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
chartStockLevelsInvDaysLine0LineAnnotationValue:
            () => 20,
            chartStockLevelsInvDaysYScaleMin: () => 0,
                chartStockLevelsUnitsLine0LineAnnotationValue: () => 1000,
                chartStockLevelsUnitsYScaleMin: () => 0,
                chartSLALeadTimeLine0LineAnnotationValue: () => 50,
                chartSLALeadTimeYScaleMin: () => 0,
                chartSLALeadTimeYScaleMax: () => 100,
                chartSLADeliveryLine0LineAnnotationValue: () => 50,
                chartSLADeliveryYScaleMin: () => 0,
                chartWasteLine0LineAnnotationValue: () => 5,
                chartWasteYScaleMin: () => 0.0,
                chartWasteYScaleMax: () => 10.0,
                chartOrderForecastYScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {

ItemsVMDS:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.KPIDashboardItemsVMDSViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("KPIDashboard", "Render", "GET", [], {}, _modalOptions);
            },
AddSubcategory:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);


                    // Joove.Common.applyScope(window.scope_KPIDashboard);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
RefreshFilters:
            async (caller, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if ((caller == "BusinessUnits")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listCategories']), null);
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);
                    }

                    if ((caller == "Categories")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);
                    }

                    if ((caller == "Subcategories")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listBaseUnits']), null);
                    }

                    if ((caller == "SKU")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSKUs']), null);
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartOrderForecast"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartSLADelivery"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartSLALeadTime"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartStockLevelsInvDays"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartStockLevelsUnits"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartWaste"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.dropdownRefresh(['ddlSKUs']), null);


                    // Joove.Common.applyScope(window.scope_KPIDashboard);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
AddSKU:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Selected Suppliers: " + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItems($("[jb-id='listSuppliers']"), null).length, 0))), null);

                    Joove.Common.nullSafe<any>(() => window["scope_KPIDashboard"].model.SelectedSKUs.add(Joove.Common.nullSafe<any>(() => window["scope_KPIDashboard"].model.SelectedSKU, null)), null);

                    window["scope_KPIDashboard"].model.SelectedSKU = null;

                    Joove.Common.nullSafe<any>(() => $scope.actions.RefreshFilters("SKU"), null);


                    // Joove.Common.applyScope(window.scope_KPIDashboard);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
ViewFiltered:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_KPIDashboard);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
        };
// Events
        $scope.eventCallbacks = {
txtFromDateOnChange:
            (e, element, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocktxtFromDateOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocktxtFromDateOnChange);
                }

                this.timeoutDelayLocktxtFromDateOnChange = $timeout(() => {
                    Joove.Core.onChange($(element).get(0), null, true);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

txtToDateOnChange:
            (e, element, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocktxtToDateOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocktxtToDateOnChange);
                }

                this.timeoutDelayLocktxtToDateOnChange = $timeout(() => {
                    Joove.Core.onChange($(element).get(0), null, true);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listSuppliersOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSuppliersOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSuppliersOnChange);
                }

                this.timeoutDelayLocklistSuppliersOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listWarehousesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistWarehousesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistWarehousesOnChange);
                }

                this.timeoutDelayLocklistWarehousesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listBusinessUnitsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistBusinessUnitsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistBusinessUnitsOnChange);
                }

                this.timeoutDelayLocklistBusinessUnitsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("BusinessUnits", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listCategoriesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistCategoriesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistCategoriesOnChange);
                }

                this.timeoutDelayLocklistCategoriesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Categories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listSubcategoriesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSubcategoriesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSubcategoriesOnChange);
                }

                this.timeoutDelayLocklistSubcategoriesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Subcategories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

ddlSubcategoryOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockddlSubcategoryOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockddlSubcategoryOnChange);
                }

                this.timeoutDelayLockddlSubcategoryOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddSubcategory(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listBaseUnitsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistBaseUnitsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistBaseUnitsOnChange);
                }

                this.timeoutDelayLocklistBaseUnitsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("BaseUnits", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listSKUsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSKUsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSKUsOnChange);
                }

                this.timeoutDelayLocklistSKUsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Subcategories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

ddlSKUsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockddlSKUsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockddlSKUsOnChange);
                }

                this.timeoutDelayLockddlSKUsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddSKU(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(KPIDashboardDataValidations);
        window._ruleEngine.addConditionalFormattings(KPIDashboardConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(KPIDashboardCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("KPIDashboardController", ["$scope", "$timeout", KPIDashboardController] as Array<string>);
}
