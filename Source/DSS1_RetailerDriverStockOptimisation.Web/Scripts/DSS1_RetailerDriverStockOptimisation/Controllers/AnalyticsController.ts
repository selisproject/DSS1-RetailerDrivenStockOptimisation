// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_Analytics: DSS1_RetailerDriverStockOptimisation.Controllers.IAnalyticsScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const AnalyticsConditionalFormattings = [
                                        ];
const AnalyticsDataValidations = [
                                 ];
const AnalyticsCalculatedExpressions = [
new Joove.JbRule({
name: "CalculatedExpression",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_Analytics"].model.TimeRange, "") == "now-1y")) {
            return "Last Year";
        } else if ((Joove.Common.nullSafe<any>(() => window["scope_Analytics"].model.TimeRange, "") == "now-1M")) {
            return "Last Month";
        } else if ((Joove.Common.nullSafe<any>(() => window["scope_Analytics"].model.TimeRange, "") == "now-1d")) {
            return "Last Day";
        } else {
            return "Last Week";
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
                                       ];

// Datasets Column Info
export var RequestOverTimeDataset_ColumnInfo = [new Joove.ColumnInfo("keyAsString", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["RequestOverTimeDataset_ColumnInfo"] = RequestOverTimeDataset_ColumnInfo;
export var RequestLatencyDataset_ColumnInfo = [new Joove.ColumnInfo("keyAsString", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["RequestLatencyDataset_ColumnInfo"] = RequestLatencyDataset_ColumnInfo;
export var Top5ServiceDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["Top5ServiceDataset_ColumnInfo"] = Top5ServiceDataset_ColumnInfo;
export var Top5OperationDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["Top5OperationDataset_ColumnInfo"] = Top5OperationDataset_ColumnInfo;
export var Top5ConsumerDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["Top5ConsumerDataset_ColumnInfo"] = Top5ConsumerDataset_ColumnInfo;
export var ErrorRequestDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
           new Joove.ColumnInfo("doc_count", "int", null, false)];
window["ErrorRequestDataset_ColumnInfo"] = ErrorRequestDataset_ColumnInfo;

export class AnalyticsLogsDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Logs;
    }


}



export class AnalyticsTop5ServiceDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Top5Service;
    }


    Chart1Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], {"doc_count": "doc_count"}, false));
        return result;
    }

}



export class AnalyticsTop5OperationDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Top5Operation;
    }


    Chart11Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], {"doc_count": "doc_count"}, false));
        return result;
    }

}



export class AnalyticsTop5ConsumerDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Top5Consumer;
    }


    Chart12Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], {"doc_count": "doc_count"}, false));
        return result;
    }

}



export class AnalyticsErrorRequestDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.ErrorRequest;
    }


    Chart121Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], {"doc_count": "IP"}, false));
        return result;
    }

}



export class AnalyticsRequestOverTimeDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.RequestOverTime;
    }


    Chart13Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("keyAsString", ["doc_count"], {"doc_count": "Request"}, false));
        return result;
    }

}



export class AnalyticsRequestLatencyDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.RequestLatency;
    }


    Chart131Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(c => { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("keyAsString", ["doc_count"], {"doc_count": "Request"}, false));
        return result;
    }

}



// Datasets Projection Shemas








export interface IAnalyticsScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class AnalyticsController {
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButton21Clicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_Analytics.model = window.scope_Analytics.dehydrate();
        //window.scope_MasterPage.model = window.scope_Analytics.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._lightCast(window.scope_Analytics.model);
        // Joove.Common.applyScope(window.scope_Analytics);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IAnalyticsScope, $timeout: ng.ITimeoutService) {
        window.scope_Analytics = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IAnalyticsScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
Chart131XScaleStepSize:
            () => 5000,
            Chart121YScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {

LogsDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsLogsDatasetViewModelDataset($scope.model, partialViewControlName);
            },

Top5ServiceDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5ServiceDatasetViewModelDataset($scope.model, partialViewControlName);
            },

Top5OperationDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5OperationDatasetViewModelDataset($scope.model, partialViewControlName);
            },

Top5ConsumerDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5ConsumerDatasetViewModelDataset($scope.model, partialViewControlName);
            },

ErrorRequestDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsErrorRequestDatasetViewModelDataset($scope.model, partialViewControlName);
            },

RequestOverTimeDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsRequestOverTimeDatasetViewModelDataset($scope.model, partialViewControlName);
            },

RequestLatencyDataset:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsRequestLatencyDatasetViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (dt, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("Analytics", "Render", "GET", [dt], {}, _modalOptions);
            },
        };
// Events
        $scope.eventCallbacks = {
Button2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render("now-1d", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render("now-1w", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render("now-1M", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button21Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton21Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton21Clicked);
                }

                this.timeoutDelayLockButton21Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Render("now-1y", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(AnalyticsDataValidations);
        window._ruleEngine.addConditionalFormattings(AnalyticsConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(AnalyticsCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("AnalyticsController", ["$scope", "$timeout", AnalyticsController] as Array<string>);
}
