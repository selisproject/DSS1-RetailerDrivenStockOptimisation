var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var _this = this;
        var ItemOrderForecastConditionalFormattings = [
            new Joove.JbRule({
                name: "ShowHideChart1284Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart1284.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "ShowHideChart1243Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart1243.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "ShowHideChart108Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart108.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "ShowHideChart104Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart104.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "ShowHideChart105Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart105.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "ShowHideChart107Conditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, CLMS.Framework.Number.GreaterThan(function () { return window["scope_ItemOrderForecast"].model.Chart107.length; }, function () { return 0; })];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
        ];
        var ItemOrderForecastDataValidations = [];
        var ItemOrderForecastCalculatedExpressions = [];
        // Datasets Column Info
        Controllers.Suppliers_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("original", "Supplier", null, false)];
        window["Suppliers_ColumnInfo"] = Controllers.Suppliers_ColumnInfo;
        Controllers.Items_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("SKU", "string", null, false)];
        window["Items_ColumnInfo"] = Controllers.Items_ColumnInfo;
        Controllers.Warehouse107VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Warehouse107VM_ColumnInfo"] = Controllers.Warehouse107VM_ColumnInfo;
        Controllers.Chart108VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Chart108VM_ColumnInfo"] = Controllers.Chart108VM_ColumnInfo;
        Controllers.Chart105VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Chart105VM_ColumnInfo"] = Controllers.Chart105VM_ColumnInfo;
        Controllers.Chart104VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Chart104VM_ColumnInfo"] = Controllers.Chart104VM_ColumnInfo;
        Controllers.Chart1243VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Chart1243VM_ColumnInfo"] = Controllers.Chart1243VM_ColumnInfo;
        Controllers.Chart1284VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Quantity", "decimal", null, false)];
        window["Chart1284VM_ColumnInfo"] = Controllers.Chart1284VM_ColumnInfo;
        var ItemOrderForecastOrderProposalsDSViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastOrderProposalsDSViewModelDataset, _super);
            function ItemOrderForecastOrderProposalsDSViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastOrderProposalsDSViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastOrderProposalsDSViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastOrderProposalsDSViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastOrderProposalsDSViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.OrderProposals;
            };
            return ItemOrderForecastOrderProposalsDSViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastOrderProposalsDSViewModelDataset = ItemOrderForecastOrderProposalsDSViewModelDataset;
        var ItemOrderForecastWarehouse107VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastWarehouse107VMViewModelDataset, _super);
            function ItemOrderForecastWarehouse107VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastWarehouse107VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastWarehouse107VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastWarehouse107VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastWarehouse107VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart107;
            };
            ItemOrderForecastWarehouse107VMViewModelDataset.prototype.Chart107Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastWarehouse107VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastWarehouse107VMViewModelDataset = ItemOrderForecastWarehouse107VMViewModelDataset;
        var ItemOrderForecastChart105VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart105VMViewModelDataset, _super);
            function ItemOrderForecastChart105VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart105VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart105VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart105VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart105VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart105;
            };
            ItemOrderForecastChart105VMViewModelDataset.prototype.Chart105Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastChart105VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart105VMViewModelDataset = ItemOrderForecastChart105VMViewModelDataset;
        var ItemOrderForecastChart108VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart108VMViewModelDataset, _super);
            function ItemOrderForecastChart108VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart108VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart108VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart108VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart108VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart108;
            };
            ItemOrderForecastChart108VMViewModelDataset.prototype.Chart108Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastChart108VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart108VMViewModelDataset = ItemOrderForecastChart108VMViewModelDataset;
        var ItemOrderForecastChart104VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart104VMViewModelDataset, _super);
            function ItemOrderForecastChart104VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart104VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart104VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart104VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart104VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart104;
            };
            ItemOrderForecastChart104VMViewModelDataset.prototype.Chart104Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastChart104VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart104VMViewModelDataset = ItemOrderForecastChart104VMViewModelDataset;
        var ItemOrderForecastChart107VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart107VMViewModelDataset, _super);
            function ItemOrderForecastChart107VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart107VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart107VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart107VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart107VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart107;
            };
            return ItemOrderForecastChart107VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart107VMViewModelDataset = ItemOrderForecastChart107VMViewModelDataset;
        var ItemOrderForecastChart1243VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart1243VMViewModelDataset, _super);
            function ItemOrderForecastChart1243VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart1243VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart1243VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart1243VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart1243VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart1243;
            };
            ItemOrderForecastChart1243VMViewModelDataset.prototype.Chart1243Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastChart1243VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart1243VMViewModelDataset = ItemOrderForecastChart1243VMViewModelDataset;
        var ItemOrderForecastChart1284VMViewModelDataset = /** @class */ (function (_super) {
            __extends(ItemOrderForecastChart1284VMViewModelDataset, _super);
            function ItemOrderForecastChart1284VMViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ItemOrderForecastChart1284VMViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ItemOrderForecastChart1284VMViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ItemOrderForecastChart1284VMViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ItemOrderForecastChart1284VMViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Chart1284;
            };
            ItemOrderForecastChart1284VMViewModelDataset.prototype.Chart1284Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
                result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
                return result;
            };
            return ItemOrderForecastChart1284VMViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ItemOrderForecastChart1284VMViewModelDataset = ItemOrderForecastChart1284VMViewModelDataset;
        // Datasets Projection Shemas
        window["DropdownBox_ProjectionScema"] = {};
        window["DropdownBox1_ProjectionScema"] = { Supplier: { Id: ''
            }
        };
        var ItemOrderForecastController = /** @class */ (function () {
            function ItemOrderForecastController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_ItemOrderForecast.model = window.scope_ItemOrderForecast.dehydrate();
                    //window.scope_MasterPage.model = window.scope_ItemOrderForecast.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._lightCast(window.scope_ItemOrderForecast.model);
                    // Joove.Common.applyScope(window.scope_ItemOrderForecast);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_ItemOrderForecast = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            ItemOrderForecastController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {
                    Chart107YScaleMin: function () { return 0; },
                    Chart108YScaleMin: function () { return 0; },
                    Chart105YScaleMin: function () { return 0; },
                    Chart104YScaleMin: function () { return 0; },
                    Chart1243YScaleMin: function () { return 0; },
                    Chart1284YScaleMin: function () { return 0; },
                };
                // Dataset Handler
                $scope.datasets = {
                    OrderProposalsDS: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastOrderProposalsDSViewModelDataset($scope.model, partialViewControlName);
                    },
                    Warehouse107VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastWarehouse107VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart105VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart105VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart108VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart108VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart104VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart104VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart107VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart107VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart1243VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart1243VMViewModelDataset($scope.model, partialViewControlName);
                    },
                    Chart1284VM: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart1284VMViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("ItemOrderForecast", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    CalcQuantity: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'ItemOrderForecast', action: 'CalcQuantity',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    CalcReplenishmentCycle: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'ItemOrderForecast', action: 'CalcReplenishmentCycle',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    CalculateOrderDate: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'ItemOrderForecast', action: 'CalculateOrderDate',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    OrderForecastPerSKU: function (itemSku, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("ItemOrderForecast", "OrderForecastPerSKU", "GET", [itemSku], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    CreateNotifications: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'ItemOrderForecast', action: 'CreateNotifications',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    RefreshCharts: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'ItemOrderForecast', action: 'RefreshCharts',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    ButtonClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButtonClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButtonClicked);
                        }
                        _this.timeoutDelayLockButtonClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshCharts(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(ItemOrderForecastDataValidations);
                window._ruleEngine.addConditionalFormattings(ItemOrderForecastConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(ItemOrderForecastCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return ItemOrderForecastController;
        }());
        angular.module("Application").controller("ItemOrderForecastController", ["$scope", "$timeout", ItemOrderForecastController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
