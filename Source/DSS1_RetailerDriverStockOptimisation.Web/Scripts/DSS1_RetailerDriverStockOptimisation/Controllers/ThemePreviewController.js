var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
new Joove.ThemeRPC().enable();
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var ThemePreviewConditionalFormattings = [];
        var ThemePreviewDataValidations = [];
        var ThemePreviewCalculatedExpressions = [];
        // Manual Data for OptionButton
        window["dataForOptionButton"] = [{
                _key: 0,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '0', false, null),
                _default: false
            }, {
                _key: 1,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '1', false, null),
                _default: false
            }, {
                _key: 2,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '2', false, null),
                _default: false
            }, {
                _key: 3,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '3', false, null),
                _default: false
            }, {
                _key: 4,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '4', false, null),
                _default: false
            }, {
                _key: 5,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '5', false, null),
                _default: false
            }, {
                _key: 6,
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('Days', '6', false, null),
                _default: false
            }];
        // Datasets Column Info
        Controllers.ApplicationOperationDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("ParentControllerName", "string", null, false),
            new Joove.ColumnInfo("IsAvailableToAnonymous", "bool", null, false),
            new Joove.ColumnInfo("IsAvailableToAllAuthorizedUsers", "bool", null, false),
            new Joove.ColumnInfo("Id", "int", null, false),
            new Joove.ColumnInfo("original", "ApplicationOperation", null, false),
            new Joove.ColumnInfo("Type", "string", null, false)];
        window["ApplicationOperationDataSet_ColumnInfo"] = Controllers.ApplicationOperationDataSet_ColumnInfo;
        Controllers.Days_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, true)];
        window["Days_ColumnInfo"] = Controllers.Days_ColumnInfo;
        var List_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Name",
                caption: window._resourcesManager.getDataListColumnCaption("List", "Name", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 255,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "ParentControllerName",
                caption: window._resourcesManager.getDataListColumnCaption("List", "ParentControllerName", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "bool",
                dataTypeIsEnum: false,
                name: "IsAvailableToAnonymous",
                caption: window._resourcesManager.getDataListColumnCaption("List", "IsAvailableToAnonymous", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "bool",
                dataTypeIsEnum: false,
                name: "IsAvailableToAllAuthorizedUsers",
                caption: window._resourcesManager.getDataListColumnCaption("List", "IsAvailableToAllAuthorizedUsers", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "int",
                dataTypeIsEnum: false,
                name: "Id",
                caption: window._resourcesManager.getDataListColumnCaption("List", "Id", false),
                groupable: true,
                searchable: true,
                visible: false,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Type",
                caption: window._resourcesManager.getDataListColumnCaption("List", "Type", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["List_ColumnInfo"] = List_ColumnInfo;
        var PickList_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Name",
                caption: window._resourcesManager.getDataListColumnCaption("PickList", "Name", true),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 255,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "ParentControllerName",
                caption: window._resourcesManager.getDataListColumnCaption("PickList", "ParentControllerName", true),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "bool",
                dataTypeIsEnum: false,
                name: "IsAvailableToAnonymous",
                caption: window._resourcesManager.getDataListColumnCaption("PickList", "IsAvailableToAnonymous", true),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "bool",
                dataTypeIsEnum: false,
                name: "IsAvailableToAllAuthorizedUsers",
                caption: window._resourcesManager.getDataListColumnCaption("PickList", "IsAvailableToAllAuthorizedUsers", true),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Type",
                caption: window._resourcesManager.getDataListColumnCaption("PickList", "Type", true),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["PickList_ColumnInfo"] = PickList_ColumnInfo;
        var ThemePreviewCalendarSetViewModelDataset = /** @class */ (function (_super) {
            __extends(ThemePreviewCalendarSetViewModelDataset, _super);
            function ThemePreviewCalendarSetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            ThemePreviewCalendarSetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            ThemePreviewCalendarSetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            ThemePreviewCalendarSetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            ThemePreviewCalendarSetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Users;
            };
            return ThemePreviewCalendarSetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.ThemePreviewCalendarSetViewModelDataset = ThemePreviewCalendarSetViewModelDataset;
        // Datasets Projection Shemas
        window["DropdownBox_ProjectionScema"] = {};
        window["DropdownBox1_ProjectionScema"] = {};
        window["Chart_ProjectionScema"] = {};
        window["NewMap_ProjectionScema"] = {};
        window["Table2_ProjectionScema"] = {};
        window["List_ProjectionScema"] = {};
        window["PickList_ProjectionScema"] = {};
        window["FileUpload_ProjectionScema"] = { JustString: {}
        };
        var ThemePreviewController = /** @class */ (function () {
            function ThemePreviewController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_ThemePreview.model = window.scope_ThemePreview.dehydrate();
                    //window.scope_MasterPage.model = window.scope_ThemePreview.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._lightCast(window.scope_ThemePreview.model);
                    // Joove.Common.applyScope(window.scope_ThemePreview);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_ThemePreview = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            ThemePreviewController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.ThemePreview.ThemePreviewViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {};
                // Dataset Handler
                $scope.datasets = {
                    CalendarSet: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.ThemePreviewCalendarSetViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("ThemePreview", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    MenuHeaderMenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuHeaderMenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuHeaderMenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuHeaderMenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItemMenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItemMenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItemMenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItemMenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItem2MenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItem2MenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItem2MenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItem2MenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItem4MenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItem4MenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItem4MenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItem4MenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItem5MenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItem5MenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItem5MenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItem5MenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItem7MenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItem7MenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItem7MenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItem7MenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    MenuItem9MenuItemPressed: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockMenuItem9MenuItemPressed != null) {
                            $timeout.cancel(_this.timeoutDelayLockMenuItem9MenuItemPressed);
                        }
                        _this.timeoutDelayLockMenuItem9MenuItemPressed = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Icon11Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'Modal');
                    },
                    ButtonClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'Modal');
                    },
                    lblName1Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
                    },
                    lblParentControllerName1Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
                    },
                    lblIsAvailableToAnonymous1Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
                    },
                    lblIsAvailableToAllAuthorizedUsersClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('ApplicationOperationDataSet', targetProp, e);
                    },
                    Button1Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.showModal(name + 'Modal');
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(ThemePreviewDataValidations);
                window._ruleEngine.addConditionalFormattings(ThemePreviewConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(ThemePreviewCalculatedExpressions);
                $scope.onRichTextBlur = function (e, editor) {
                    Joove.Core.onChange(e.target, $(e.target).val());
                };
                $scope.SetReadOnIfNeeded = function (e, editor) {
                    var isReadonly = e.currentTarget.classList.contains('jb-readonly');
                    if (isReadonly === true) {
                        e.currentTarget.contentEditable = false;
                    }
                };
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return ThemePreviewController;
        }());
        angular.module("Application").controller("ThemePreviewController", ["$scope", "$timeout", ThemePreviewController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
