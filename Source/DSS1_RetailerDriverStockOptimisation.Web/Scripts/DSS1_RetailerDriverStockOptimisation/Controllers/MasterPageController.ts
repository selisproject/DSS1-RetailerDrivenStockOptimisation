// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var AppNotificationCreated_eventsQueue = [];
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;

$(document).keyup((event) => {
    if (event.which === 123 && event.ctrlKey && event.shiftKey) {
        var debugConsole = new Joove.Widgets.DebugConsole("#debugConsole", "/MasterPage/DebugPage", true);
        debugConsole.minmaxModal(false, null);
    }
});
interface Window { scope_MasterPage: DSS1_RetailerDriverStockOptimisation.Controllers.IMasterPageScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
var _treeNodesConfiguration = { };
const MasterPageConditionalFormattings = [
new Joove.JbRule({
name: "PendingChangesMasterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return window._context.isDirty;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideEmptyTitleMasterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_MasterPage"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ConditionalFormattingMasterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const MasterPageDataValidations = [
                                  ];
const MasterPageCalculatedExpressions = [
                                        ];

// Datasets Column Info
export var AppNotifications_ColumnInfo = [new Joove.ColumnInfo("DateCreated", "DateTime", null, false),
           new Joove.ColumnInfo("Item", "string", null, false),
           new Joove.ColumnInfo("Delta", "int", null, false)];
window["AppNotifications_ColumnInfo"] = AppNotifications_ColumnInfo;

// Datasets Projection Shemas
window["NotificationTable_ProjectionScema"] = {};


export interface IMasterPageScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MasterPageController {
private timeoutDelayLockMainMenuHeaderMenuItemPressed:
    any;
private timeoutDelayLockMasterHomePageMenuItemPressed:
    any;
private timeoutDelayLockKPIDashboardMenuItemPressed:
    any;
private timeoutDelayLockMPAnalyticsMenuItemPressed:
    any;
private timeoutDelayLockOrderForecastMenuItemPressed:
    any;
private timeoutDelayLockManageUsersMenuItemPressed:
    any;
private timeoutDelayLockMPAddContactMenuItemPressed:
    any;
private timeoutDelayLockManagePermissionsMenuItemPressed:
    any;
private timeoutDelayLockManageRolesMenuItemPressed:
    any;
private timeoutDelayLockManageOperationsMenuItemPressed:
    any;
private timeoutDelayLockManageSettingsMenuItemPressed:
    any;
private timeoutDelayLockMPCalculationsMenuItemPressed:
    any;
private timeoutDelayLockMasterChangePasswordMenuItemPressed:
    any;
private timeoutDelayLockMasterPreferencesMenuItemPressed:
    any;
private timeoutDelayLockMasterSignOutMenuItemPressed:
    any;
private timeoutDelayLockMasterSignInMenuItemPressed:
    any;
private timeoutDelayLockMPSupOrderForecastMenuItemPressed:
    any;
private timeoutDelayLockMPAgreementListMenuItemPressed:
    any;
private timeoutDelayLockMPSupplierViewMenuItemPressed:
    any;
private timeoutDelayLockMasterPageIconClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MasterPage.model = window.scope_MasterPage.dehydrate();
        //
        DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._lightCast(window.scope_MasterPage.model);
        // Joove.Common.applyScope(window.scope_MasterPage);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMasterPageScope, $timeout: ng.ITimeoutService) {
        window.scope_MasterPage = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope._ready = false;
        window._context.currentMasterPageObject = this;
        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.MasterPage.MasterPageViewModel._initializeFrom($scope.model, context);
        $scope._validations = { summary:
                                [],
                              };

        let onSuccess = (data: any, textStatus: string, jqXhr: JQueryXHR)  => {
            Joove.Core.checkAppVersion();
            Joove.Core.handleServerResponse("MasterPage", data);
            this.init($scope, $timeout);
            //Joove.Common.applyScope($scope);
            //window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {
            $scope._ready = true;
            CLMS.Framework.Utilities.FocusOnFirstInputElementOfModal();
            //});
        }; //end onSuccess()

        window._backEndInfoAggregator.get(false, { success: onSuccess });

    }

    init($scope: IMasterPageScope, $timeout: ng.ITimeoutService) {


        $scope.trackObject = obj => Joove.Common.trackObject(obj);
        $scope.getRules = () => {
            {
                return window.$form._validations;
            }
        }
        $scope.getModelForDebugConsole = () => {
            {
                return Joove.Common.getModel();
            }
        }
        //}

        $.connection['eventsHub'].on('appNotificationCreated', (guid, timestamp, inputs) => {
            AppNotificationCreated_eventsQueue.push({ id: guid, time: timestamp });
            Joove.Common.getMasterScope().events.AppNotificationCreated();
        });
        $scope.connectedToSignals = () => {
            const AppNotificationCreatedGroups = (() => {
                return null;

            })();
            if (AppNotificationCreatedGroups != null) {
                for (let i = 0; i < AppNotificationCreatedGroups.length; i++) {
                    $.connection['eventsHub'].server.joinGroup(AppNotificationCreatedGroups[i]);
                }
            }
        }
// Event Listeners
        $scope.events = {
AppNotificationCreated:
            () => {

                setTimeout(()=> {
                    AppNotificationCreated_eventsQueue.sort((a, b) => {
                        return (a.time > b.time) ? 1 : ((b.time > a.time) ? -1 : 0);
                    });

                    const implementation = (): any => {
                        Joove.Common.nullSafe<any>(() => window._commander.gridRefresh(["NotificationTable"]), null);


                    };
                    implementation();
                    this.controllerActionFinished(false);

                    window.$events.on.AppNotificationCreated && window.$events.on.AppNotificationCreated();
                }, 100);
            },

        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MasterPage", "Render", "GET", [], {}, _modalOptions);
            },
SignOut:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MasterPage', action: 'SignOut',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
NotificationRead:
            async (appNotification, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MasterPage', action: 'NotificationRead',
queryData: [], postData: {'model': $scope.model, 'appNotification': appNotification},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
MainMenuHeaderMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMainMenuHeaderMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMainMenuHeaderMenuItemPressed);
                }

                this.timeoutDelayLockMainMenuHeaderMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("StockManagerView", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterHomePageMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterHomePageMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterHomePageMenuItemPressed);
                }

                this.timeoutDelayLockMasterHomePageMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("StockManagerView", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

KPIDashboardMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockKPIDashboardMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockKPIDashboardMenuItemPressed);
                }

                this.timeoutDelayLockKPIDashboardMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("KPIDashboard", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPAnalyticsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPAnalyticsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPAnalyticsMenuItemPressed);
                }

                this.timeoutDelayLockMPAnalyticsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("Analytics", "Render", "GET", ["now-5d"], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

OrderForecastMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockOrderForecastMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockOrderForecastMenuItemPressed);
                }

                this.timeoutDelayLockOrderForecastMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("OrderForecast", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageUsersMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageUsersMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageUsersMenuItemPressed);
                }

                this.timeoutDelayLockManageUsersMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UsersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPAddContactMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPAddContactMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPAddContactMenuItemPressed);
                }

                this.timeoutDelayLockMPAddContactMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("NewContact", "NewUser", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManagePermissionsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManagePermissionsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManagePermissionsMenuItemPressed);
                }

                this.timeoutDelayLockManagePermissionsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PermissionsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageRolesMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageRolesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageRolesMenuItemPressed);
                }

                this.timeoutDelayLockManageRolesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("RolesList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageOperationsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageOperationsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageOperationsMenuItemPressed);
                }

                this.timeoutDelayLockManageOperationsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("OperationsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageSettingsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageSettingsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageSettingsMenuItemPressed);
                }

                this.timeoutDelayLockManageSettingsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ApplicationSettingsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPCalculationsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPCalculationsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPCalculationsMenuItemPressed);
                }

                this.timeoutDelayLockMPCalculationsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("CalculationsForm", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterChangePasswordMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterChangePasswordMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterChangePasswordMenuItemPressed);
                }

                this.timeoutDelayLockMasterChangePasswordMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ChangePassword", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterPreferencesMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterPreferencesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterPreferencesMenuItemPressed);
                }

                this.timeoutDelayLockMasterPreferencesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UserPreferences", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignOutMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignOutMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignOutMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignOutMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignOutPage", "SignOut", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignInMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignInMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignInMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignInMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignInPage", "Load", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPSupOrderForecastMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPSupOrderForecastMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPSupOrderForecastMenuItemPressed);
                }

                this.timeoutDelayLockMPSupOrderForecastMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierOrderForecast", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPAgreementListMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPAgreementListMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPAgreementListMenuItemPressed);
                }

                this.timeoutDelayLockMPAgreementListMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("AgreementList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPSupplierViewMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPSupplierViewMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPSupplierViewMenuItemPressed);
                }

                this.timeoutDelayLockMPSupplierViewMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierView", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterPageIconClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterPageIconClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterPageIconClicked);
                }

                this.timeoutDelayLockMasterPageIconClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.NotificationRead(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MasterPageDataValidations);
        window._ruleEngine.addConditionalFormattings(MasterPageConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MasterPageCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
    }
}
angular.module("Application").controller("MasterPageController", ["$scope", "$timeout", MasterPageController] as Array<string>);
}
