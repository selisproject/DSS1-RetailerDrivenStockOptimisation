var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var KPIDashboardConditionalFormattings = [];
        var KPIDashboardDataValidations = [];
        var KPIDashboardCalculatedExpressions = [];
        // Datasets Column Info
        var listSuppliers_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Name",
                caption: window._resourcesManager.getDataListColumnCaption("listSuppliers", "Name", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSuppliers_ColumnInfo"] = listSuppliers_ColumnInfo;
        var listWarehouses_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listWarehouses", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listWarehouses_ColumnInfo"] = listWarehouses_ColumnInfo;
        var listBusinessUnits_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listBusinessUnits", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listBusinessUnits_ColumnInfo"] = listBusinessUnits_ColumnInfo;
        var listCategories_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listCategories", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listCategories_ColumnInfo"] = listCategories_ColumnInfo;
        var listSubcategories_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listSubcategories", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSubcategories_ColumnInfo"] = listSubcategories_ColumnInfo;
        Controllers.AllSubcategoriesDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "SubCategory", null, false)];
        window["AllSubcategoriesDS_ColumnInfo"] = Controllers.AllSubcategoriesDS_ColumnInfo;
        var listBaseUnits_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listBaseUnits", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listBaseUnits_ColumnInfo"] = listBaseUnits_ColumnInfo;
        var listSKUs_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listSKUs", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSKUs_ColumnInfo"] = listSKUs_ColumnInfo;
        Controllers.ItemsDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "Item", null, false)];
        window["ItemsDS_ColumnInfo"] = Controllers.ItemsDS_ColumnInfo;
        Controllers.InventoryDaysKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
            new Joove.ColumnInfo("InventoryDays", "decimal", null, false)];
        window["InventoryDaysKPIDataSet_ColumnInfo"] = Controllers.InventoryDaysKPIDataSet_ColumnInfo;
        Controllers.UnitsKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
            new Joove.ColumnInfo("Units", "int", null, false)];
        window["UnitsKPIDataSet_ColumnInfo"] = Controllers.UnitsKPIDataSet_ColumnInfo;
        Controllers.SLALeadMonthly_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
            new Joove.ColumnInfo("Percentage", "decimal", null, false)];
        window["SLALeadMonthly_ColumnInfo"] = Controllers.SLALeadMonthly_ColumnInfo;
        Controllers.SLADelivery_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
            new Joove.ColumnInfo("Percentage", "decimal", null, false)];
        window["SLADelivery_ColumnInfo"] = Controllers.SLADelivery_ColumnInfo;
        Controllers.WasteDataSet_ColumnInfo = [new Joove.ColumnInfo("DateFormatted", "string", null, false),
            new Joove.ColumnInfo("Percentage", "decimal", null, false)];
        window["WasteDataSet_ColumnInfo"] = Controllers.WasteDataSet_ColumnInfo;
        Controllers.PlatformDataSet_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
            new Joove.ColumnInfo("Percentage", "decimal", null, false)];
        window["PlatformDataSet_ColumnInfo"] = Controllers.PlatformDataSet_ColumnInfo;
        var KPIDashboardItemsVMDSViewModelDataset = /** @class */ (function (_super) {
            __extends(KPIDashboardItemsVMDSViewModelDataset, _super);
            function KPIDashboardItemsVMDSViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            KPIDashboardItemsVMDSViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            KPIDashboardItemsVMDSViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            KPIDashboardItemsVMDSViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            KPIDashboardItemsVMDSViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.SelectedSKUs;
            };
            return KPIDashboardItemsVMDSViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.KPIDashboardItemsVMDSViewModelDataset = KPIDashboardItemsVMDSViewModelDataset;
        // Datasets Projection Shemas
        window["listSuppliers_ProjectionScema"] = {};
        window["listWarehouses_ProjectionScema"] = {};
        window["listBusinessUnits_ProjectionScema"] = {};
        window["ddlSubcategory_ProjectionScema"] = {};
        window["chartWaste_ProjectionScema"] = {};
        var KPIDashboardController = /** @class */ (function () {
            function KPIDashboardController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_KPIDashboard.model = window.scope_KPIDashboard.dehydrate();
                    //window.scope_MasterPage.model = window.scope_KPIDashboard.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._lightCast(window.scope_KPIDashboard.model);
                    // Joove.Common.applyScope(window.scope_KPIDashboard);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_KPIDashboard = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            KPIDashboardController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboard.KPIDashboardViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {
                    chartStockLevelsInvDaysLine0LineAnnotationValue: function () { return 20; },
                    chartStockLevelsInvDaysYScaleMin: function () { return 0; },
                    chartStockLevelsUnitsLine0LineAnnotationValue: function () { return 1000; },
                    chartStockLevelsUnitsYScaleMin: function () { return 0; },
                    chartSLALeadTimeLine0LineAnnotationValue: function () { return 50; },
                    chartSLALeadTimeYScaleMin: function () { return 0; },
                    chartSLALeadTimeYScaleMax: function () { return 100; },
                    chartSLADeliveryLine0LineAnnotationValue: function () { return 50; },
                    chartSLADeliveryYScaleMin: function () { return 0; },
                    chartWasteLine0LineAnnotationValue: function () { return 5; },
                    chartWasteYScaleMin: function () { return 0.0; },
                    chartWasteYScaleMax: function () { return 10.0; },
                    chartOrderForecastYScaleMin: function () { return 0; },
                };
                // Dataset Handler
                $scope.datasets = {
                    ItemsVMDS: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.KPIDashboardItemsVMDSViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("KPIDashboard", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    AddSubcategory: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    RefreshFilters: function (caller, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if ((caller == "BusinessUnits")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listCategories']); }, null);
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            }
                                            if ((caller == "Categories")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            }
                                            if ((caller == "Subcategories")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listBaseUnits']); }, null);
                                            }
                                            if ((caller == "SKU")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSKUs']); }, null);
                                            }
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartOrderForecast"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartSLADelivery"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartSLALeadTime"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartStockLevelsInvDays"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartStockLevelsUnits"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartWaste"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.dropdownRefresh(['ddlSKUs']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    AddSKU: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Selected Suppliers: " + Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return Joove.DatasourceManager.getSelectedItems($("[jb-id='listSuppliers']"), null).length; }, 0))); }, null);
                                            Joove.Common.nullSafe(function () { return window["scope_KPIDashboard"].model.SelectedSKUs.add(Joove.Common.nullSafe(function () { return window["scope_KPIDashboard"].model.SelectedSKU; }, null)); }, null);
                                            window["scope_KPIDashboard"].model.SelectedSKU = null;
                                            Joove.Common.nullSafe(function () { return $scope.actions.RefreshFilters("SKU"); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    ViewFiltered: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    txtFromDateOnChange: function (e, element, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocktxtFromDateOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocktxtFromDateOnChange);
                        }
                        _this.timeoutDelayLocktxtFromDateOnChange = $timeout(function () {
                            Joove.Core.onChange($(element).get(0), null, true);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    txtToDateOnChange: function (e, element, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocktxtToDateOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocktxtToDateOnChange);
                        }
                        _this.timeoutDelayLocktxtToDateOnChange = $timeout(function () {
                            Joove.Core.onChange($(element).get(0), null, true);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSuppliersOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSuppliersOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSuppliersOnChange);
                        }
                        _this.timeoutDelayLocklistSuppliersOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listWarehousesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistWarehousesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistWarehousesOnChange);
                        }
                        _this.timeoutDelayLocklistWarehousesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listBusinessUnitsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistBusinessUnitsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistBusinessUnitsOnChange);
                        }
                        _this.timeoutDelayLocklistBusinessUnitsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("BusinessUnits", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listCategoriesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistCategoriesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistCategoriesOnChange);
                        }
                        _this.timeoutDelayLocklistCategoriesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Categories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSubcategoriesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSubcategoriesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSubcategoriesOnChange);
                        }
                        _this.timeoutDelayLocklistSubcategoriesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Subcategories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlSubcategoryOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlSubcategoryOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlSubcategoryOnChange);
                        }
                        _this.timeoutDelayLockddlSubcategoryOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.AddSubcategory(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listBaseUnitsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistBaseUnitsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistBaseUnitsOnChange);
                        }
                        _this.timeoutDelayLocklistBaseUnitsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("BaseUnits", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSKUsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSKUsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSKUsOnChange);
                        }
                        _this.timeoutDelayLocklistSKUsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Subcategories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlSKUsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlSKUsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlSKUsOnChange);
                        }
                        _this.timeoutDelayLockddlSKUsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.AddSKU(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(KPIDashboardDataValidations);
                window._ruleEngine.addConditionalFormattings(KPIDashboardConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(KPIDashboardCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return KPIDashboardController;
        }());
        angular.module("Application").controller("KPIDashboardController", ["$scope", "$timeout", KPIDashboardController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
