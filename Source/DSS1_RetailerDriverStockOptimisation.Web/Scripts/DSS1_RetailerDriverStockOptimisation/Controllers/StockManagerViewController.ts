// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_StockManagerView: DSS1_RetailerDriverStockOptimisation.Controllers.IStockManagerViewScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const StockManagerViewConditionalFormattings = [
new Joove.JbRule({
name: "AllExpandedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseRightColumn, false)) && !(Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseLeftColumn, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CollapseBothColumnsConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseRightColumn, false) && Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseLeftColumn, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CollapseLeftColumnOnlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseLeftColumn, false) && !(Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseRightColumn, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CollapseRightColumnOnlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseRightColumn, false) && !(Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseLeftColumn, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
export var StockManagerView_listOrderForecastDetails_ConditionalFormattings = {
ApplyRecommendationColorConditional:
    {
'forRow':
        {
'whenTrue':
            ['ApplyCssClass|recommendation-color']
        },
'forColumns':
        {

        }
    },
ApplyAlertColorFromSystemConditional:
    {
'forRow':
        {
'whenTrue':
            ['ApplyCssClass|alert-color']
        },
'forColumns':
        {

        }
    },
ApplyGerneratedAlertColorConditional:
    {
'forRow':
        {
'whenTrue':
            ['ApplyCssClass|alert-color']
        },
'forColumns':
        {

        }
    },
ApplyAlertColorConditional:
    {
'forRow':
        {
'whenTrue':
            ['ApplyCssClass|alert-color']
        },
'forColumns':
        {

        }
    },
HideRowIfNotAnsweredConditional:
    {
'forRow':
        {

        },
'forColumns':
        {
'SupplierAvailableQuantity':
            { 'whenTrue': ['Hide|'] }, 'Notification.Diff':
            { 'whenTrue': ['Hide|'] }, 'SupplierCanDeliver':
            { 'whenTrue': ['Hide|'] }
        }
    },
HideListColumnsConditional:
    {
'forRow':
        {

        },
'forColumns':
        {
'Notification.Diff':
            { 'whenTrue': ['Hide|'] }, 'SupplierCanDeliver':
            { 'whenTrue': ['Hide|'] }, 'SupplierAvailableQuantity':
            { 'whenTrue': ['Hide|'] }
        }
    },
};
const StockManagerViewDataValidations = [
                                        ];
const StockManagerViewCalculatedExpressions = [
        ];
// Manual Data for DropdownBox
window["dataForDropdownBox"] = [ {
_key: " ",
_text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '0', false , null),
_default: false
}, {
_key: "PBL",
_text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '1', false , null),
_default: false
}, {
_key: "PBS",
_text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '2', false , null),
_default: false
}, {
_key: "PBL-PBS",
_text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '3', false , null),
_default: false
} ]
// Manual Data for OptionButton
window["dataForOptionButton"] = [ {
_key: "Alerts",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '0', false , null),
_default: false
}, {
_key: "Recommendations",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '1', false , null),
_default: false
}, {
_key: "All",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '2', false , null),
_default: false
} ]

// Datasets Column Info
var listSuppliers_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("listSuppliers", "Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSuppliers_ColumnInfo"] = listSuppliers_ColumnInfo;
var listWarehouses_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listWarehouses", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listWarehouses_ColumnInfo"] = listWarehouses_ColumnInfo;
var listBusinessUnits_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listBusinessUnits", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listBusinessUnits_ColumnInfo"] = listBusinessUnits_ColumnInfo;
var listCategories_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listCategories", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listCategories_ColumnInfo"] = listCategories_ColumnInfo;
var listSubcategories_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listSubcategories", "Description", false),
groupable: true,
searchable: false,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSubcategories_ColumnInfo"] = listSubcategories_ColumnInfo;
export var AllSubcategoriesDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
           new Joove.ColumnInfo("original", "SubCategory", null, false)];
window["AllSubcategoriesDS_ColumnInfo"] = AllSubcategoriesDS_ColumnInfo;
var listBaseUnits_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listBaseUnits", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listBaseUnits_ColumnInfo"] = listBaseUnits_ColumnInfo;
var listSKUs_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("listSKUs", "Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listSKUs_ColumnInfo"] = listSKUs_ColumnInfo;
export var FilteredItems_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
                                       new Joove.ColumnInfo("original", "Item", null, false)];
window["FilteredItems_ColumnInfo"] = FilteredItems_ColumnInfo;
export var FlowTypes_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["FlowTypes_ColumnInfo"] = FlowTypes_ColumnInfo;
var lstOrderForecasts_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "Id",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "Id", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "StartDate",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "StartDate", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'DD/MM/YY', 'backEndFormatting': 'dd/MM/yy' , 'excelFormat': 'dd/MM/yy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "EndDate",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "EndDate", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'D/MM/YYYY', 'backEndFormatting': 'd/MM/yyyy' , 'excelFormat': 'd/MM/yyyy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "State",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "State", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "CreatedBy",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "CreatedBy", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "CreatedOn",
caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "CreatedOn", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'D-MMM-YYYY H:mm', 'backEndFormatting': 'd-MMM-yyyy H:mm' , 'excelFormat': 'd-MMM-yyyy H:mm' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["lstOrderForecasts_ColumnInfo"] = lstOrderForecasts_ColumnInfo;
export var ForecastVS_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                    new Joove.ColumnInfo("SupplierStock", "int", null, false),
                                    new Joove.ColumnInfo("OrderQuantity", "int", null, false),
                                    new Joove.ColumnInfo("RealOrderQuantity", "int", null, false)];
window["ForecastVS_ColumnInfo"] = ForecastVS_ColumnInfo;
export var StockDataSet_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                      new Joove.ColumnInfo("StockOnHand", "int", null, false),
                                      new Joove.ColumnInfo("OrderQuantity", "int", null, false),
                                      new Joove.ColumnInfo("SupplierStock", "int", null, false),
                                      new Joove.ColumnInfo("SalesQuantity", "int", null, false)];
window["StockDataSet_ColumnInfo"] = StockDataSet_ColumnInfo;
export var ListOptions_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["ListOptions_ColumnInfo"] = ListOptions_ColumnInfo;
var listOrderForecastDetails_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Item.SKU",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Item.SKU", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Item.Description",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Item.Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Warehouse.Description",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Warehouse.Description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "RecommendedOrderDate",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "RecommendedOrderDate", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'D/MM/YYYY', 'backEndFormatting': 'd/MM/yyyy' , 'excelFormat': 'd/MM/yyyy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "ItemCoverageDays",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "ItemCoverageDays", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "decimal",
dataTypeIsEnum: false,
name: "Quantity",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Quantity", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Status",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Status", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "Notification.Diff",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Notification.Diff", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "SupplierAvailableQuantity",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "SupplierAvailableQuantity", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "SupplierCanDeliver",
caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "SupplierCanDeliver", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.CHECKBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["listOrderForecastDetails_ColumnInfo"] = listOrderForecastDetails_ColumnInfo;
export var Comments_ColumnInfo = [new Joove.ColumnInfo("Text", "string", null, false),
                                  new Joove.ColumnInfo("AddedBy", "string", null, false)];
window["Comments_ColumnInfo"] = Comments_ColumnInfo;
export var SelectedForecastItems_ColumnInfo = [new Joove.ColumnInfo("Item.SKU", "string", null, false),
           new Joove.ColumnInfo("Item.Description", "string", null, false),
           new Joove.ColumnInfo("CoverageDays", "int", null, false)];
window["SelectedForecastItems_ColumnInfo"] = SelectedForecastItems_ColumnInfo;

export class StockManagerViewItemsVMDSViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.SelectedSKUs;
    }


}



export class StockManagerViewSelectedForecastItemsViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.ItemsInSelectedForecast;
    }


}



// Datasets Projection Shemas
window["listSuppliers_ProjectionScema"] = {};
window["listWarehouses_ProjectionScema"] = {};
window["listBusinessUnits_ProjectionScema"] = {};


window["ddlSubcategory_ProjectionScema"] = {};




window["lstOrderForecasts_ProjectionScema"] = {};




window["Table1_ProjectionScema"] = {};



export interface IStockManagerViewScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class StockManagerViewController {
private timeoutDelayLockIconFiltersClicked:
    any;
private timeoutDelayLocktxtFromDateOnChange:
    any;
private timeoutDelayLocktxtToDateOnChange:
    any;
private timeoutDelayLockIcon2Clicked:
    any;
private timeoutDelayLocklistSuppliersOnChange:
    any;
private timeoutDelayLocklistWarehousesOnChange:
    any;
private timeoutDelayLocklistBusinessUnitsOnChange:
    any;
private timeoutDelayLocklistCategoriesOnChange:
    any;
private timeoutDelayLocklistSubcategoriesOnChange:
    any;
private timeoutDelayLockddlSubcategoryOnChange:
    any;
private timeoutDelayLocklistBaseUnitsOnChange:
    any;
private timeoutDelayLocklistSKUsOnChange:
    any;
private timeoutDelayLockddlSKUsOnChange:
    any;
private timeoutDelayLockDropdownBoxOnChange:
    any;
private timeoutDelayLocklstRecalculateClicked:
    any;
private timeoutDelayLocklstSendClicked:
    any;
private timeoutDelayLocklstOrderForecastsOnChange:
    any;
private timeoutDelayLockIcon21Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockIcon3Clicked:
    any;
private timeoutDelayLockIcon31Clicked:
    any;
private timeoutDelayLockIcon22Clicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockOptionButtonOnChange:
    any;
private timeoutDelayLocklblTextClicked:
    any;
private timeoutDelayLocklblAddedByClicked:
    any;
private timeoutDelayLockIconDetailsClicked:
    any;
private timeoutDelayLocktxtCoverageDaysOnChange:
    any;
private timeoutDelayLockiconClearClicked:
    any;
private timeoutDelayLocklblCoverageDaysClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_StockManagerView.model = window.scope_StockManagerView.dehydrate();
        //window.scope_MasterPage.model = window.scope_StockManagerView.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._lightCast(window.scope_StockManagerView.model);
        // Joove.Common.applyScope(window.scope_StockManagerView);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IStockManagerViewScope, $timeout: ng.ITimeoutService) {
        window.scope_StockManagerView = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IStockManagerViewScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
chartOrderForecastYScaleMin:
            () => 0,
            chartStockLevelsYScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {

ItemsVMDS:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.StockManagerViewItemsVMDSViewModelDataset($scope.model, partialViewControlName);
            },

SelectedForecastItems:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.StockManagerViewSelectedForecastItemsViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("StockManagerView", "Render", "GET", [], {}, _modalOptions);
            },
AddSubcategory:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
SelectForecast:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'SelectForecast',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
RecalculateForecast:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'RecalculateForecast',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
RefreshFilters:
            async (caller, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if ((caller == "BusinessUnits")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listCategories']), null);
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);
                    }

                    if ((caller == "Categories")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSubcategories']), null);
                    }

                    if ((caller == "Subcategories")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listBaseUnits']), null);
                    }

                    if ((caller == "SKU")) {
                        Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listSKUs']), null);
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.dropdownRefresh(['ddlSKUs']), null);

                    Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listOrderForecastDetails']), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartOrderForecast"]), null);

                    Joove.Common.nullSafe<any>(() => window._commander.chartRefresh(["chartStockLevels"]), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
AddSKU:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.SelectedSKUs.add(Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.SelectedSKU, null)), null);

                    Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Description: " + Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.SelectedSKU.Description, "")), null);

                    window["scope_StockManagerView"].model.SelectedSKU = null;

                    Joove.Common.nullSafe<any>(() => $scope.actions.RefreshFilters("SKU"), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
SendForecastToSupplier:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'SendForecastToSupplier',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
CollapseRight:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if (Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseRightColumn, false)) {
                        window["scope_StockManagerView"].model.CollapseRightColumn = false;
                    } else {
                        window["scope_StockManagerView"].model.CollapseRightColumn = true;
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.dataListUpdateSize(['listOrderForecastDetails']), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
HandleRadioButton:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if (Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.FilterList, "") == "Alerts") {
                        window["scope_StockManagerView"].model.ShowAlerts = true;
                        window["scope_StockManagerView"].model.ShowRecommendations = false;
                        Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, " *** "), null);
                    } else if (Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.FilterList, "") == "Recommendations") {
                        window["scope_StockManagerView"].model.ShowAlerts = false;
                        window["scope_StockManagerView"].model.ShowRecommendations = true;
                    } else {
                        window["scope_StockManagerView"].model.ShowAlerts = true;
                        window["scope_StockManagerView"].model.ShowRecommendations = true;
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.dataListRefresh(['listOrderForecastDetails']), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
CollapseLeft:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if (Joove.Common.nullSafe<any>(() => window["scope_StockManagerView"].model.CollapseLeftColumn, false)) {
                        window["scope_StockManagerView"].model.CollapseLeftColumn = false;
                    } else {
                        window["scope_StockManagerView"].model.CollapseLeftColumn = true;
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.dataListUpdateSize(['listOrderForecastDetails']), null);


                    // Joove.Common.applyScope(window.scope_StockManagerView);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
EditedOFDetail:
            async (ofDetail, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'EditedOFDetail',
queryData: [], postData: {'model': $scope.model, 'ofDetail': ofDetail},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ApplySupplierCoverageDaysToAllItems:
            async (supplier, coverageDays, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'ApplySupplierCoverageDaysToAllItems',
queryData: [], postData: {'model': $scope.model, 'supplier': supplier, 'coverageDays': coverageDays},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
GoToFilteredKPIView:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'StockManagerView', action: 'GoToFilteredKPIView',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
IconFiltersClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIconFiltersClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIconFiltersClicked);
                }

                this.timeoutDelayLockIconFiltersClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.CollapseLeft(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

txtFromDateOnChange:
            (e, element, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocktxtFromDateOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocktxtFromDateOnChange);
                }

                this.timeoutDelayLocktxtFromDateOnChange = $timeout(() => {
                    Joove.Core.onChange($(element).get(0), null, true);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

txtToDateOnChange:
            (e, element, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocktxtToDateOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocktxtToDateOnChange);
                }

                this.timeoutDelayLocktxtToDateOnChange = $timeout(() => {
                    Joove.Core.onChange($(element).get(0), null, true);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIcon2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIcon2Clicked);
                }

                this.timeoutDelayLockIcon2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.GoToFilteredKPIView(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

listSuppliersOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSuppliersOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSuppliersOnChange);
                }

                this.timeoutDelayLocklistSuppliersOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listWarehousesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistWarehousesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistWarehousesOnChange);
                }

                this.timeoutDelayLocklistWarehousesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listBusinessUnitsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistBusinessUnitsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistBusinessUnitsOnChange);
                }

                this.timeoutDelayLocklistBusinessUnitsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("BusinessUnits", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listCategoriesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistCategoriesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistCategoriesOnChange);
                }

                this.timeoutDelayLocklistCategoriesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Categories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listSubcategoriesOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSubcategoriesOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSubcategoriesOnChange);
                }

                this.timeoutDelayLocklistSubcategoriesOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Subcategories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

ddlSubcategoryOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockddlSubcategoryOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockddlSubcategoryOnChange);
                }

                this.timeoutDelayLockddlSubcategoryOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddSubcategory(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listBaseUnitsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistBaseUnitsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistBaseUnitsOnChange);
                }

                this.timeoutDelayLocklistBaseUnitsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("BaseUnits", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

listSKUsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklistSKUsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklistSKUsOnChange);
                }

                this.timeoutDelayLocklistSKUsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("Subcategories", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

ddlSKUsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockddlSKUsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockddlSKUsOnChange);
                }

                this.timeoutDelayLockddlSKUsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddSKU(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

DropdownBoxOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockDropdownBoxOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockDropdownBoxOnChange);
                }

                this.timeoutDelayLockDropdownBoxOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshFilters("", null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

lstRecalculateClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLocklstRecalculateClicked != null) {
                    $timeout.cancel(this.timeoutDelayLocklstRecalculateClicked);
                }

                this.timeoutDelayLocklstRecalculateClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RecalculateForecast(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

lstSendClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLocklstSendClicked != null) {
                    $timeout.cancel(this.timeoutDelayLocklstSendClicked);
                }

                this.timeoutDelayLocklstSendClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SendForecastToSupplier(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

lstOrderForecastsOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocklstOrderForecastsOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocklstOrderForecastsOnChange);
                }

                this.timeoutDelayLocklstOrderForecastsOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SelectForecast(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon21Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ModalSupCapacityOForecast');
            },

ButtonClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ModalSupCapacityOForecast');
            },

Icon3Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.showModal(name + 'ModalSupCapacityOForecast');
            },

Icon31Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.showModal(name + 'ModalStockLevels');
            },

Icon22Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ModalStockLevels');
            },

Button1Clicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ModalStockLevels');
            },

OptionButtonOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockOptionButtonOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockOptionButtonOnChange);
                }

                this.timeoutDelayLockOptionButtonOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.HandleRadioButton(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

lblTextClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('Comments', targetProp, e);
            },

lblAddedByClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('Comments', targetProp, e);
            },

IconDetailsClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIconDetailsClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIconDetailsClicked);
                }

                this.timeoutDelayLockIconDetailsClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.CollapseRight(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

txtCoverageDaysOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLocktxtCoverageDaysOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLocktxtCoverageDaysOnChange);
                }

                this.timeoutDelayLocktxtCoverageDaysOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {

                        var p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel = Joove.Common.nullSafe<any>(() => _parents[0].Agreement.Supplier, null);
                        if( eval(`DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel`) != null && eval(`DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom`) != null ) {
                            p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel = eval(`DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel)`);

                        }
                        $scope.actions.ApplySupplierCoverageDaysToAllItems(p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel, Joove.Common.nullSafe<any>(() => _parents[0].CoverageDays, 0), null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 200);
            },

iconClearClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.DatasourceManager.clearFiltersToControlsBoundToDataSet('SelectedForecastItems', e);
            },

lblCoverageDaysClicked:
            (e: any): any => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('SelectedForecastItems', targetProp, e);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(StockManagerViewDataValidations);
        window._ruleEngine.addConditionalFormattings(StockManagerViewConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(StockManagerViewCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("StockManagerViewController", ["$scope", "$timeout", StockManagerViewController] as Array<string>);
}
