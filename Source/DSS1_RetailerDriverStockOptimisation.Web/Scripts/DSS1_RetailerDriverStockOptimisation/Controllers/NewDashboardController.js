var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var NewDashboardConditionalFormattings = [];
        var NewDashboardDataValidations = [];
        var NewDashboardCalculatedExpressions = [];
        // Manual Data for ddlWarehouse
        window["dataForddlWarehouse"] = [{
                _key: 1,
                _text: window._resourcesManager.getComboBoxManualValueDisplay('WarehouseDataSet', '0', false, null),
                _default: false
            }, {
                _key: 2,
                _text: window._resourcesManager.getComboBoxManualValueDisplay('WarehouseDataSet', '1', false, null),
                _default: false
            }, {
                _key: 3,
                _text: window._resourcesManager.getComboBoxManualValueDisplay('WarehouseDataSet', '2', false, null),
                _default: false
            }, {
                _key: 444,
                _text: window._resourcesManager.getComboBoxManualValueDisplay('WarehouseDataSet', '3', false, null),
                _default: false
            }, {
                _key: 4,
                _text: window._resourcesManager.getComboBoxManualValueDisplay('WarehouseDataSet', '4', false, null),
                _default: false
            }];
        // Datasets Column Info
        Controllers.BusinessUnitDataSet_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "BusinessUnit", null, false)];
        window["BusinessUnitDataSet_ColumnInfo"] = Controllers.BusinessUnitDataSet_ColumnInfo;
        Controllers.CategoryDataSet_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "Category", null, false)];
        window["CategoryDataSet_ColumnInfo"] = Controllers.CategoryDataSet_ColumnInfo;
        Controllers.SubCategoryDataSet_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "SubCategory", null, false)];
        window["SubCategoryDataSet_ColumnInfo"] = Controllers.SubCategoryDataSet_ColumnInfo;
        Controllers.BaseUnitDataSet_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "BaseUnit", null, false)];
        window["BaseUnitDataSet_ColumnInfo"] = Controllers.BaseUnitDataSet_ColumnInfo;
        Controllers.ItemDataSet_ColumnInfo = [new Joove.ColumnInfo("SKU", "string", null, false),
            new Joove.ColumnInfo("original", "Item", null, false)];
        window["ItemDataSet_ColumnInfo"] = Controllers.ItemDataSet_ColumnInfo;
        Controllers.Suppliers_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("original", "Supplier", null, false)];
        window["Suppliers_ColumnInfo"] = Controllers.Suppliers_ColumnInfo;
        Controllers.WarehouseDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, true)];
        window["WarehouseDataSet_ColumnInfo"] = Controllers.WarehouseDataSet_ColumnInfo;
        Controllers.ForecastVS_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("SupplierStock", "int", null, false),
            new Joove.ColumnInfo("TotalUnits", "int", null, false)];
        window["ForecastVS_ColumnInfo"] = Controllers.ForecastVS_ColumnInfo;
        Controllers.StockDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
            new Joove.ColumnInfo("TotalUnits", "int", null, false)];
        window["StockDataSet_ColumnInfo"] = Controllers.StockDataSet_ColumnInfo;
        var NewDashboardSubCategoryDataSetViewModelDataset = /** @class */ (function (_super) {
            __extends(NewDashboardSubCategoryDataSetViewModelDataset, _super);
            function NewDashboardSubCategoryDataSetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            NewDashboardSubCategoryDataSetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            NewDashboardSubCategoryDataSetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            NewDashboardSubCategoryDataSetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            NewDashboardSubCategoryDataSetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Category.SubCategory;
            };
            return NewDashboardSubCategoryDataSetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.NewDashboardSubCategoryDataSetViewModelDataset = NewDashboardSubCategoryDataSetViewModelDataset;
        // Datasets Projection Shemas
        window["ddlBusinessUnit_ProjectionScema"] = {};
        window["ddlSKU_ProjectionScema"] = {};
        window["ddlSupplier_ProjectionScema"] = {};
        var NewDashboardController = /** @class */ (function () {
            function NewDashboardController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_NewDashboard.model = window.scope_NewDashboard.dehydrate();
                    //window.scope_MasterPage.model = window.scope_NewDashboard.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.NewDashboard.NewDashboardViewModel._lightCast(window.scope_NewDashboard.model);
                    // Joove.Common.applyScope(window.scope_NewDashboard);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_NewDashboard = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.NewDashboard.NewDashboardViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            NewDashboardController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.NewDashboard.NewDashboardViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {};
                // Dataset Handler
                $scope.datasets = {
                    SubCategoryDataSet: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.NewDashboardSubCategoryDataSetViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("NewDashboard", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    LeadTimeDay: function (sku, locID, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'NewDashboard', action: 'LeadTimeDay',
                                        queryData: [], postData: { 'model': $scope.model, 'sku': sku, 'locID': locID },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    AssignValues: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'NewDashboard', action: 'AssignValues',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    AssignSKUinChart: function (sku, warehouse, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'NewDashboard', action: 'AssignSKUinChart',
                                        queryData: [], postData: { 'model': $scope.model, 'sku': sku, 'warehouse': warehouse },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    afterSelectingSKU: function (sku, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            window._context.isDirty = false;
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'NewDashboard', action: 'afterSelectingSKU',
                                queryData: [], postData: { 'model': $scope.model, 'sku': sku },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    refresh: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            window._context.isDirty = false;
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'NewDashboard', action: 'refresh',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    clearBelowBusinessUnits: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            window["scope_NewDashboard"].model.SubCategory = null;
                                            window["scope_NewDashboard"].model.Category = null;
                                            window["scope_NewDashboard"].model.Item = null;
                                            window["scope_NewDashboard"].model.BaseUnit = null;
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    clearBelowCat: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            window["scope_NewDashboard"].model.SubCategory = null;
                                            window["scope_NewDashboard"].model.Item = null;
                                            window["scope_NewDashboard"].model.BaseUnit = null;
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    ClearBelowSubCat: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            window["scope_NewDashboard"].model.Item = null;
                                            window["scope_NewDashboard"].model.BaseUnit = null;
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    clearItem: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            window["scope_NewDashboard"].model.Item = null;
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    ddlBusinessUnitOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlBusinessUnitOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlBusinessUnitOnChange);
                        }
                        _this.timeoutDelayLockddlBusinessUnitOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.clearBelowBusinessUnits(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlCategoryOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlCategoryOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlCategoryOnChange);
                        }
                        _this.timeoutDelayLockddlCategoryOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.clearBelowCat(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlSubcategoryOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlSubcategoryOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlSubcategoryOnChange);
                        }
                        _this.timeoutDelayLockddlSubcategoryOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.ClearBelowSubCat(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ButtonClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButtonClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButtonClicked);
                        }
                        _this.timeoutDelayLockButtonClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.refresh(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlWarehouseOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlWarehouseOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlWarehouseOnChange);
                        }
                        _this.timeoutDelayLockddlWarehouseOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.refresh(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    RowControl7Clicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockRowControl7Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockRowControl7Clicked);
                        }
                        _this.timeoutDelayLockRowControl7Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.AssignSKUinChart(Joove.Common.nullSafe(function () { return _parents[0].Item.SKU; }, ""), Joove.Common.nullSafe(function () { return _parents[0].Warehouse.Id; }, 0), null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(NewDashboardDataValidations);
                window._ruleEngine.addConditionalFormattings(NewDashboardConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(NewDashboardCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return NewDashboardController;
        }());
        angular.module("Application").controller("NewDashboardController", ["$scope", "$timeout", NewDashboardController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
