var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var _this = this;
        var StockManagerViewConditionalFormattings = [
            new Joove.JbRule({
                name: "AllExpandedConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, !(Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseRightColumn; }, false)) && !(Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseLeftColumn; }, false))];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "CollapseBothColumnsConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseRightColumn; }, false) && Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseLeftColumn; }, false)];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "CollapseLeftColumnOnlyConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseLeftColumn; }, false) && !(Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseRightColumn; }, false))];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "CollapseRightColumnOnlyConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseRightColumn; }, false) && !(Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseLeftColumn; }, false))];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
        ];
        Controllers.StockManagerView_listOrderForecastDetails_ConditionalFormattings = {
            ApplyRecommendationColorConditional: {
                'forRow': {
                    'whenTrue': ['ApplyCssClass|recommendation-color']
                },
                'forColumns': {}
            },
            ApplyAlertColorFromSystemConditional: {
                'forRow': {
                    'whenTrue': ['ApplyCssClass|alert-color']
                },
                'forColumns': {}
            },
            ApplyGerneratedAlertColorConditional: {
                'forRow': {
                    'whenTrue': ['ApplyCssClass|alert-color']
                },
                'forColumns': {}
            },
            ApplyAlertColorConditional: {
                'forRow': {
                    'whenTrue': ['ApplyCssClass|alert-color']
                },
                'forColumns': {}
            },
            HideRowIfNotAnsweredConditional: {
                'forRow': {},
                'forColumns': {
                    'SupplierAvailableQuantity': { 'whenTrue': ['Hide|'] }, 'Notification.Diff': { 'whenTrue': ['Hide|'] }, 'SupplierCanDeliver': { 'whenTrue': ['Hide|'] }
                }
            },
            HideListColumnsConditional: {
                'forRow': {},
                'forColumns': {
                    'Notification.Diff': { 'whenTrue': ['Hide|'] }, 'SupplierCanDeliver': { 'whenTrue': ['Hide|'] }, 'SupplierAvailableQuantity': { 'whenTrue': ['Hide|'] }
                }
            },
        };
        var StockManagerViewDataValidations = [];
        var StockManagerViewCalculatedExpressions = [];
        // Manual Data for DropdownBox
        window["dataForDropdownBox"] = [{
                _key: " ",
                _text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '0', false, null),
                _default: false
            }, {
                _key: "PBL",
                _text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '1', false, null),
                _default: false
            }, {
                _key: "PBS",
                _text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '2', false, null),
                _default: false
            }, {
                _key: "PBL-PBS",
                _text: window._resourcesManager.getComboBoxManualValueDisplay('FlowTypes', '3', false, null),
                _default: false
            }];
        // Manual Data for OptionButton
        window["dataForOptionButton"] = [{
                _key: "Alerts",
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '0', false, null),
                _default: false
            }, {
                _key: "Recommendations",
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '1', false, null),
                _default: false
            }, {
                _key: "All",
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('ListOptions', '2', false, null),
                _default: false
            }];
        // Datasets Column Info
        var listSuppliers_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Name",
                caption: window._resourcesManager.getDataListColumnCaption("listSuppliers", "Name", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSuppliers_ColumnInfo"] = listSuppliers_ColumnInfo;
        var listWarehouses_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listWarehouses", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listWarehouses_ColumnInfo"] = listWarehouses_ColumnInfo;
        var listBusinessUnits_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listBusinessUnits", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listBusinessUnits_ColumnInfo"] = listBusinessUnits_ColumnInfo;
        var listCategories_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listCategories", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listCategories_ColumnInfo"] = listCategories_ColumnInfo;
        var listSubcategories_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listSubcategories", "Description", false),
                groupable: true,
                searchable: false,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSubcategories_ColumnInfo"] = listSubcategories_ColumnInfo;
        Controllers.AllSubcategoriesDS_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "SubCategory", null, false)];
        window["AllSubcategoriesDS_ColumnInfo"] = Controllers.AllSubcategoriesDS_ColumnInfo;
        var listBaseUnits_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listBaseUnits", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listBaseUnits_ColumnInfo"] = listBaseUnits_ColumnInfo;
        var listSKUs_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Description",
                caption: window._resourcesManager.getDataListColumnCaption("listSKUs", "Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listSKUs_ColumnInfo"] = listSKUs_ColumnInfo;
        Controllers.FilteredItems_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
            new Joove.ColumnInfo("original", "Item", null, false)];
        window["FilteredItems_ColumnInfo"] = Controllers.FilteredItems_ColumnInfo;
        Controllers.FlowTypes_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, true)];
        window["FlowTypes_ColumnInfo"] = Controllers.FlowTypes_ColumnInfo;
        var lstOrderForecasts_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "int",
                dataTypeIsEnum: false,
                name: "Id",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "Id", false),
                groupable: true,
                searchable: true,
                visible: false,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "DateTime",
                dataTypeIsEnum: false,
                name: "StartDate",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "StartDate", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: { 'dateFormat': 'DD/MM/YY', 'backEndFormatting': 'dd/MM/yy', 'excelFormat': 'dd/MM/yy' },
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "DateTime",
                dataTypeIsEnum: false,
                name: "EndDate",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "EndDate", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: { 'dateFormat': 'D/MM/YYYY', 'backEndFormatting': 'd/MM/yyyy', 'excelFormat': 'd/MM/yyyy' },
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "State",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "State", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "CreatedBy",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "CreatedBy", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "DateTime",
                dataTypeIsEnum: false,
                name: "CreatedOn",
                caption: window._resourcesManager.getDataListColumnCaption("lstOrderForecasts", "CreatedOn", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: { 'dateFormat': 'D-MMM-YYYY H:mm', 'backEndFormatting': 'd-MMM-yyyy H:mm', 'excelFormat': 'd-MMM-yyyy H:mm' },
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["lstOrderForecasts_ColumnInfo"] = lstOrderForecasts_ColumnInfo;
        Controllers.ForecastVS_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("SupplierStock", "int", null, false),
            new Joove.ColumnInfo("OrderQuantity", "int", null, false),
            new Joove.ColumnInfo("RealOrderQuantity", "int", null, false)];
        window["ForecastVS_ColumnInfo"] = Controllers.ForecastVS_ColumnInfo;
        Controllers.StockDataSet_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
            new Joove.ColumnInfo("StockOnHand", "int", null, false),
            new Joove.ColumnInfo("OrderQuantity", "int", null, false),
            new Joove.ColumnInfo("SupplierStock", "int", null, false),
            new Joove.ColumnInfo("SalesQuantity", "int", null, false)];
        window["StockDataSet_ColumnInfo"] = Controllers.StockDataSet_ColumnInfo;
        Controllers.ListOptions_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, true)];
        window["ListOptions_ColumnInfo"] = Controllers.ListOptions_ColumnInfo;
        var listOrderForecastDetails_ColumnInfo = [
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Item.SKU",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Item.SKU", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Item.Description",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Item.Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Warehouse.Description",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Warehouse.Description", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "DateTime",
                dataTypeIsEnum: false,
                name: "RecommendedOrderDate",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "RecommendedOrderDate", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: { 'dateFormat': 'D/MM/YYYY', 'backEndFormatting': 'd/MM/yyyy', 'excelFormat': 'd/MM/yyyy' },
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "int",
                dataTypeIsEnum: false,
                name: "ItemCoverageDays",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "ItemCoverageDays", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "decimal",
                dataTypeIsEnum: false,
                name: "Quantity",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Quantity", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "string",
                dataTypeIsEnum: false,
                name: "Status",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Status", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: 100,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "int",
                dataTypeIsEnum: false,
                name: "Notification.Diff",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "Notification.Diff", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "int",
                dataTypeIsEnum: false,
                name: "SupplierAvailableQuantity",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "SupplierAvailableQuantity", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            }),
            new Joove.Widgets.DataListColumnInfo({
                dataType: "bool",
                dataTypeIsEnum: false,
                name: "SupplierCanDeliver",
                caption: window._resourcesManager.getDataListColumnCaption("listOrderForecastDetails", "SupplierCanDeliver", false),
                groupable: true,
                searchable: true,
                visible: true,
                orderable: true,
                editable: false,
                style: "",
                classes: "",
                itemType: Joove.Widgets.DataListColumnItemType.CHECKBOX,
                importable: false,
                supportsAggregators: true,
                length: null,
                formatting: null,
                width: null,
                css: "",
                isEncrypted: false,
                showFullImage: false
            })
        ];
        window["listOrderForecastDetails_ColumnInfo"] = listOrderForecastDetails_ColumnInfo;
        Controllers.Comments_ColumnInfo = [new Joove.ColumnInfo("Text", "string", null, false),
            new Joove.ColumnInfo("AddedBy", "string", null, false)];
        window["Comments_ColumnInfo"] = Controllers.Comments_ColumnInfo;
        Controllers.SelectedForecastItems_ColumnInfo = [new Joove.ColumnInfo("Item.SKU", "string", null, false),
            new Joove.ColumnInfo("Item.Description", "string", null, false),
            new Joove.ColumnInfo("CoverageDays", "int", null, false)];
        window["SelectedForecastItems_ColumnInfo"] = Controllers.SelectedForecastItems_ColumnInfo;
        var StockManagerViewItemsVMDSViewModelDataset = /** @class */ (function (_super) {
            __extends(StockManagerViewItemsVMDSViewModelDataset, _super);
            function StockManagerViewItemsVMDSViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            StockManagerViewItemsVMDSViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            StockManagerViewItemsVMDSViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            StockManagerViewItemsVMDSViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            StockManagerViewItemsVMDSViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.SelectedSKUs;
            };
            return StockManagerViewItemsVMDSViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.StockManagerViewItemsVMDSViewModelDataset = StockManagerViewItemsVMDSViewModelDataset;
        var StockManagerViewSelectedForecastItemsViewModelDataset = /** @class */ (function (_super) {
            __extends(StockManagerViewSelectedForecastItemsViewModelDataset, _super);
            function StockManagerViewSelectedForecastItemsViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            StockManagerViewSelectedForecastItemsViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            StockManagerViewSelectedForecastItemsViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            StockManagerViewSelectedForecastItemsViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            StockManagerViewSelectedForecastItemsViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.ItemsInSelectedForecast;
            };
            return StockManagerViewSelectedForecastItemsViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.StockManagerViewSelectedForecastItemsViewModelDataset = StockManagerViewSelectedForecastItemsViewModelDataset;
        // Datasets Projection Shemas
        window["listSuppliers_ProjectionScema"] = {};
        window["listWarehouses_ProjectionScema"] = {};
        window["listBusinessUnits_ProjectionScema"] = {};
        window["ddlSubcategory_ProjectionScema"] = {};
        window["lstOrderForecasts_ProjectionScema"] = {};
        window["Table1_ProjectionScema"] = {};
        var StockManagerViewController = /** @class */ (function () {
            function StockManagerViewController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_StockManagerView.model = window.scope_StockManagerView.dehydrate();
                    //window.scope_MasterPage.model = window.scope_StockManagerView.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._lightCast(window.scope_StockManagerView.model);
                    // Joove.Common.applyScope(window.scope_StockManagerView);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_StockManagerView = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            StockManagerViewController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.StockManagerViewViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {
                    chartOrderForecastYScaleMin: function () { return 0; },
                    chartStockLevelsYScaleMin: function () { return 0; },
                };
                // Dataset Handler
                $scope.datasets = {
                    ItemsVMDS: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.StockManagerViewItemsVMDSViewModelDataset($scope.model, partialViewControlName);
                    },
                    SelectedForecastItems: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.StockManagerViewSelectedForecastItemsViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("StockManagerView", "Render", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    AddSubcategory: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    SelectForecast: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'StockManagerView', action: 'SelectForecast',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    RecalculateForecast: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'StockManagerView', action: 'RecalculateForecast',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    RefreshFilters: function (caller, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if ((caller == "BusinessUnits")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listCategories']); }, null);
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            }
                                            if ((caller == "Categories")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSubcategories']); }, null);
                                            }
                                            if ((caller == "Subcategories")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listBaseUnits']); }, null);
                                            }
                                            if ((caller == "SKU")) {
                                                Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listSKUs']); }, null);
                                            }
                                            Joove.Common.nullSafe(function () { return window._commander.dropdownRefresh(['ddlSKUs']); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listOrderForecastDetails']); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartOrderForecast"]); }, null);
                                            Joove.Common.nullSafe(function () { return window._commander.chartRefresh(["chartStockLevels"]); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    AddSKU: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.SelectedSKUs.add(Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.SelectedSKU; }, null)); }, null);
                                            Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Description: " + Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.SelectedSKU.Description; }, "")); }, null);
                                            window["scope_StockManagerView"].model.SelectedSKU = null;
                                            Joove.Common.nullSafe(function () { return $scope.actions.RefreshFilters("SKU"); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    SendForecastToSupplier: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'StockManagerView', action: 'SendForecastToSupplier',
                                        queryData: [], postData: { 'model': $scope.model },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    CollapseRight: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if (Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseRightColumn; }, false)) {
                                                window["scope_StockManagerView"].model.CollapseRightColumn = false;
                                            }
                                            else {
                                                window["scope_StockManagerView"].model.CollapseRightColumn = true;
                                            }
                                            Joove.Common.nullSafe(function () { return window._commander.dataListUpdateSize(['listOrderForecastDetails']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    HandleRadioButton: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if (Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.FilterList; }, "") == "Alerts") {
                                                window["scope_StockManagerView"].model.ShowAlerts = true;
                                                window["scope_StockManagerView"].model.ShowRecommendations = false;
                                                Joove.Common.nullSafe(function () { return CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, " *** "); }, null);
                                            }
                                            else if (Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.FilterList; }, "") == "Recommendations") {
                                                window["scope_StockManagerView"].model.ShowAlerts = false;
                                                window["scope_StockManagerView"].model.ShowRecommendations = true;
                                            }
                                            else {
                                                window["scope_StockManagerView"].model.ShowAlerts = true;
                                                window["scope_StockManagerView"].model.ShowRecommendations = true;
                                            }
                                            Joove.Common.nullSafe(function () { return window._commander.dataListRefresh(['listOrderForecastDetails']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    CollapseLeft: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        var implementation, spamHelper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if (Joove.Common.nullSafe(function () { return window["scope_StockManagerView"].model.CollapseLeftColumn; }, false)) {
                                                window["scope_StockManagerView"].model.CollapseLeftColumn = false;
                                            }
                                            else {
                                                window["scope_StockManagerView"].model.CollapseLeftColumn = true;
                                            }
                                            Joove.Common.nullSafe(function () { return window._commander.dataListUpdateSize(['listOrderForecastDetails']); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 2:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    EditedOFDetail: function (ofDetail, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    return [4 /*yield*/, window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit)];
                                case 1:
                                    _a.sent();
                                    window._context.isDirty = false;
                                    Joove.Core.executeControllerActionNew({
                                        verb: 'POST', controller: 'StockManagerView', action: 'EditedOFDetail',
                                        queryData: [], postData: { 'model': $scope.model, 'ofDetail': ofDetail },
                                        cb: _cb, modalOptions: _modalOptions, event: _e
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    ApplySupplierCoverageDaysToAllItems: function (supplier, coverageDays, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            window._context.isDirty = false;
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'StockManagerView', action: 'ApplySupplierCoverageDaysToAllItems',
                                queryData: [], postData: { 'model': $scope.model, 'supplier': supplier, 'coverageDays': coverageDays },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    GoToFilteredKPIView: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            window._context.isDirty = false;
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'StockManagerView', action: 'GoToFilteredKPIView',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    IconFiltersClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockIconFiltersClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockIconFiltersClicked);
                        }
                        _this.timeoutDelayLockIconFiltersClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.CollapseLeft(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                    txtFromDateOnChange: function (e, element, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocktxtFromDateOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocktxtFromDateOnChange);
                        }
                        _this.timeoutDelayLocktxtFromDateOnChange = $timeout(function () {
                            Joove.Core.onChange($(element).get(0), null, true);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    txtToDateOnChange: function (e, element, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocktxtToDateOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocktxtToDateOnChange);
                        }
                        _this.timeoutDelayLocktxtToDateOnChange = $timeout(function () {
                            Joove.Core.onChange($(element).get(0), null, true);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Icon2Clicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockIcon2Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockIcon2Clicked);
                        }
                        _this.timeoutDelayLockIcon2Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.GoToFilteredKPIView(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSuppliersOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSuppliersOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSuppliersOnChange);
                        }
                        _this.timeoutDelayLocklistSuppliersOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listWarehousesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistWarehousesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistWarehousesOnChange);
                        }
                        _this.timeoutDelayLocklistWarehousesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listBusinessUnitsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistBusinessUnitsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistBusinessUnitsOnChange);
                        }
                        _this.timeoutDelayLocklistBusinessUnitsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("BusinessUnits", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listCategoriesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistCategoriesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistCategoriesOnChange);
                        }
                        _this.timeoutDelayLocklistCategoriesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Categories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSubcategoriesOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSubcategoriesOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSubcategoriesOnChange);
                        }
                        _this.timeoutDelayLocklistSubcategoriesOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Subcategories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlSubcategoryOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlSubcategoryOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlSubcategoryOnChange);
                        }
                        _this.timeoutDelayLockddlSubcategoryOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.AddSubcategory(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listBaseUnitsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistBaseUnitsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistBaseUnitsOnChange);
                        }
                        _this.timeoutDelayLocklistBaseUnitsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("BaseUnits", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    listSKUsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklistSKUsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklistSKUsOnChange);
                        }
                        _this.timeoutDelayLocklistSKUsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("Subcategories", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ddlSKUsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockddlSKUsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockddlSKUsOnChange);
                        }
                        _this.timeoutDelayLockddlSKUsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.AddSKU(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    DropdownBoxOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockDropdownBoxOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockDropdownBoxOnChange);
                        }
                        _this.timeoutDelayLockDropdownBoxOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RefreshFilters("", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    lstRecalculateClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLocklstRecalculateClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLocklstRecalculateClicked);
                        }
                        _this.timeoutDelayLocklstRecalculateClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.RecalculateForecast(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                    lstSendClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLocklstSendClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLocklstSendClicked);
                        }
                        _this.timeoutDelayLocklstSendClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.SendForecastToSupplier(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                    lstOrderForecastsOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocklstOrderForecastsOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocklstOrderForecastsOnChange);
                        }
                        _this.timeoutDelayLocklstOrderForecastsOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.SelectForecast(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Icon21Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'ModalSupCapacityOForecast');
                    },
                    ButtonClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'ModalSupCapacityOForecast');
                    },
                    Icon3Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.showModal(name + 'ModalSupCapacityOForecast');
                    },
                    Icon31Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.showModal(name + 'ModalStockLevels');
                    },
                    Icon22Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'ModalStockLevels');
                    },
                    Button1Clicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                        window._commander.hideModal(name + 'ModalStockLevels');
                    },
                    OptionButtonOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLockOptionButtonOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockOptionButtonOnChange);
                        }
                        _this.timeoutDelayLockOptionButtonOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.HandleRadioButton(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    lblTextClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('Comments', targetProp, e);
                    },
                    lblAddedByClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('Comments', targetProp, e);
                    },
                    IconDetailsClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockIconDetailsClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockIconDetailsClicked);
                        }
                        _this.timeoutDelayLockIconDetailsClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.CollapseRight(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                        }, 0);
                    },
                    txtCoverageDaysOnChange: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (_this.timeoutDelayLocktxtCoverageDaysOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLocktxtCoverageDaysOnChange);
                        }
                        _this.timeoutDelayLocktxtCoverageDaysOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                var p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel = Joove.Common.nullSafe(function () { return _parents[0].Agreement.Supplier; }, null);
                                if (eval("DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel") != null && eval("DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom") != null) {
                                    p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel = eval("DSS1_RetailerDriverStockOptimisation.ViewModels.StockManagerView.Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel)");
                                }
                                $scope.actions.ApplySupplierCoverageDaysToAllItems(p_Table_CurrentItem_SupplierParameter_Agreement_Agreement_Supplier_SupplierViewModel, Joove.Common.nullSafe(function () { return _parents[0].CoverageDays; }, 0), null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 200);
                    },
                    iconClearClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        Joove.DatasourceManager.clearFiltersToControlsBoundToDataSet('SelectedForecastItems', e);
                    },
                    lblCoverageDaysClicked: function (e) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        var $element = $(e.target);
                        var targetProp = $element.attr('joove-ds-sort-OnClick');
                        Joove.DatasourceManager.sortControlsBoundToDataSet('SelectedForecastItems', targetProp, e);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(StockManagerViewDataValidations);
                window._ruleEngine.addConditionalFormattings(StockManagerViewConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(StockManagerViewCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return StockManagerViewController;
        }());
        angular.module("Application").controller("StockManagerViewController", ["$scope", "$timeout", StockManagerViewController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
