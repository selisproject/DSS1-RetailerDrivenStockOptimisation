// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_KPIDashboardViewOnly: DSS1_RetailerDriverStockOptimisation.Controllers.IKPIDashboardViewOnlyScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const KPIDashboardViewOnlyConditionalFormattings = [
        ];
const KPIDashboardViewOnlyDataValidations = [
        ];
const KPIDashboardViewOnlyCalculatedExpressions = [
        ];

// Datasets Column Info
export var InventoryDaysKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
           new Joove.ColumnInfo("InventoryDays", "decimal", null, false)];
window["InventoryDaysKPIDataSet_ColumnInfo"] = InventoryDaysKPIDataSet_ColumnInfo;
export var UnitsKPIDataSet_ColumnInfo = [new Joove.ColumnInfo("SalesForecastDateFormatted", "string", null, false),
           new Joove.ColumnInfo("Units", "int", null, false)];
window["UnitsKPIDataSet_ColumnInfo"] = UnitsKPIDataSet_ColumnInfo;
export var SLALeadMonthly_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
                                        new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["SLALeadMonthly_ColumnInfo"] = SLALeadMonthly_ColumnInfo;
export var SLADelivery_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
                                     new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["SLADelivery_ColumnInfo"] = SLADelivery_ColumnInfo;
export var WasteDataSet_ColumnInfo = [new Joove.ColumnInfo("DateFormatted", "string", null, false),
                                      new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["WasteDataSet_ColumnInfo"] = WasteDataSet_ColumnInfo;
export var PlatformDataSet_ColumnInfo = [new Joove.ColumnInfo("Month", "string", null, false),
           new Joove.ColumnInfo("Percentage", "decimal", null, false)];
window["PlatformDataSet_ColumnInfo"] = PlatformDataSet_ColumnInfo;

export class KPIDashboardViewOnlyItemsVMDSViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.SelectedSKUs;
    }


}



// Datasets Projection Shemas




window["chartWaste_ProjectionScema"] = {};



export interface IKPIDashboardViewOnlyScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class KPIDashboardViewOnlyController {


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_KPIDashboardViewOnly.model = window.scope_KPIDashboardViewOnly.dehydrate();
        //window.scope_MasterPageForSlide.model = window.scope_KPIDashboardViewOnly.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel._lightCast(window.scope_KPIDashboardViewOnly.model);
        // Joove.Common.applyScope(window.scope_KPIDashboardViewOnly);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IKPIDashboardViewOnlyScope, $timeout: ng.ITimeoutService) {
        window.scope_KPIDashboardViewOnly = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPageForSlide._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IKPIDashboardViewOnlyScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.KPIDashboardViewOnly.KPIDashboardViewOnlyViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPageForSlide.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
chartStockLevelsInvDaysLine0LineAnnotationValue:
            () => 20,
            chartStockLevelsInvDaysYScaleMin: () => 0,
                chartStockLevelsUnitsLine0LineAnnotationValue: () => 1000,
                chartStockLevelsUnitsYScaleMin: () => 0,
                chartSLALeadTimeLine0LineAnnotationValue: () => 50,
                chartSLALeadTimeYScaleMin: () => 0,
                chartSLALeadTimeYScaleMax: () => 100,
                chartSLADeliveryLine0LineAnnotationValue: () => 50,
                chartSLADeliveryYScaleMin: () => 0,
                chartWasteLine0LineAnnotationValue: () => 5,
                chartWasteYScaleMin: () => 0.0,
                chartWasteYScaleMax: () => 10.0,
                chartOrderForecastYScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {

ItemsVMDS:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.KPIDashboardViewOnlyItemsVMDSViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("KPIDashboardViewOnly", "Render", "GET", [], {}, _modalOptions);
            },
AddSubcategory:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_KPIDashboardViewOnly);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
RefreshFilters:
            async (caller, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_KPIDashboardViewOnly);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
AddSKU:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_KPIDashboardViewOnly);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
ViewFiltered:
            async (supIdJoined, warehouseIdJoined, businessUnitIdJoined, catIdJoined, subcatIdJoined, baseUnitIdJoined, skusJoined, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("KPIDashboardViewOnly", "ViewFiltered", "GET", [supIdJoined, warehouseIdJoined, businessUnitIdJoined, catIdJoined, subcatIdJoined, baseUnitIdJoined, skusJoined], {}, _modalOptions);
            },
        };
// Events
        $scope.eventCallbacks = {
        };

// Rules
        window._ruleEngine.addDataValidations(KPIDashboardViewOnlyDataValidations);
        window._ruleEngine.addConditionalFormattings(KPIDashboardViewOnlyConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(KPIDashboardViewOnlyCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPageForSlide as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("KPIDashboardViewOnlyController", ["$scope", "$timeout", KPIDashboardViewOnlyController] as Array<string>);
}
