var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = function (e) {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg; // Gecko, Trident, Chrome 34+
        return msg;
    }
};
var DSS1_RetailerDriverStockOptimisation;
(function (DSS1_RetailerDriverStockOptimisation) {
    var Controllers;
    (function (Controllers) {
        var AnalyticsConditionalFormattings = [];
        var AnalyticsDataValidations = [];
        var AnalyticsCalculatedExpressions = [
            new Joove.JbRule({
                name: "CalculatedExpression",
                type: Joove.RuleTypes.CalculatedExpression,
                evaluatedAtServer: false,
                isDataSetRule: false,
                condition: function (_control) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, true];
                        });
                    });
                },
                expression: function (_parents) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if ((Joove.Common.nullSafe(function () { return window["scope_Analytics"].model.TimeRange; }, "") == "now-1y")) {
                                return [2 /*return*/, "Last Year"];
                            }
                            else if ((Joove.Common.nullSafe(function () { return window["scope_Analytics"].model.TimeRange; }, "") == "now-1M")) {
                                return [2 /*return*/, "Last Month"];
                            }
                            else if ((Joove.Common.nullSafe(function () { return window["scope_Analytics"].model.TimeRange; }, "") == "now-1d")) {
                                return [2 /*return*/, "Last Day"];
                            }
                            else {
                                return [2 /*return*/, "Last Week"];
                            }
                            return [2 /*return*/];
                        });
                    });
                },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
            }),
        ];
        // Datasets Column Info
        Controllers.RequestOverTimeDataset_ColumnInfo = [new Joove.ColumnInfo("keyAsString", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["RequestOverTimeDataset_ColumnInfo"] = Controllers.RequestOverTimeDataset_ColumnInfo;
        Controllers.RequestLatencyDataset_ColumnInfo = [new Joove.ColumnInfo("keyAsString", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["RequestLatencyDataset_ColumnInfo"] = Controllers.RequestLatencyDataset_ColumnInfo;
        Controllers.Top5ServiceDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["Top5ServiceDataset_ColumnInfo"] = Controllers.Top5ServiceDataset_ColumnInfo;
        Controllers.Top5OperationDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["Top5OperationDataset_ColumnInfo"] = Controllers.Top5OperationDataset_ColumnInfo;
        Controllers.Top5ConsumerDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["Top5ConsumerDataset_ColumnInfo"] = Controllers.Top5ConsumerDataset_ColumnInfo;
        Controllers.ErrorRequestDataset_ColumnInfo = [new Joove.ColumnInfo("key", "string", null, false),
            new Joove.ColumnInfo("doc_count", "int", null, false)];
        window["ErrorRequestDataset_ColumnInfo"] = Controllers.ErrorRequestDataset_ColumnInfo;
        var AnalyticsLogsDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsLogsDatasetViewModelDataset, _super);
            function AnalyticsLogsDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsLogsDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsLogsDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsLogsDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsLogsDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Logs;
            };
            return AnalyticsLogsDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsLogsDatasetViewModelDataset = AnalyticsLogsDatasetViewModelDataset;
        var AnalyticsTop5ServiceDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsTop5ServiceDatasetViewModelDataset, _super);
            function AnalyticsTop5ServiceDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsTop5ServiceDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsTop5ServiceDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsTop5ServiceDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsTop5ServiceDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Top5Service;
            };
            AnalyticsTop5ServiceDatasetViewModelDataset.prototype.Chart1Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], { "doc_count": "doc_count" }, false));
                return result;
            };
            return AnalyticsTop5ServiceDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsTop5ServiceDatasetViewModelDataset = AnalyticsTop5ServiceDatasetViewModelDataset;
        var AnalyticsTop5OperationDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsTop5OperationDatasetViewModelDataset, _super);
            function AnalyticsTop5OperationDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsTop5OperationDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsTop5OperationDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsTop5OperationDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsTop5OperationDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Top5Operation;
            };
            AnalyticsTop5OperationDatasetViewModelDataset.prototype.Chart11Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], { "doc_count": "doc_count" }, false));
                return result;
            };
            return AnalyticsTop5OperationDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsTop5OperationDatasetViewModelDataset = AnalyticsTop5OperationDatasetViewModelDataset;
        var AnalyticsTop5ConsumerDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsTop5ConsumerDatasetViewModelDataset, _super);
            function AnalyticsTop5ConsumerDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsTop5ConsumerDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsTop5ConsumerDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsTop5ConsumerDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsTop5ConsumerDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.Top5Consumer;
            };
            AnalyticsTop5ConsumerDatasetViewModelDataset.prototype.Chart12Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], { "doc_count": "doc_count" }, false));
                return result;
            };
            return AnalyticsTop5ConsumerDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsTop5ConsumerDatasetViewModelDataset = AnalyticsTop5ConsumerDatasetViewModelDataset;
        var AnalyticsErrorRequestDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsErrorRequestDatasetViewModelDataset, _super);
            function AnalyticsErrorRequestDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsErrorRequestDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsErrorRequestDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsErrorRequestDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsErrorRequestDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.ErrorRequest;
            };
            AnalyticsErrorRequestDatasetViewModelDataset.prototype.Chart121Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("key", ["doc_count"], { "doc_count": "IP" }, false));
                return result;
            };
            return AnalyticsErrorRequestDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsErrorRequestDatasetViewModelDataset = AnalyticsErrorRequestDatasetViewModelDataset;
        var AnalyticsRequestOverTimeDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsRequestOverTimeDatasetViewModelDataset, _super);
            function AnalyticsRequestOverTimeDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsRequestOverTimeDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsRequestOverTimeDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsRequestOverTimeDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsRequestOverTimeDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.RequestOverTime;
            };
            AnalyticsRequestOverTimeDatasetViewModelDataset.prototype.Chart13Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("keyAsString", ["doc_count"], { "doc_count": "Request" }, false));
                return result;
            };
            return AnalyticsRequestOverTimeDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsRequestOverTimeDatasetViewModelDataset = AnalyticsRequestOverTimeDatasetViewModelDataset;
        var AnalyticsRequestLatencyDatasetViewModelDataset = /** @class */ (function (_super) {
            __extends(AnalyticsRequestLatencyDatasetViewModelDataset, _super);
            function AnalyticsRequestLatencyDatasetViewModelDataset(model, partialViewControlName) {
                if (partialViewControlName === void 0) { partialViewControlName = null; }
                var _this = _super.call(this, model, partialViewControlName) || this;
                _this.limit = 0;
                return _this;
            }
            AnalyticsRequestLatencyDatasetViewModelDataset.prototype.Filter = function (inputs) {
                var $scope = { model: this.model };
                return function (DataItem, index, items) {
                    return true;
                };
            };
            AnalyticsRequestLatencyDatasetViewModelDataset.prototype.PackInputs = function ($control) {
                return Joove.DatasourceManager.getDatasetControlInputs($control);
            };
            AnalyticsRequestLatencyDatasetViewModelDataset.prototype.Sort = function (items) {
                return items;
            };
            AnalyticsRequestLatencyDatasetViewModelDataset.prototype.GetSource = function (parents) {
                return this.model.RequestLatency;
            };
            AnalyticsRequestLatencyDatasetViewModelDataset.prototype.Chart131Retrieve = function (inputs, requestInfo, aggregatorsInfo, context) {
                var result = this.Retrieve(inputs, requestInfo, requestInfo.aggregators.map(function (c) { c.type = Joove.AggregatorTypes[c.type]; return c; }), context);
                result.Data = result.Groups.SubGroups.map(this.ChartMapperAggregation("keyAsString", ["doc_count"], { "doc_count": "Request" }, false));
                return result;
            };
            return AnalyticsRequestLatencyDatasetViewModelDataset;
        }(Joove.IViewModelDataset));
        Controllers.AnalyticsRequestLatencyDatasetViewModelDataset = AnalyticsRequestLatencyDatasetViewModelDataset;
        var AnalyticsController = /** @class */ (function () {
            function AnalyticsController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_Analytics.model = window.scope_Analytics.dehydrate();
                    //window.scope_MasterPage.model = window.scope_Analytics.model;
                    DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._lightCast(window.scope_Analytics.model);
                    // Joove.Common.applyScope(window.scope_Analytics);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_Analytics = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            AnalyticsController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.Analytics.AnalyticsViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent');
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {
                    Chart131XScaleStepSize: function () { return 5000; },
                    Chart121YScaleMin: function () { return 0; },
                };
                // Dataset Handler
                $scope.datasets = {
                    LogsDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsLogsDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    Top5ServiceDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5ServiceDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    Top5OperationDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5OperationDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    Top5ConsumerDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsTop5ConsumerDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    ErrorRequestDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsErrorRequestDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    RequestOverTimeDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsRequestOverTimeDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                    RequestLatencyDataset: function (partialViewControlName) {
                        if (partialViewControlName === void 0) { partialViewControlName = null; }
                        return new DSS1_RetailerDriverStockOptimisation.Controllers.AnalyticsRequestLatencyDatasetViewModelDataset($scope.model, partialViewControlName);
                    },
                };
                // Controller actions
                $scope.actions = {
                    Render: function (dt, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("Analytics", "Render", "GET", [dt], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    Button2Clicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButton2Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButton2Clicked);
                        }
                        _this.timeoutDelayLockButton2Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render("now-1d", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    ButtonClicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButtonClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButtonClicked);
                        }
                        _this.timeoutDelayLockButtonClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render("now-1w", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Button1Clicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButton1Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButton1Clicked);
                        }
                        _this.timeoutDelayLockButton1Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render("now-1M", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Button21Clicked: function (e, DataItem, _parents) {
                        window._recorder.addState(e);
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButton21Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButton21Clicked);
                        }
                        _this.timeoutDelayLockButton21Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Render("now-1y", null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(AnalyticsDataValidations);
                window._ruleEngine.addConditionalFormattings(AnalyticsConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(AnalyticsCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return AnalyticsController;
        }());
        angular.module("Application").controller("AnalyticsController", ["$scope", "$timeout", AnalyticsController]);
    })(Controllers = DSS1_RetailerDriverStockOptimisation.Controllers || (DSS1_RetailerDriverStockOptimisation.Controllers = {}));
})(DSS1_RetailerDriverStockOptimisation || (DSS1_RetailerDriverStockOptimisation = {}));
