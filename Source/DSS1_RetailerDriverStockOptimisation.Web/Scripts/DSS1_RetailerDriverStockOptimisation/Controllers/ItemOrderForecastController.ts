// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_ItemOrderForecast: DSS1_RetailerDriverStockOptimisation.Controllers.IItemOrderForecastScope; }
namespace DSS1_RetailerDriverStockOptimisation.Controllers {
const ItemOrderForecastConditionalFormattings = [
new Joove.JbRule({
name: "ShowHideChart1284Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart1284.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideChart1243Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart1243.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideChart108Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart108.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideChart104Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart104.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideChart105Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart105.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideChart107Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_ItemOrderForecast"].model.Chart107.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const ItemOrderForecastDataValidations = [
        ];
const ItemOrderForecastCalculatedExpressions = [
        ];

// Datasets Column Info
export var Suppliers_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
                                   new Joove.ColumnInfo("original", "Supplier", null, false)];
window["Suppliers_ColumnInfo"] = Suppliers_ColumnInfo;
export var Items_ColumnInfo = [new Joove.ColumnInfo("Description", "string", null, false),
                               new Joove.ColumnInfo("SKU", "string", null, false)];
window["Items_ColumnInfo"] = Items_ColumnInfo;
export var Warehouse107VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                        new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Warehouse107VM_ColumnInfo"] = Warehouse107VM_ColumnInfo;
export var Chart108VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                    new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Chart108VM_ColumnInfo"] = Chart108VM_ColumnInfo;
export var Chart105VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                    new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Chart105VM_ColumnInfo"] = Chart105VM_ColumnInfo;
export var Chart104VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                    new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Chart104VM_ColumnInfo"] = Chart104VM_ColumnInfo;
export var Chart1243VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                     new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Chart1243VM_ColumnInfo"] = Chart1243VM_ColumnInfo;
export var Chart1284VM_ColumnInfo = [new Joove.ColumnInfo("OrderDateFormatted", "string", null, false),
                                     new Joove.ColumnInfo("Quantity", "decimal", null, false)];
window["Chart1284VM_ColumnInfo"] = Chart1284VM_ColumnInfo;

export class ItemOrderForecastOrderProposalsDSViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.OrderProposals;
    }


}



export class ItemOrderForecastWarehouse107VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart107;
    }


    Chart107Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



export class ItemOrderForecastChart105VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart105;
    }


    Chart105Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



export class ItemOrderForecastChart108VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart108;
    }


    Chart108Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



export class ItemOrderForecastChart104VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart104;
    }


    Chart104Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



export class ItemOrderForecastChart107VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart107;
    }


}



export class ItemOrderForecastChart1243VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart1243;
    }


    Chart1243Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



export class ItemOrderForecastChart1284VMViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Chart1284;
    }


    Chart1284Retrieve(inputs: any, requestInfo: Joove.DatasourceRequest, aggregatorsInfo: Array<any>, context: any): any {
        const result = this.Retrieve(inputs, requestInfo, aggregatorsInfo, context);
        result.Data = result.Data.map(this.ChartMapper("OrderDateFormatted", ["Quantity"], ["Recommended Quantity"], []));
        return result;
    }
}



// Datasets Projection Shemas
window["DropdownBox_ProjectionScema"] = {};
window["DropdownBox1_ProjectionScema"] = {Supplier:
                                          {Id: ''
                                          }
                                         };








export interface IItemOrderForecastScope extends Joove.IWebPageScope {
model:
    DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class ItemOrderForecastController {
private timeoutDelayLockButtonClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_ItemOrderForecast.model = window.scope_ItemOrderForecast.dehydrate();
        //window.scope_MasterPage.model = window.scope_ItemOrderForecast.model;
        DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._lightCast(window.scope_ItemOrderForecast.model);
        // Joove.Common.applyScope(window.scope_ItemOrderForecast);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IItemOrderForecastScope, $timeout: ng.ITimeoutService) {
        window.scope_ItemOrderForecast = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IItemOrderForecastScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS1_RetailerDriverStockOptimisation.ViewModels.ItemOrderForecast.ItemOrderForecastViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
Chart107YScaleMin:
            () => 0,
            Chart108YScaleMin: () => 0,
                Chart105YScaleMin: () => 0,
                Chart104YScaleMin: () => 0,
                Chart1243YScaleMin: () => 0,
                Chart1284YScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {

OrderProposalsDS:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastOrderProposalsDSViewModelDataset($scope.model, partialViewControlName);
            },

Warehouse107VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastWarehouse107VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart105VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart105VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart108VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart108VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart104VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart104VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart107VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart107VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart1243VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart1243VMViewModelDataset($scope.model, partialViewControlName);
            },

Chart1284VM:
            (partialViewControlName: string = null) => {
                return new DSS1_RetailerDriverStockOptimisation.Controllers.ItemOrderForecastChart1284VMViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ItemOrderForecast", "Render", "GET", [], {}, _modalOptions);
            },
CalcQuantity:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ItemOrderForecast', action: 'CalcQuantity',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
CalcReplenishmentCycle:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ItemOrderForecast', action: 'CalcReplenishmentCycle',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
CalculateOrderDate:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ItemOrderForecast', action: 'CalculateOrderDate',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
OrderForecastPerSKU:
            async (itemSku, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ItemOrderForecast", "OrderForecastPerSKU", "GET", [itemSku], {}, _modalOptions);
            },
CreateNotifications:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ItemOrderForecast', action: 'CreateNotifications',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
RefreshCharts:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ItemOrderForecast', action: 'RefreshCharts',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RefreshCharts(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(ItemOrderForecastDataValidations);
        window._ruleEngine.addConditionalFormattings(ItemOrderForecastConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(ItemOrderForecastCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("ItemOrderForecastController", ["$scope", "$timeout", ItemOrderForecastController] as Array<string>);
}
