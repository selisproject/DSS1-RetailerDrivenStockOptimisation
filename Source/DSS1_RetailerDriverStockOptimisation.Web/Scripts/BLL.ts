// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS1_RetailerDriverStockOptimisation.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Domain_LocalResourcesDefinition";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
    }
OrderProposal_Res_ASSOC_SalesForecast_OrderForecasts_OrderForecast_SalesForecast:
    any;
}

export class Agreement  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Agreement";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.AgreementStatuses = [];
        this.Items = [];
        this.Warehouses = [];
        this.StockOnHands = [];
        this.TransportUnCaps = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullTruckLoad:
    any;
AgreementDocument:
    any;
LeadTime:
    any;
DateCreated:
    any;
WDDeliveries:
    any;
TargetInventoryDays:
    any;
Profile:
    any;
AgreementStatuses:
    any;
Items:
    any;
Supplier:
    any;
Warehouses:
    any;
StockOnHands:
    any;
TransportUnCaps:
    any;
    static setAgreementStatuses = ($this, items) => {
        if (items == null) items = [];
        if ($this.AgreementStatuses == null) $this.AgreementStatuses = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AgreementStatuses.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeAgreementStatuses($this, $this.AgreementStatuses[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyAgreementStatuses($this, copyItems);
    }
    static addManyAgreementStatuses = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addAgreementStatuses($this, items[i]);
        }
    }
    static addAgreementStatuses = ($this, item) => {
        if ($this.AgreementStatuses == null) $this.AgreementStatuses = [];
        if (item == null || $this.AgreementStatuses.indexOf(item) > -1) return;
        $this.AgreementStatuses.push(item);
    }
    static addRangeAgreementStatuses = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Agreement.addAgreementStatuses($this, item));
    }
    static removeAgreementStatuses = ($this, item) => {
        if ($this == null || $this.AgreementStatuses == null || $this.AgreementStatuses.indexOf(item) === -1) return;
        var _index = $this.AgreementStatuses.indexOf(item);
        $this.AgreementStatuses.splice(_index, 1);
    }
    static clearAgreementStatuses = ($this) => {
        $this.AgreementStatuses = null;
    }
    static setItems = ($this, items) => {
        if (items == null) items = [];
        if ($this.Items == null) $this.Items = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Items.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeItems($this, $this.Items[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyItems($this, copyItems);
    }
    static addManyItems = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addItems($this, items[i]);
        }
    }
    static addItems = ($this, item) => {
        if ($this.Items == null) $this.Items = [];
        if (item == null || $this.Items.indexOf(item) > -1) return;
        $this.Items.push(item);
        Item.addAgreements(item, $this);
    }
    static addRangeItems = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Agreement.addItems($this, item));
    }
    static removeItems = ($this, item) => {
        if ($this == null || $this.Items == null || $this.Items.indexOf(item) === -1) return;
        var _index = $this.Items.indexOf(item);
        $this.Items.splice(_index, 1);
        Item.removeAgreements(item, $this);
    }
    static clearItems = ($this) => {
        $this.Items = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setWarehouses = ($this, items) => {
        if (items == null) items = [];
        if ($this.Warehouses == null) $this.Warehouses = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Warehouses.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeWarehouses($this, $this.Warehouses[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyWarehouses($this, copyItems);
    }
    static addManyWarehouses = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addWarehouses($this, items[i]);
        }
    }
    static addWarehouses = ($this, item) => {
        if ($this.Warehouses == null) $this.Warehouses = [];
        if (item == null || $this.Warehouses.indexOf(item) > -1) return;
        $this.Warehouses.push(item);
    }
    static addRangeWarehouses = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Agreement.addWarehouses($this, item));
    }
    static removeWarehouses = ($this, item) => {
        if ($this == null || $this.Warehouses == null || $this.Warehouses.indexOf(item) === -1) return;
        var _index = $this.Warehouses.indexOf(item);
        $this.Warehouses.splice(_index, 1);
    }
    static clearWarehouses = ($this) => {
        $this.Warehouses = null;
    }
    static setStockOnHands = ($this, items) => {
        if (items == null) items = [];
        if ($this.StockOnHands == null) $this.StockOnHands = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StockOnHands.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeStockOnHands($this, $this.StockOnHands[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyStockOnHands($this, copyItems);
    }
    static addManyStockOnHands = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands($this, items[i]);
        }
    }
    static addStockOnHands = ($this, item) => {
        if ($this.StockOnHands == null) $this.StockOnHands = [];
        if (item == null || $this.StockOnHands.indexOf(item) > -1) return;
        $this.StockOnHands.push(item);
        if (item.Agreement != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.StockOnHand.setAgreement(item, $this);
        }
    }
    static addRangeStockOnHands = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands($this, item));
    }
    static removeStockOnHands = ($this, item) => {
        if ($this == null || $this.StockOnHands == null || $this.StockOnHands.indexOf(item) === -1) return;
        var _index = $this.StockOnHands.indexOf(item);
        $this.StockOnHands.splice(_index, 1);
        item.Agreement = null;
    }
    static clearStockOnHands = ($this) => {
        $this.StockOnHands = null;
    }
    static setTransportUnCaps = ($this, items) => {
        if (items == null) items = [];
        if ($this.TransportUnCaps == null) $this.TransportUnCaps = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.TransportUnCaps.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeTransportUnCaps($this, $this.TransportUnCaps[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Agreement.addManyTransportUnCaps($this, copyItems);
    }
    static addManyTransportUnCaps = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addTransportUnCaps($this, items[i]);
        }
    }
    static addTransportUnCaps = ($this, item) => {
        if ($this.TransportUnCaps == null) $this.TransportUnCaps = [];
        if (item == null || $this.TransportUnCaps.indexOf(item) > -1) return;
        $this.TransportUnCaps.push(item);
    }
    static addRangeTransportUnCaps = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Agreement.addTransportUnCaps($this, item));
    }
    static removeTransportUnCaps = ($this, item) => {
        if ($this == null || $this.TransportUnCaps == null || $this.TransportUnCaps.indexOf(item) === -1) return;
        var _index = $this.TransportUnCaps.indexOf(item);
        $this.TransportUnCaps.splice(_index, 1);
    }
    static clearTransportUnCaps = ($this) => {
        $this.TransportUnCaps = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AgreementStatus  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AgreementStatus";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
IssuedBy:
    any;
Status:
    any;
DateIssued:
    any;
ApprovedBySonae:
    any;
ApprovedBySupplier:
    any;
InProgress:
    any;
Active:
    any;
UnderRevision:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Response  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Response";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Status:
    any;
Message:
    any;
Details:
    any;
Code:
    any;
    static GenerateResponse(status: any,message: any,details: any,code: any): any{let newResponse = Joove.Common.nullSafe<any>(() => new DSS1_RetailerDriverStockOptimisation.BO.Response(), null);

                newResponse.Status = status;

                newResponse.Message = message;

                newResponse.Details = details;

                newResponse.Code = code;

                return newResponse;

                                                                                     }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AppNotification  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AppNotification";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.AppNotificationActions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Type:
    any;
Reason:
    any;
DateCreated:
    any;
IsRead:
    any;
Item:
    any;
Delta:
    any;
AppNotificationActions:
    any;
Recipient:
    any;
    static setAppNotificationActions = ($this, items) => {
        if (items == null) items = [];
        if ($this.AppNotificationActions == null) $this.AppNotificationActions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AppNotificationActions.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.AppNotification.removeAppNotificationActions($this, $this.AppNotificationActions[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addManyAppNotificationActions($this, copyItems);
    }
    static addManyAppNotificationActions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addAppNotificationActions($this, items[i]);
        }
    }
    static addAppNotificationActions = ($this, item) => {
        if ($this.AppNotificationActions == null) $this.AppNotificationActions = [];
        if (item == null || $this.AppNotificationActions.indexOf(item) > -1) return;
        $this.AppNotificationActions.push(item);
    }
    static addRangeAppNotificationActions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.AppNotification.addAppNotificationActions($this, item));
    }
    static removeAppNotificationActions = ($this, item) => {
        if ($this == null || $this.AppNotificationActions == null || $this.AppNotificationActions.indexOf(item) === -1) return;
        var _index = $this.AppNotificationActions.indexOf(item);
        $this.AppNotificationActions.splice(_index, 1);
    }
    static clearAppNotificationActions = ($this) => {
        $this.AppNotificationActions = null;
    }
    static setRecipient = ($this, value) => {
        var oldValue = $this.Recipient;
        $this.Recipient = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AppNotificationAction  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.AppNotificationAction";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Link:
    any;
Type:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Company  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Company";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Contacts = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
Contacts:
    any;
    static setContacts = ($this, items) => {
        if (items == null) items = [];
        if ($this.Contacts == null) $this.Contacts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Contacts.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Company.removeContacts($this, $this.Contacts[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Company.addManyContacts($this, copyItems);
    }
    static addManyContacts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts($this, items[i]);
        }
    }
    static addContacts = ($this, item) => {
        if ($this.Contacts == null) $this.Contacts = [];
        if (item == null || $this.Contacts.indexOf(item) > -1) return;
        $this.Contacts.push(item);
        if (item.Company != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.Contact.setCompany(item, $this);
        }
    }
    static addRangeContacts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts($this, item));
    }
    static removeContacts = ($this, item) => {
        if ($this == null || $this.Contacts == null || $this.Contacts.indexOf(item) === -1) return;
        var _index = $this.Contacts.indexOf(item);
        $this.Contacts.splice(_index, 1);
        item.Company = null;
    }
    static clearContacts = ($this) => {
        $this.Contacts = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Dashboard  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Dashboard";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Statistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Statistics:
    any;
    static setStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statistics == null) $this.Statistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statistics.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Dashboard.removeStatistics($this, $this.Statistics[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addManyStatistics($this, copyItems);
    }
    static addManyStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addStatistics($this, items[i]);
        }
    }
    static addStatistics = ($this, item) => {
        if ($this.Statistics == null) $this.Statistics = [];
        if (item == null || $this.Statistics.indexOf(item) > -1) return;
        $this.Statistics.push(item);
    }
    static addRangeStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Dashboard.addStatistics($this, item));
    }
    static removeStatistics = ($this, item) => {
        if ($this == null || $this.Statistics == null || $this.Statistics.indexOf(item) === -1) return;
        var _index = $this.Statistics.indexOf(item);
        $this.Statistics.splice(_index, 1);
    }
    static clearStatistics = ($this) => {
        $this.Statistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Statistics  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Statistics";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalUnits:
    any;
Description:
    any;
Result:
    any;
LeadTime:
    any;
WeekDay:
    any;
StockOnHandDate:
    any;
StockOnHand:
    any;
OrderQuantity:
    any;
SalesQuantity:
    any;
QuantitySalesForecast:
    any;
StockOnHandDateFormatted:
    any;
SupplierStock:
    any;
QuantitySum:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
Threshold:
    any;
OrderDate:
    any;
OrderDateFormatted:
    any;
RealOrderQuantity:
    any;
Warehouse:
    any;
Item:
    any;
Supplier:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MakeRequest  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.MakeRequest";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.MakeRequestKey = 0;
    }
MakeRequestKey:
    any;
    static Analytics(q: any,fromDate: any,toDate: any): any{let analyticsObject = new Object() as any;

                analyticsObject.query = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate), null);

                let interval = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetInterval(fromDate), "");

                analyticsObject.aggs = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetAggregations(interval), null);

                let meta = new Object() as any;

                meta.excludes = ["message"];

                analyticsObject.source = meta;

                return analyticsObject;

                                                               }
        static GetAggregations(interval: any): any{let aggs = new Object() as any;

                let top_service = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("Service.keyword", 5, true), null);

                let top_operation = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("Operation.keyword", 5, true), null);

                let from_ip = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("IP.keyword", 5, true), null);

                let verb_type = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("RequestMethod.keyword", 5, true), null);

                let status = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetTermQuery("StatusCode", 5, true), null);

                let elapsed_msecs = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);

                let req_over_time = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetHistogramQuery("Timestamp", interval), null);

                let req_latency = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetBucketHistogramQuery("ElapsedMsecs", 2000), null);

                aggs.TopService = top_service;

                aggs.TopOperation = top_operation;

                aggs.FromIP = from_ip;

                aggs.VerbType = verb_type;

                aggs.Status = status;

                aggs.ElapsedMsecs = elapsed_msecs;

                aggs.RequestOverTime = req_over_time;

                aggs.RequestLatency = req_latency;

                aggs.Errors = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(), null);

                return aggs;

                                                  }
        static GetBucketHistogramQuery(field: any,interval: any): any{let q = new Object() as any;

                let hist = new Object() as any;

                q.Histogram = hist;

                hist.Field = field;

                hist.Interval = interval;

                return q;

                                                                     }
        static GetDateFormat(interval: any): any{if ((interval == "month")) {
    return "yyyy-MM";
} else if ((interval == "day")) {
    return "yyyy-MM-dd";
} else if ((interval == "6h")) {
    return "yyyy-MM-dd HH:mm";
} else if ((interval == "h")) {
    return "yyyy-MM-dd HH:mm";
} else {return "yyyy-MM-dd HH:mm";
}

                                        }
static GetErrorFilter(): any{let errorFilter = new Object() as any;

                                     let filterRoot = new Object() as any;

                                     let filter = new Object() as any;

                                     let failureRoot = new Object() as any;

                                     let successRoot = new Object() as any;

                                     let failure = new Object() as any;

                                     let success = new Object() as any;

                                     let timestampFailure = new Object() as any;

                                     timestampFailure.gte = "400";

                                     failure.StatusCode = timestampFailure;

                                     failureRoot.Range = failure;

                                     filter.Failure = failureRoot;

                                     let timestampSuccess = new Object() as any;

                                     timestampSuccess.lt = "400";

                                     success.StatusCode = timestampSuccess;

                                     successRoot.Range = success;

                                     filter.Success = successRoot;

                                     filterRoot.Filters = filter;

                                     errorFilter.Filters = filterRoot;

                                     return errorFilter;

                                    }
        static GetFilterByTimePeriod(fromDate: any,toDate: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(fromDate), false))) {
    fromDate = "now-1w";
}

if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(toDate), false))) {
    toDate = "now";
}

let timeRange = new Object() as any;

let timestamp = new Object() as any;

timestamp.gte = fromDate;

timestamp.lte = toDate;

timeRange.timestamp = timestamp;

return timeRange;

                                                            }
static GetHistogramQuery(field: any,interval: any): any{let q = new Object() as any;

                let hist = new Object() as any;

                q.DateHistogram = hist;

                hist.Field = field;

                hist.Interval = interval;

                hist.Format = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetDateFormat(interval), "");

                hist.Offset = "+0h";

                let stats = new Object() as any;

                stats.statistics = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);

                stats.errors = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(), null);

                q.Aggregator = stats;

                return q;

                                                               }
        static GetInterval(fromDate: any): any{if ((fromDate == "now-1y")) {
    return "month";
} else if ((fromDate == "now-1M")) {
    return "day";
} else if ((fromDate == "now-1w")) {
    return "6h";
} else if ((fromDate == "now-1d")) {
    return "hour";
} else {return "day";
}

                                      }
static GetQuery(q: any,fromDate: any,toDate: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(fromDate), false))) {
    fromDate = "now-1w";
}

if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(toDate), false))) {
    toDate = "now";
}

let queryObject = new Object() as any;

let logic = new Object() as any;

logic.must = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQueryStringQuery(q), null);

let filter = new Object() as any;

filter.range = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetFilterByTimePeriod(fromDate, toDate), null);

logic.filter = filter;

queryObject.logic = logic;

return queryObject;

                                                      }
static GetQueryStringQuery(q: any): any{let must = new Object() as any;

                                                if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(q), false))) {
    let serializer = new CLMS.Framework.Utilities.Serializer<any>();
        must.match_all = Joove.Common.nullSafe<any>(() => serializer.FromJson("{\"must\": {\"match_all\": {}}"), null);
    } else {let queryString = new Object() as any;
        queryString.AnalyzeWildcard = true;
        queryString.Query = q;
        must.QueryString = queryString;
    }

    return must;

                                           }
    static GetStatQuery(field: any): any{let q = new Object() as any;

                                             let stats = new Object() as any;

                                             q.stats = stats;

                                             stats.field = field;

                                             return q;

                                            }
        static GetTermQuery(field: any,size: any,aggsEnable: any): any{let q = new Object() as any;

                let term = new Object() as any;

                q.terms = term;

                term.field = field;

                if ((aggsEnable)) {
    let aggs = new Object() as any;
        q.Aggs = aggs;
        q.Aggs.ResposeStatus = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetErrorFilter(), null);
        q.Aggs.ResponseTime = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetStatQuery("ElapsedMsecs"), null);
    }

    if ((CLMS.Framework.Number.GreaterThan(() => size, () => 0))) {
    term.size = size;
}

return q;

                                                              }
static Query(q: any,fromDate: any,toDate: any): any{let searchObject = new Object() as any;

                let sorts = [];

                Joove.Common.nullSafe<any>(() => sorts.add(Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.SortByTimestamp("desc"), null)), null);

                searchObject.sort = sorts;

                searchObject.query = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.MakeRequest.GetQuery(q, fromDate, toDate), null);

                let meta = new Object() as any;

                meta.excludes = ["message"];

                searchObject.source = meta;

                return searchObject;

                                                           }
        static SortByTimestamp(direction: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(direction), false))) {
    direction = "desc";
}

let sortObject = new Object() as any;

let orderObject = new Object() as any;

orderObject.order = direction;

sortObject.Timestamp = orderObject;

return sortObject;

                                           }
static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MakeRequestKey == null || $this.MakeRequestKey == 0;
    }
}

export class RequestLog  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.RequestLog";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.RequestLogKey = 0;
    }
RequestPath:
    any;
Message:
    any;
RequestId:
    any;
RequestMethod:
    any;
ElapsedMsecs:
    any;
IP:
    any;
Service:
    any;
Operation:
    any;
StatusCode:
    any;
Timestamp:
    any;
Username:
    any;
RequestUri:
    any;
ClientId:
    any;
ClientName:
    any;
ProductName:
    any;
RequestLogKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.RequestLogKey == null || $this.RequestLogKey == 0;
    }
}

export class Buckets  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Buckets";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.key = "";
    }
key:
    any;
doc_count:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.key == null || $this.key == "";
    }
}

export class Convertor  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Convertor";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.ConvertorKey = 0;
    }
ConvertorKey:
    any;
    static ErrorRateToBucket(error: any): any{let fail = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();

                fail.key = "Failure";

                fail.doc_count = Joove.Common.nullSafe<any>(() => error.Buckets.Failure.doc_count, 0);

                let success = new DSS1_RetailerDriverStockOptimisation.BO.Buckets();

                success.key = "Success";

                success.doc_count = Joove.Common.nullSafe<any>(() => error.Buckets.Success.doc_count, 0);

                let buckets = [];

                Joove.Common.nullSafe<any>(() => buckets.add(fail), null);

                Joove.Common.nullSafe<any>(() => buckets.add(success), null);

                return buckets;

                                                 }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConvertorKey == null || $this.ConvertorKey == 0;
    }
}

export class HIstogramBucket  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.HIstogramBucket";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.key = 0;
    }
key:
    any;
keyAsString:
    any;
doc_count:
    any;
avg:
    any;
sum:
    any;
max:
    any;
min:
    any;
failure:
    any;
success:
    any;
error_rate:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.key == null || $this.key == 0;
    }
}

export class Error  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Error";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.ErrorKey = 0;
    }
ErrorKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ErrorKey == null || $this.ErrorKey == 0;
    }
}

export class QueryBuilder  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.QueryBuilder";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.QueryBuilderKey = 0;
    }
QueryBuilderKey:
    any;
    static GetClientToken(username: any): any{let q = "+ClientId";

                return q;

                                                 }
        static GetQuery(username: any,product: any,service: any): any{let clientKeys = Joove.Common.nullSafe<any>(() => DSS1_RetailerDriverStockOptimisation.BO.QueryBuilder.GetClientToken(username), "");

                let q = "+tags:exposed " + clientKeys;

                if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
    return product.trim();
    }, "")), false)))) {
        q = q + " +Product:" + product;
    }

    if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
    return service.trim();
    }, "")), false)))) {
        q = q + " +Service:" + service;
    }

    return q;

                                                                 }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.QueryBuilderKey == null || $this.QueryBuilderKey == 0;
    }
}

export class DeliverySchedule  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LeadTime:
    any;
Weekday:
    any;
NameOfDay:
    any;
DBWeekday:
    any;
Supplier:
    any;
Item:
    any;
Warehouse:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeDeliverySchedules(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Category  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Category";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.SubCategory = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
SubCategory:
    any;
BusinessUnit:
    any;
    static setSubCategory = ($this, items) => {
        if (items == null) items = [];
        if ($this.SubCategory == null) $this.SubCategory = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SubCategory.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Category.removeSubCategory($this, $this.SubCategory[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Category.addManySubCategory($this, copyItems);
    }
    static addManySubCategory = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory($this, items[i]);
        }
    }
    static addSubCategory = ($this, item) => {
        if ($this.SubCategory == null) $this.SubCategory = [];
        if (item == null || $this.SubCategory.indexOf(item) > -1) return;
        $this.SubCategory.push(item);
        if (item.Category != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SubCategory.setCategory(item, $this);
        }
    }
    static addRangeSubCategory = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory($this, item));
    }
    static removeSubCategory = ($this, item) => {
        if ($this == null || $this.SubCategory == null || $this.SubCategory.indexOf(item) === -1) return;
        var _index = $this.SubCategory.indexOf(item);
        $this.SubCategory.splice(_index, 1);
        item.Category = null;
    }
    static clearSubCategory = ($this) => {
        $this.SubCategory = null;
    }
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.removeCategories(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SubCategory  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SubCategory";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.BaseUnits = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
Category:
    any;
BaseUnits:
    any;
    static setCategory = ($this, value) => {
        var oldValue = $this.Category;
        $this.Category = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Category.removeSubCategory(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Category.addSubCategory(value, $this);
        }
    }
    static setBaseUnits = ($this, items) => {
        if (items == null) items = [];
        if ($this.BaseUnits == null) $this.BaseUnits = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BaseUnits.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.SubCategory.removeBaseUnits($this, $this.BaseUnits[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addManyBaseUnits($this, copyItems);
    }
    static addManyBaseUnits = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits($this, items[i]);
        }
    }
    static addBaseUnits = ($this, item) => {
        if ($this.BaseUnits == null) $this.BaseUnits = [];
        if (item == null || $this.BaseUnits.indexOf(item) > -1) return;
        $this.BaseUnits.push(item);
        if (item.SubCategory != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.BaseUnit.setSubCategory(item, $this);
        }
    }
    static addRangeBaseUnits = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits($this, item));
    }
    static removeBaseUnits = ($this, item) => {
        if ($this == null || $this.BaseUnits == null || $this.BaseUnits.indexOf(item) === -1) return;
        var _index = $this.BaseUnits.indexOf(item);
        $this.BaseUnits.splice(_index, 1);
        item.SubCategory = null;
    }
    static clearBaseUnits = ($this) => {
        $this.BaseUnits = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BusinessUnit  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Categories = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
Categories:
    any;
Supplier:
    any;
    static setCategories = ($this, items) => {
        if (items == null) items = [];
        if ($this.Categories == null) $this.Categories = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Categories.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.removeCategories($this, $this.Categories[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addManyCategories($this, copyItems);
    }
    static addManyCategories = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories($this, items[i]);
        }
    }
    static addCategories = ($this, item) => {
        if ($this.Categories == null) $this.Categories = [];
        if (item == null || $this.Categories.indexOf(item) > -1) return;
        $this.Categories.push(item);
        if (item.BusinessUnit != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.Category.setBusinessUnit(item, $this);
        }
    }
    static addRangeCategories = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.addCategories($this, item));
    }
    static removeCategories = ($this, item) => {
        if ($this == null || $this.Categories == null || $this.Categories.indexOf(item) === -1) return;
        var _index = $this.Categories.indexOf(item);
        $this.Categories.splice(_index, 1);
        item.BusinessUnit = null;
    }
    static clearCategories = ($this) => {
        $this.Categories = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null && oldValue.BusinessUnit != null) {
                oldValue.BusinessUnit = null;
            }
            if ($this.Supplier.BusinessUnit !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.Supplier.setBusinessUnit(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BaseUnit  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.BaseUnit";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Number:
    any;
Description:
    any;
SubCategory:
    any;
    static setSubCategory = ($this, value) => {
        var oldValue = $this.SubCategory;
        $this.SubCategory = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.SubCategory.removeBaseUnits(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.SubCategory.addBaseUnits(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class InventoryItem  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.InventoryItem";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SafetyStock:
    any;
Status:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeInventoryItems(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Item  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Item";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Agreements = [];
        this.DeliverySchedules = [];
        this.InventoryItems = [];
        this.SupplierCapacities = [];
        this.Notifications = [];
        this.PastOrders = [];
        this.ItemsForecast = [];
        this.SLALeadTimes = [];
        this.SLADeliveries = [];
        this.StocksOnHand = [];
        this.CoverageDays = 1;
        this['_key'] = this.SKU = "";
    }
SKU:
    any;
Description:
    any;
UPC:
    any;
AvgDailyDemand:
    any;
CoverageDays:
    any;
PalletSize:
    any;
SupplierPackSize:
    any;
InnerPackSize:
    any;
PalletType:
    any;
PalTI:
    any;
PalHI:
    any;
UOM:
    any;
Agreements:
    any;
DeliverySchedules:
    any;
InventoryItems:
    any;
SupplierCapacities:
    any;
Supplier:
    any;
BusinessUnit:
    any;
Category:
    any;
SubCategory:
    any;
BaseUnit:
    any;
MinimumQuantity:
    any;
Notifications:
    any;
PastOrders:
    any;
ItemsForecast:
    any;
SLALeadTimes:
    any;
SLADeliveries:
    any;
StocksOnHand:
    any;
    static setAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Agreements == null) $this.Agreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Agreements.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeAgreements($this, $this.Agreements[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyAgreements($this, copyItems);
    }
    static addManyAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addAgreements($this, items[i]);
        }
    }
    static addAgreements = ($this, item) => {
        if ($this.Agreements == null) $this.Agreements = [];
        if (item == null || $this.Agreements.indexOf(item) > -1) return;
        $this.Agreements.push(item);
        Agreement.addItems(item, $this);
    }
    static addRangeAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addAgreements($this, item));
    }
    static removeAgreements = ($this, item) => {
        if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1) return;
        var _index = $this.Agreements.indexOf(item);
        $this.Agreements.splice(_index, 1);
        Agreement.removeItems(item, $this);
    }
    static clearAgreements = ($this) => {
        $this.Agreements = null;
    }
    static setDeliverySchedules = ($this, items) => {
        if (items == null) items = [];
        if ($this.DeliverySchedules == null) $this.DeliverySchedules = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DeliverySchedules.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeDeliverySchedules($this, $this.DeliverySchedules[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyDeliverySchedules($this, copyItems);
    }
    static addManyDeliverySchedules = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules($this, items[i]);
        }
    }
    static addDeliverySchedules = ($this, item) => {
        if ($this.DeliverySchedules == null) $this.DeliverySchedules = [];
        if (item == null || $this.DeliverySchedules.indexOf(item) > -1) return;
        $this.DeliverySchedules.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.DeliverySchedule.setItem(item, $this);
        }
    }
    static addRangeDeliverySchedules = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addDeliverySchedules($this, item));
    }
    static removeDeliverySchedules = ($this, item) => {
        if ($this == null || $this.DeliverySchedules == null || $this.DeliverySchedules.indexOf(item) === -1) return;
        var _index = $this.DeliverySchedules.indexOf(item);
        $this.DeliverySchedules.splice(_index, 1);
        item.Item = null;
    }
    static clearDeliverySchedules = ($this) => {
        $this.DeliverySchedules = null;
    }
    static setInventoryItems = ($this, items) => {
        if (items == null) items = [];
        if ($this.InventoryItems == null) $this.InventoryItems = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.InventoryItems.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeInventoryItems($this, $this.InventoryItems[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyInventoryItems($this, copyItems);
    }
    static addManyInventoryItems = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems($this, items[i]);
        }
    }
    static addInventoryItems = ($this, item) => {
        if ($this.InventoryItems == null) $this.InventoryItems = [];
        if (item == null || $this.InventoryItems.indexOf(item) > -1) return;
        $this.InventoryItems.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.InventoryItem.setItem(item, $this);
        }
    }
    static addRangeInventoryItems = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addInventoryItems($this, item));
    }
    static removeInventoryItems = ($this, item) => {
        if ($this == null || $this.InventoryItems == null || $this.InventoryItems.indexOf(item) === -1) return;
        var _index = $this.InventoryItems.indexOf(item);
        $this.InventoryItems.splice(_index, 1);
        item.Item = null;
    }
    static clearInventoryItems = ($this) => {
        $this.InventoryItems = null;
    }
    static setSupplierCapacities = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierCapacities == null) $this.SupplierCapacities = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierCapacities.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeSupplierCapacities($this, $this.SupplierCapacities[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManySupplierCapacities($this, copyItems);
    }
    static addManySupplierCapacities = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities($this, items[i]);
        }
    }
    static addSupplierCapacities = ($this, item) => {
        if ($this.SupplierCapacities == null) $this.SupplierCapacities = [];
        if (item == null || $this.SupplierCapacities.indexOf(item) > -1) return;
        $this.SupplierCapacities.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity.setItem(item, $this);
        }
    }
    static addRangeSupplierCapacities = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities($this, item));
    }
    static removeSupplierCapacities = ($this, item) => {
        if ($this == null || $this.SupplierCapacities == null || $this.SupplierCapacities.indexOf(item) === -1) return;
        var _index = $this.SupplierCapacities.indexOf(item);
        $this.SupplierCapacities.splice(_index, 1);
        item.Item = null;
    }
    static clearSupplierCapacities = ($this) => {
        $this.SupplierCapacities = null;
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
        }
    }
    static setCategory = ($this, value) => {
        var oldValue = $this.Category;
        $this.Category = value;
        if (value != null) {
        }
    }
    static setSubCategory = ($this, value) => {
        var oldValue = $this.SubCategory;
        $this.SubCategory = value;
        if (value != null) {
        }
    }
    static setBaseUnit = ($this, value) => {
        var oldValue = $this.BaseUnit;
        $this.BaseUnit = value;
        if (value != null) {
        }
    }
    static setMinimumQuantity = ($this, value) => {
        var oldValue = $this.MinimumQuantity;
        $this.MinimumQuantity = value;
        if (value != null) {
            if (oldValue != null && oldValue.Item != null) {
                oldValue.Item = null;
            }
            if ($this.MinimumQuantity.Item !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity.setItem(value, $this);
            }
        }
    }
    static setNotifications = ($this, items) => {
        if (items == null) items = [];
        if ($this.Notifications == null) $this.Notifications = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Notifications.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeNotifications($this, $this.Notifications[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyNotifications($this, copyItems);
    }
    static addManyNotifications = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications($this, items[i]);
        }
    }
    static addNotifications = ($this, item) => {
        if ($this.Notifications == null) $this.Notifications = [];
        if (item == null || $this.Notifications.indexOf(item) > -1) return;
        $this.Notifications.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.Notification.setItem(item, $this);
        }
    }
    static addRangeNotifications = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications($this, item));
    }
    static removeNotifications = ($this, item) => {
        if ($this == null || $this.Notifications == null || $this.Notifications.indexOf(item) === -1) return;
        var _index = $this.Notifications.indexOf(item);
        $this.Notifications.splice(_index, 1);
        item.Item = null;
    }
    static clearNotifications = ($this) => {
        $this.Notifications = null;
    }
    static setPastOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.PastOrders == null) $this.PastOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PastOrders.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removePastOrders($this, $this.PastOrders[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyPastOrders($this, copyItems);
    }
    static addManyPastOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders($this, items[i]);
        }
    }
    static addPastOrders = ($this, item) => {
        if ($this.PastOrders == null) $this.PastOrders = [];
        if (item == null || $this.PastOrders.indexOf(item) > -1) return;
        $this.PastOrders.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.PastOrder.setItem(item, $this);
        }
    }
    static addRangePastOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders($this, item));
    }
    static removePastOrders = ($this, item) => {
        if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1) return;
        var _index = $this.PastOrders.indexOf(item);
        $this.PastOrders.splice(_index, 1);
        item.Item = null;
    }
    static clearPastOrders = ($this) => {
        $this.PastOrders = null;
    }
    static setItemsForecast = ($this, items) => {
        if (items == null) items = [];
        if ($this.ItemsForecast == null) $this.ItemsForecast = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ItemsForecast.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeItemsForecast($this, $this.ItemsForecast[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyItemsForecast($this, copyItems);
    }
    static addManyItemsForecast = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast($this, items[i]);
        }
    }
    static addItemsForecast = ($this, item) => {
        if ($this.ItemsForecast == null) $this.ItemsForecast = [];
        if (item == null || $this.ItemsForecast.indexOf(item) > -1) return;
        $this.ItemsForecast.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.Sales.setItem(item, $this);
        }
    }
    static addRangeItemsForecast = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast($this, item));
    }
    static removeItemsForecast = ($this, item) => {
        if ($this == null || $this.ItemsForecast == null || $this.ItemsForecast.indexOf(item) === -1) return;
        var _index = $this.ItemsForecast.indexOf(item);
        $this.ItemsForecast.splice(_index, 1);
        item.Item = null;
    }
    static clearItemsForecast = ($this) => {
        $this.ItemsForecast = null;
    }
    static setSLALeadTimes = ($this, items) => {
        if (items == null) items = [];
        if ($this.SLALeadTimes == null) $this.SLALeadTimes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SLALeadTimes.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLALeadTimes($this, $this.SLALeadTimes[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManySLALeadTimes($this, copyItems);
    }
    static addManySLALeadTimes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes($this, items[i]);
        }
    }
    static addSLALeadTimes = ($this, item) => {
        if ($this.SLALeadTimes == null) $this.SLALeadTimes = [];
        if (item == null || $this.SLALeadTimes.indexOf(item) > -1) return;
        $this.SLALeadTimes.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime.setItem(item, $this);
        }
    }
    static addRangeSLALeadTimes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes($this, item));
    }
    static removeSLALeadTimes = ($this, item) => {
        if ($this == null || $this.SLALeadTimes == null || $this.SLALeadTimes.indexOf(item) === -1) return;
        var _index = $this.SLALeadTimes.indexOf(item);
        $this.SLALeadTimes.splice(_index, 1);
        item.Item = null;
    }
    static clearSLALeadTimes = ($this) => {
        $this.SLALeadTimes = null;
    }
    static setSLADeliveries = ($this, items) => {
        if (items == null) items = [];
        if ($this.SLADeliveries == null) $this.SLADeliveries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SLADeliveries.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLADeliveries($this, $this.SLADeliveries[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManySLADeliveries($this, copyItems);
    }
    static addManySLADeliveries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries($this, items[i]);
        }
    }
    static addSLADeliveries = ($this, item) => {
        if ($this.SLADeliveries == null) $this.SLADeliveries = [];
        if (item == null || $this.SLADeliveries.indexOf(item) > -1) return;
        $this.SLADeliveries.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SLADelivery.setItem(item, $this);
        }
    }
    static addRangeSLADeliveries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries($this, item));
    }
    static removeSLADeliveries = ($this, item) => {
        if ($this == null || $this.SLADeliveries == null || $this.SLADeliveries.indexOf(item) === -1) return;
        var _index = $this.SLADeliveries.indexOf(item);
        $this.SLADeliveries.splice(_index, 1);
        item.Item = null;
    }
    static clearSLADeliveries = ($this) => {
        $this.SLADeliveries = null;
    }
    static setStocksOnHand = ($this, items) => {
        if (items == null) items = [];
        if ($this.StocksOnHand == null) $this.StocksOnHand = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StocksOnHand.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.removeStocksOnHand($this, $this.StocksOnHand[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Item.addManyStocksOnHand($this, copyItems);
    }
    static addManyStocksOnHand = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand($this, items[i]);
        }
    }
    static addStocksOnHand = ($this, item) => {
        if ($this.StocksOnHand == null) $this.StocksOnHand = [];
        if (item == null || $this.StocksOnHand.indexOf(item) > -1) return;
        $this.StocksOnHand.push(item);
        if (item.Item != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.StockOnHand.setItem(item, $this);
        }
    }
    static addRangeStocksOnHand = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand($this, item));
    }
    static removeStocksOnHand = ($this, item) => {
        if ($this == null || $this.StocksOnHand == null || $this.StocksOnHand.indexOf(item) === -1) return;
        var _index = $this.StocksOnHand.indexOf(item);
        $this.StocksOnHand.splice(_index, 1);
        item.Item = null;
    }
    static clearStocksOnHand = ($this) => {
        $this.StocksOnHand = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.SKU == null || $this.SKU == "";
    }
}

export class SupplierCapacity  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SupplierCapacity";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DateOfStockUpdate:
    any;
DailyProduction:
    any;
Stock:
    any;
Item:
    any;
Supplier:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeSupplierCapacities(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSupplierCapacities(value, $this);
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class WasteOld  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.WasteOld";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
WastedStock:
    any;
StockPerSKU:
    any;
SKU:
    any;
WastePercentage:
    any;
ItemDescription:
    any;
DateFormatted:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MinimumQuantity  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.MinimumQuantity";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Country:
    any;
Quantity:
    any;
Item:
    any;
Supplier:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null && oldValue.MinimumQuantity != null) {
                oldValue.MinimumQuantity = null;
            }
            if ($this.Item.MinimumQuantity !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.setMinimumQuantity(value, $this);
            }
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Notification  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Notification";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Message:
    any;
TotalSupplierStock:
    any;
OrderForecastQuantity:
    any;
Diff:
    any;
SalesForecastDate:
    any;
CreatedBy:
    any;
Item:
    any;
Warehouse:
    any;
OrderForecastDetails:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeNotifications(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addNotifications(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setOrderForecastDetails = ($this, value) => {
        var oldValue = $this.OrderForecastDetails;
        $this.OrderForecastDetails = value;
        if (value != null) {
            if (oldValue != null && oldValue.Notification != null) {
                oldValue.Notification = null;
            }
            if ($this.OrderForecastDetails.Notification !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.setNotification(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderFDashboard  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.OrderForecastStatistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderForecastStatistics:
    any;
    static setOrderForecastStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecastStatistics == null) $this.OrderForecastStatistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecastStatistics.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.removeOrderForecastStatistics($this, $this.OrderForecastStatistics[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addManyOrderForecastStatistics($this, copyItems);
    }
    static addManyOrderForecastStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, items[i]);
        }
    }
    static addOrderForecastStatistics = ($this, item) => {
        if ($this.OrderForecastStatistics == null) $this.OrderForecastStatistics = [];
        if (item == null || $this.OrderForecastStatistics.indexOf(item) > -1) return;
        $this.OrderForecastStatistics.push(item);
    }
    static addRangeOrderForecastStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.OrderFDashboard.addOrderForecastStatistics($this, item));
    }
    static removeOrderForecastStatistics = ($this, item) => {
        if ($this == null || $this.OrderForecastStatistics == null || $this.OrderForecastStatistics.indexOf(item) === -1) return;
        var _index = $this.OrderForecastStatistics.indexOf(item);
        $this.OrderForecastStatistics.splice(_index, 1);
    }
    static clearOrderForecastStatistics = ($this) => {
        $this.OrderForecastStatistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecastStatistic  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastStatistic";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Quantity:
    any;
RoundQuantity:
    any;
OrderDate:
    any;
OrderDateFormatted:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecastDetails  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Comments = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ReplenishmentCycle:
    any;
AutomatedForecast:
    any;
Quantity:
    any;
RoundQuantity:
    any;
OrderInventoryDays:
    any;
RecommendedOrderDate:
    any;
SalesForecastDate:
    any;
SupplierCanDeliver:
    any;
SupplierMaxQuantity:
    any;
SupplierCoverageDays:
    any;
ItemCoverageDays:
    any;
InitialStockLevel:
    any;
SupplierAvailableQuantity:
    any;
SupplierSharesStock:
    any;
CreatedOn:
    any;
Status:
    any;
Warehouse:
    any;
Item:
    any;
OrderForecast:
    any;
Notification:
    any;
Comments:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setOrderForecast = ($this, value) => {
        var oldValue = $this.OrderForecast;
        $this.OrderForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeOrderForecastDetails(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails(value, $this);
        }
    }
    static setNotification = ($this, value) => {
        var oldValue = $this.Notification;
        $this.Notification = value;
        if (value != null) {
            if (oldValue != null && oldValue.OrderForecastDetails != null) {
                oldValue.OrderForecastDetails = null;
            }
            if ($this.Notification.OrderForecastDetails !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.Notification.setOrderForecastDetails(value, $this);
            }
        }
    }
    static setComments = ($this, items) => {
        if (items == null) items = [];
        if ($this.Comments == null) $this.Comments = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Comments.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.removeComments($this, $this.Comments[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addManyComments($this, copyItems);
    }
    static addManyComments = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addComments($this, items[i]);
        }
    }
    static addComments = ($this, item) => {
        if ($this.Comments == null) $this.Comments = [];
        if (item == null || $this.Comments.indexOf(item) > -1) return;
        $this.Comments.push(item);
    }
    static addRangeComments = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.addComments($this, item));
    }
    static removeComments = ($this, item) => {
        if ($this == null || $this.Comments == null || $this.Comments.indexOf(item) === -1) return;
        var _index = $this.Comments.indexOf(item);
        $this.Comments.splice(_index, 1);
    }
    static clearComments = ($this) => {
        $this.Comments = null;
    }
    static Get_OrderInventoryDays($this: any): any{return 0;

                                                      }
        static Get_RoundQuantity($this: any): any{let minQuantity = (Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => $this.Item.MinimumQuantity.Quantity.toString(), "")), false) ? 0 : Joove.Common.nullSafe<any>(() => $this.Item.MinimumQuantity.Quantity, 0));

                if (CLMS.Framework.Number.Equal(() => minQuantity, () => 0)) {
    return 0;
}

return Joove.Common.cast((Joove.Common.safeNumber((parseInt(((Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Quantity, 0)) / Joove.Common.safeNumber(minQuantity))) + Joove.Common.safeNumber(1))) as any))) * Joove.Common.safeNumber(minQuantity)), "int?");

                                         }
static GetDictionaryKey(itemSKU: any,warehouseCode: any): any{return "item_" + itemSKU + "_warehouse_" + warehouseCode;

                                                                     }
        static PalletsToUnits(item: any,pallets: any): any{let palletSize = Joove.Common.nullSafe<any>(() => item.PalletSize, 0);

                let numberOfUnits = parseInt(((Joove.Common.safeNumber(pallets) * Joove.Common.safeNumber(palletSize))) as any);

                Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "Units: " + Joove.Common.safeNumber(numberOfUnits) + " for item: " + Joove.Common.nullSafe<any>(() => item.SKU, "") + " pallets are: " + Joove.Common.safeNumber(pallets) + " pallet size is: " + Joove.Common.safeNumber(palletSize)), null);

                return numberOfUnits;

                                                          }
        static UnitsToPallets(item: any,units: any): any{let palletSize = Joove.Common.nullSafe<any>(() => item.PalletSize, 0);

                let numberOfPallets = 0.0;

                if (CLMS.Framework.Number.GreaterThan(() => palletSize, () => 0)) {
    numberOfPallets = Joove.Common.safeNumber(units) / Joove.Common.safeNumber(palletSize);
    }

    return numberOfPallets;

                                                    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProposedOrder  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ProposedOrder";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Units = 0;
        this.Finished = false;
        this.CurrentStockUnits = 0;
        this.Initialized = false;
        this.RealOrderUnits = 0;
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
NumberOfPallets:
    any;
Finished:
    any;
ErrorOccured:
    any;
ErrorDesc:
    any;
Date:
    any;
CurrentStockUnits:
    any;
ItemSKU:
    any;
ItemWarehouseCode:
    any;
Initialized:
    any;
startDateTime:
    any;
RealOrderArrivalDate:
    any;
RealOrderUnits:
    any;
SupplierCoverageDays:
    any;
CoverageDays:
    any;
InitialStockLevel:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ConstValues  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ConstValues";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.StockLowLimit = -99999999;
        this['_key'] = this.Id = 0;
    }
Id:
    any;
StockLowLimit:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderForecast  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.OrderForecast";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.OrderForecastDetails = [];
        this.SupplierParameters = [];
        this.ItemParameters = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ImportId:
    any;
Status:
    any;
CreatedBy:
    any;
CreatedOn:
    any;
StartDate:
    any;
EndDate:
    any;
State:
    any;
OrderForecastDetails:
    any;
SalesForecast:
    any;
SupplierParameters:
    any;
ItemParameters:
    any;
    static setOrderForecastDetails = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecastDetails == null) $this.OrderForecastDetails = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecastDetails.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeOrderForecastDetails($this, $this.OrderForecastDetails[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManyOrderForecastDetails($this, copyItems);
    }
    static addManyOrderForecastDetails = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails($this, items[i]);
        }
    }
    static addOrderForecastDetails = ($this, item) => {
        if ($this.OrderForecastDetails == null) $this.OrderForecastDetails = [];
        if (item == null || $this.OrderForecastDetails.indexOf(item) > -1) return;
        $this.OrderForecastDetails.push(item);
        if (item.OrderForecast != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecastDetails.setOrderForecast(item, $this);
        }
    }
    static addRangeOrderForecastDetails = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addOrderForecastDetails($this, item));
    }
    static removeOrderForecastDetails = ($this, item) => {
        if ($this == null || $this.OrderForecastDetails == null || $this.OrderForecastDetails.indexOf(item) === -1) return;
        var _index = $this.OrderForecastDetails.indexOf(item);
        $this.OrderForecastDetails.splice(_index, 1);
        item.OrderForecast = null;
    }
    static clearOrderForecastDetails = ($this) => {
        $this.OrderForecastDetails = null;
    }
    static setSalesForecast = ($this, value) => {
        var oldValue = $this.SalesForecast;
        $this.SalesForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeOrderForecasts(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts(value, $this);
        }
    }
    static setSupplierParameters = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierParameters == null) $this.SupplierParameters = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierParameters.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeSupplierParameters($this, $this.SupplierParameters[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManySupplierParameters($this, copyItems);
    }
    static addManySupplierParameters = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters($this, items[i]);
        }
    }
    static addSupplierParameters = ($this, item) => {
        if ($this.SupplierParameters == null) $this.SupplierParameters = [];
        if (item == null || $this.SupplierParameters.indexOf(item) > -1) return;
        $this.SupplierParameters.push(item);
        if (item.OrderForecast != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter.setOrderForecast(item, $this);
        }
    }
    static addRangeSupplierParameters = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters($this, item));
    }
    static removeSupplierParameters = ($this, item) => {
        if ($this == null || $this.SupplierParameters == null || $this.SupplierParameters.indexOf(item) === -1) return;
        var _index = $this.SupplierParameters.indexOf(item);
        $this.SupplierParameters.splice(_index, 1);
        item.OrderForecast = null;
    }
    static clearSupplierParameters = ($this) => {
        $this.SupplierParameters = null;
    }
    static setItemParameters = ($this, items) => {
        if (items == null) items = [];
        if ($this.ItemParameters == null) $this.ItemParameters = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ItemParameters.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeItemParameters($this, $this.ItemParameters[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addManyItemParameters($this, copyItems);
    }
    static addManyItemParameters = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addItemParameters($this, items[i]);
        }
    }
    static addItemParameters = ($this, item) => {
        if ($this.ItemParameters == null) $this.ItemParameters = [];
        if (item == null || $this.ItemParameters.indexOf(item) > -1) return;
        $this.ItemParameters.push(item);
    }
    static addRangeItemParameters = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addItemParameters($this, item));
    }
    static removeItemParameters = ($this, item) => {
        if ($this == null || $this.ItemParameters == null || $this.ItemParameters.indexOf(item) === -1) return;
        var _index = $this.ItemParameters.indexOf(item);
        $this.ItemParameters.splice(_index, 1);
    }
    static clearItemParameters = ($this) => {
        $this.ItemParameters = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ItemParameter  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.ItemParameter";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SupplierCanDeliver:
    any;
SupplierQuantity:
    any;
SupplierComments:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierParameter  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SupplierParameter";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoverageDays:
    any;
SupplierCanDeliverWholeForecast:
    any;
SupplierComments:
    any;
HasReplied:
    any;
SharesExcessStock:
    any;
OrderForecast:
    any;
Agreement:
    any;
    static setOrderForecast = ($this, value) => {
        var oldValue = $this.OrderForecast;
        $this.OrderForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.removeSupplierParameters(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.addSupplierParameters(value, $this);
        }
    }
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Comment  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Comment";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Text:
    any;
AddedBy:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PastOrder  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.PastOrder";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderNumber:
    any;
WrittenDate:
    any;
NotBeforeDate:
    any;
QuantityOrdered:
    any;
ReceiveDate:
    any;
QuantityReceived:
    any;
Caller:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removePastOrders(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addPastOrders(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Warehouse.removePastOrders(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders(value, $this);
        }
    }
    static DiffDates(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Sales  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Sales";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ForecastDate:
    any;
Units:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeItemsForecast(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addItemsForecast(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SalesForecast  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SalesForecast";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.OrderForecasts = [];
        this.SalesForecastDetails = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ImportId:
    any;
ImportDate:
    any;
OrderForecasts:
    any;
SalesForecastDetails:
    any;
    static setOrderForecasts = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderForecasts == null) $this.OrderForecasts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderForecasts.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeOrderForecasts($this, $this.OrderForecasts[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addManyOrderForecasts($this, copyItems);
    }
    static addManyOrderForecasts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts($this, items[i]);
        }
    }
    static addOrderForecasts = ($this, item) => {
        if ($this.OrderForecasts == null) $this.OrderForecasts = [];
        if (item == null || $this.OrderForecasts.indexOf(item) > -1) return;
        $this.OrderForecasts.push(item);
        if (item.SalesForecast != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.OrderForecast.setSalesForecast(item, $this);
        }
    }
    static addRangeOrderForecasts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addOrderForecasts($this, item));
    }
    static removeOrderForecasts = ($this, item) => {
        if ($this == null || $this.OrderForecasts == null || $this.OrderForecasts.indexOf(item) === -1) return;
        var _index = $this.OrderForecasts.indexOf(item);
        $this.OrderForecasts.splice(_index, 1);
        item.SalesForecast = null;
    }
    static clearOrderForecasts = ($this) => {
        $this.OrderForecasts = null;
    }
    static setSalesForecastDetails = ($this, items) => {
        if (items == null) items = [];
        if ($this.SalesForecastDetails == null) $this.SalesForecastDetails = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SalesForecastDetails.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeSalesForecastDetails($this, $this.SalesForecastDetails[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addManySalesForecastDetails($this, copyItems);
    }
    static addManySalesForecastDetails = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails($this, items[i]);
        }
    }
    static addSalesForecastDetails = ($this, item) => {
        if ($this.SalesForecastDetails == null) $this.SalesForecastDetails = [];
        if (item == null || $this.SalesForecastDetails.indexOf(item) > -1) return;
        $this.SalesForecastDetails.push(item);
        if (item.SalesForecast != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails.setSalesForecast(item, $this);
        }
    }
    static addRangeSalesForecastDetails = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails($this, item));
    }
    static removeSalesForecastDetails = ($this, item) => {
        if ($this == null || $this.SalesForecastDetails == null || $this.SalesForecastDetails.indexOf(item) === -1) return;
        var _index = $this.SalesForecastDetails.indexOf(item);
        $this.SalesForecastDetails.splice(_index, 1);
        item.SalesForecast = null;
    }
    static clearSalesForecastDetails = ($this) => {
        $this.SalesForecastDetails = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLALeadTime  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLALeadTime";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AgreedLeadTime:
    any;
RealLeadTime:
    any;
Percentage:
    any;
ItemDescription:
    any;
DateFormatted:
    any;
Threshold:
    any;
SLALeadDate:
    any;
Month:
    any;
MonthlyDelayed:
    any;
MontlhyOrders:
    any;
MonthlyPercentage:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLALeadTimes(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSLALeadTimes(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLADelivery  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLADelivery";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderedQuantities:
    any;
DeliveredQuantities:
    any;
Percentage:
    any;
ItemDescription:
    any;
Threshold:
    any;
SLADate:
    any;
DateFormatted:
    any;
Month:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeSLADeliveries(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addSLADeliveries(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Platform  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Platform";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
percentage:
    any;
ItemDescription:
    any;
RealOrderedQuantities:
    any;
ForecastOrders:
    any;
Month:
    any;
Item:
    any;
Warehouse:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SLAStatistics  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SLAStatistics";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Percentage:
    any;
Threshold:
    any;
Month:
    any;
Item:
    any;
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class InventoryDaysKPI  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.InventoryDaysKPI";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.InventoryDaysKPIKey = 0;
    }
InventoryDays:
    any;
ItemDescription:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
InventoryDaysKPIKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.InventoryDaysKPIKey == null || $this.InventoryDaysKPIKey == 0;
    }
}

export class UnitsKPI  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.UnitsKPI";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
ItemDescription:
    any;
SalesForecastDate:
    any;
SalesForecastDateFormatted:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Stats  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Stats";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Percentage:
    any;
Threshold:
    any;
DateFormatted:
    any;
Date:
    any;
Warehouse:
    any;
Item:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StockOnHand  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.StockOnHand";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
CurrentInventoryDays:
    any;
StockOnHandDate:
    any;
LeadTime:
    any;
TargetInventoryDays:
    any;
FullTrackLoad:
    any;
WDDays:
    any;
Agreement:
    any;
Warehouse:
    any;
Item:
    any;
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Agreement.removeStockOnHands(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Agreement.addStockOnHands(value, $this);
        }
    }
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static setItem = ($this, value) => {
        var oldValue = $this.Item;
        $this.Item = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Item.removeStocksOnHand(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Item.addStocksOnHand(value, $this);
        }
    }
    static DailyStock(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Store  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Store";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TransportUnCap  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.TransportUnCap";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UOP:
    any;
PercRound:
    any;
Tuc1:
    any;
SplitOcInd:
    any;
Status:
    any;
Warehouse:
    any;
    static setWarehouse = ($this, value) => {
        var oldValue = $this.Warehouse;
        $this.Warehouse = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Warehouse  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Warehouse";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.PastOrders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
FlowType:
    any;
PastOrders:
    any;
    static setPastOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.PastOrders == null) $this.PastOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PastOrders.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Warehouse.removePastOrders($this, $this.PastOrders[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addManyPastOrders($this, copyItems);
    }
    static addManyPastOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders($this, items[i]);
        }
    }
    static addPastOrders = ($this, item) => {
        if ($this.PastOrders == null) $this.PastOrders = [];
        if (item == null || $this.PastOrders.indexOf(item) > -1) return;
        $this.PastOrders.push(item);
        if (item.Warehouse != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.PastOrder.setWarehouse(item, $this);
        }
    }
    static addRangePastOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Warehouse.addPastOrders($this, item));
    }
    static removePastOrders = ($this, item) => {
        if ($this == null || $this.PastOrders == null || $this.PastOrders.indexOf(item) === -1) return;
        var _index = $this.PastOrders.indexOf(item);
        $this.PastOrders.splice(_index, 1);
        item.Warehouse = null;
    }
    static clearPastOrders = ($this) => {
        $this.PastOrders = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class XPackLog  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.XPackLog";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Probability:
    any;
RecordScore:
    any;
InitialRecordScore:
    any;
PartitionFieldValue:
    any;
Timestamp:
    any;
Typical:
    any;
Actual:
    any;
    static GetRecordRequest(): any{let req = new Object() as any;

                                       let query = new Object() as any;

                                       let boolOp = new Object() as any;

                                       let mustOp = new Object() as any;

                                       let queryString = new Object() as any;

                                       queryString.analyze_wildcard = true;

                                       queryString.query = "+result_type:\"record\"";

                                       mustOp.query_string = queryString;

                                       boolOp.must = mustOp;

                                       let filter = new Object() as any;

                                       let range = new Object() as any;

                                       let timestamp = new Object() as any;

                                       timestamp.gte = "now-1y";

                                       timestamp.lte = "now";

                                       range.timestamp = timestamp;

                                       filter.range = range;

                                       boolOp.filter = filter;

                                       query.Bool = boolOp;

                                       req.query = query;

                                       return req;

                                      }
        static Transform(logs: any): any{let buckets = [];

                                         for (let _ibucket = 0; _ibucket < (logs == null ? 0 : logs.length); _ibucket++) {
    var bucket = logs[_ibucket];
        let log = new DSS1_RetailerDriverStockOptimisation.BO.XPackLog();
        log.InitialRecordScore = Joove.Common.nullSafe<any>(() => bucket.source.initial_record_score, 0);
        log.Actual = Joove.Common.nullSafe<any>(() => bucket.source.actual[0], 0);
        log.PartitionFieldValue = Joove.Common.nullSafe<any>(() => bucket.source.partition_field_value, "");
        log.Probability = Joove.Common.nullSafe<any>(() => bucket.source.probability, 0);
        log.RecordScore = Joove.Common.nullSafe<any>(() => bucket.source.record_score, 0);
        log.Timestamp = Joove.Common.nullSafe<any>(() => bucket.source.timestamp, 0);
        log.Typical = Joove.Common.nullSafe<any>(() => bucket.source.typical[0], 0);
        Joove.Common.nullSafe<any>(() => buckets.add(log), null);
    }

    return buckets;

                                    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Profile.removeSettings(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.FileData";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DSS1_RetailerDriverStockOptimisation.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

export class Contact extends ApplicationUser {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Contact";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
Id:
    any;
Company:
    any;
    static setCompany = ($this, value) => {
        var oldValue = $this.Company;
        $this.Company = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.Company.removeContacts(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.Company.addContacts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class Retailer extends Company {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Retailer";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PastSales extends Sales {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.PastSales";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DeliveryPlan extends Sales {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.DeliveryPlan";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SalesForecastDetails extends Sales {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.SalesForecastDetails";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this.ComputedStock = 0;
        this.NewOrder = 0;
        this['_key'] = this.Id = 0;
    }
AvgDailyDemandForecast:
    any;
ComputedStock:
    any;
NewOrder:
    any;
SalesForecast:
    any;
    static setSalesForecast = ($this, value) => {
        var oldValue = $this.SalesForecast;
        $this.SalesForecast = value;
        if (value != null) {
            if (oldValue != null) {
                DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.removeSalesForecastDetails(oldValue, $this);
            }
            DSS1_RetailerDriverStockOptimisation.BO.SalesForecast.addSalesForecastDetails(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Supplier extends Company {
    _originalTypeClassName = "DSS1_RetailerDriverStockOptimisation.BO.Supplier";
    Domain = DSS1_RetailerDriverStockOptimisation.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
BusinessUnit:
    any;
    static setBusinessUnit = ($this, value) => {
        var oldValue = $this.BusinessUnit;
        $this.BusinessUnit = value;
        if (value != null) {
            if (oldValue != null && oldValue.Supplier != null) {
                oldValue.Supplier = null;
            }
            if ($this.BusinessUnit.Supplier !== $this) {
                DSS1_RetailerDriverStockOptimisation.BO.BusinessUnit.setSupplier(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

}
var _appDomain = DSS1_RetailerDriverStockOptimisation.BO;
window.$domain = _appDomain;
